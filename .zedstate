{"split":"2-0","session.current":["/sim_objs.py","/w_queues/sim.py"],"session.open":{"/sim_objs.py":{"scrollTop":407,"scrollLeft":0,"selection":{"start":{"row":57,"column":8},"end":{"row":57,"column":8}},"lastUse":1535427573113,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":47},"end":{"row":55,"column":48}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":32},"end":{"row":52,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":52,"column":0},"end":{"row":52,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":6},"end":{"row":52,"column":26}},"text":"demandmean*coeff_var"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":16},"end":{"row":52,"column":17}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":16},"end":{"row":53,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":53,"column":0},"end":{"row":53,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":16},"end":{"row":52,"column":17}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":17},"end":{"row":52,"column":18}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":18},"end":{"row":52,"column":19}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":19},"end":{"row":52,"column":20}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":20},"end":{"row":52,"column":21}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":21},"end":{"row":52,"column":22}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":22},"end":{"row":52,"column":23}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":23},"end":{"row":52,"column":24}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":24},"end":{"row":52,"column":25}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":25},"end":{"row":52,"column":26}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":26},"end":{"row":52,"column":27}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":27},"end":{"row":52,"column":28}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":28},"end":{"row":52,"column":29}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":29},"end":{"row":52,"column":30}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":30},"end":{"row":52,"column":31}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":31},"end":{"row":52,"column":32}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":32},"end":{"row":52,"column":33}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":24},"end":{"row":52,"column":33}},"text":"demandper"},{"action":"insertText","range":{"start":{"row":52,"column":24},"end":{"row":52,"column":45}},"text":"demandperslot_mean_rv"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":45},"end":{"row":52,"column":46}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":46},"end":{"row":52,"column":47}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":47},"end":{"row":52,"column":48}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":48},"end":{"row":52,"column":49}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":49},"end":{"row":52,"column":50}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":50},"end":{"row":52,"column":51}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":51},"end":{"row":52,"column":52}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":52},"end":{"row":52,"column":53}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":53},"end":{"row":52,"column":54}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":15},"end":{"row":53,"column":16}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":16},"end":{"row":53,"column":17}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":17},"end":{"row":53,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":18},"end":{"row":53,"column":19}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":19},"end":{"row":53,"column":20}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":20},"end":{"row":53,"column":21}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":68},"end":{"row":57,"column":69}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":8},"end":{"row":58,"column":36}},"text":"self.size_dist.gen_sample() "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":8},"end":{"row":58,"column":19}},"text":"totaldemand"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":19},"end":{"row":58,"column":20}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":20},"end":{"row":58,"column":21}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":19},"end":{"row":58,"column":20}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":23},"end":{"row":58,"column":24}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":24},"end":{"row":58,"column":25}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":25},"end":{"row":58,"column":26}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":26},"end":{"row":58,"column":27}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":27},"end":{"row":58,"column":28}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":28},"end":{"row":58,"column":29}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":29},"end":{"row":58,"column":30}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":30},"end":{"row":58,"column":31}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":31},"end":{"row":58,"column":32}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":27},"end":{"row":58,"column":32}},"text":"total"},{"action":"insertText","range":{"start":{"row":58,"column":27},"end":{"row":58,"column":41}},"text":"totaldemand_rv"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":41},"end":{"row":58,"column":42}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":42},"end":{"row":58,"column":43}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":43},"end":{"row":58,"column":44}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":44},"end":{"row":58,"column":45}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":45},"end":{"row":58,"column":46}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":46},"end":{"row":58,"column":47}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":47},"end":{"row":58,"column":48}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":47},"end":{"row":58,"column":48}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":46},"end":{"row":58,"column":47}},"text":"p"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":45},"end":{"row":58,"column":46}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":45},"end":{"row":58,"column":46}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":46},"end":{"row":58,"column":47}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":47},"end":{"row":58,"column":48}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":48},"end":{"row":58,"column":49}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":49},"end":{"row":58,"column":50}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":50},"end":{"row":58,"column":51}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":68},"end":{"row":57,"column":69}},"text":","}]}]],"redo":[]},"/w_queues/sim.py":{"scrollTop":1441.5,"scrollLeft":0,"selection":{"start":{"row":45,"column":0},"end":{"row":113,"column":10}},"lastUse":1535427553855,"undo":[],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":29},"end":{"row":28,"column":35}},"text":"size, "}]}]]},"/w_queues/exp.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":14,"column":35},"end":{"row":14,"column":35}},"lastUse":1535425971314,"undo":[],"redo":[]},"/exp.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"lastUse":1535425968390,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":11}},"text":"from sim.py"}]}]],"redo":[]},"/utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":2,"column":81},"end":{"row":2,"column":81}},"lastUse":1535392670118,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":49}},"text":"def save_name(folder_name, prob_name, ns, d, ar):"},{"action":"insertText","range":{"start":{"row":0,"column":49},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":79}},"text":"return \"{}/{}_ns{}_d{}_ar{}\".format(folder_name, prob_name, ns, d, '%.2f' % ar)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]}]],"redo":[]},"/plot_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":48},"end":{"row":9,"column":48}},"lastUse":1535392567191,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":46}},"text":"import inspect, math, mpmath, scipy, itertools"},{"action":"insertText","range":{"start":{"row":0,"column":46},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":8,"column":0}},"lines":["from scipy import special","","# dark_color = itertools.cycle(('green', 'red', 'blue', 'turquoise', 'goldenrod', 'purple', 'gray', 'brown', 'magenta', 'gold', 'olive', 'orangered', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray'))","dark_color = itertools.cycle(('green', 'red', 'blue', 'goldenrod', 'magenta', 'purple', 'gray', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","light_color = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle = itertools.cycle(('-', '--', '-.', ':') )","marker = itertools.cycle(('^', 'p', 'd', '+', 'v', '<', '>', '1' , '2', '3', '4', 'x') )"]},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":48}},"text":"skinny_marker_l = ['x', '+', '1', '2', '3', '4']"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["# dark_color = itertools.cycle(('green', 'red', 'blue', 'turquoise', 'goldenrod', 'purple', 'gray', 'brown', 'magenta', 'gold', 'olive', 'orangered', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray'))"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":14}},"text":"mew, ms = 3, 5"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":14}},"text":"mew, ms = 3, 5"}]}]]},"/log_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":25,"column":54},"end":{"row":25,"column":54}},"lastUse":1535392549622,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":9,"column":0}},"nl":"\n","lines":["# dark_color = itertools.cycle(('green', 'red', 'blue', 'turquoise', 'goldenrod', 'purple', 'gray', 'brown', 'magenta', 'gold', 'olive', 'orangered', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray'))","dark_color = itertools.cycle(('green', 'red', 'blue', 'goldenrod', 'magenta', 'purple', 'gray', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","light_color = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle = itertools.cycle(('-', '--', '-.', ':') )","marker = itertools.cycle(('^', 'p', 'd', '+', 'v', '<', '>', '1' , '2', '3', '4', 'x') )","skinny_marker_l = ['x', '+', '1', '2', '3', '4']"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":14}},"text":"mew, ms = 3, 5"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":9,"column":0}},"nl":"\n","lines":["","","INFO = 0","DEBUG = 1","WARNING = 2","ERROR = 3"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":36,"column":0},"end":{"row":36,"column":54}},"text":"  print(\"{}:: {}\".format(inspect.stack()[1][3], log) )"},{"action":"removeLines","range":{"start":{"row":9,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":["\"\"\"","*log: To have a unified logging which can be refactored easily","\"\"\"","def sim_log(dlevel, env, caller, action, affected):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","","def log(dlevel, log):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], inspect.stack()[1][3], log) )","","def alog(log):"]},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":3}},"text":"\"\"\""},{"action":"insertText","range":{"start":{"row":9,"column":3},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":51,"column":0}},"lines":["*log: To have a unified logging which can be refactored easily","\"\"\"","def slog(dlevel, env, caller, action, affected, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def log(dlevel, log, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  try:","    funcname = inspect.stack()[1][3]","  except IndexError:","    funcname = ''","  ","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], funcname, log) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def alog(log, **kwargs):","  print(\"{}:: {}\".format(inspect.stack()[1][3], log) )","  for k, v in kwargs.items():","    print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def blog(**kwargs):","  for k, v in kwargs.items():"]},{"action":"insertText","range":{"start":{"row":51,"column":0},"end":{"row":51,"column":52}},"text":"    print(\"  {}: {}\".format(k, pprint.pformat(v) ) )"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":81}},"text":"  return \"{}/{}_ns{}_d{}_ar{}\".format(folder_name, prob_name, ns, d, '%.2f' % ar)"},{"action":"removeLines","range":{"start":{"row":53,"column":0},"end":{"row":54,"column":0}},"nl":"\n","lines":["def save_name(folder_name, prob_name, ns, d, ar):"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":53,"column":0},"end":{"row":54,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":52,"column":0},"end":{"row":53,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":92}},"text":"debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":92}},"text":"debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":21}},"text":"# DEBUG_LEVEL = ERROR"},{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":["# DEBUG_LEVEL = INFO","DEBUG_LEVEL = WARNING"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":[""]}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":25,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":20}},"text":"# DEBUG_LEVEL = INFO"},{"action":"insertText","range":{"start":{"row":24,"column":20},"end":{"row":25,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"lines":["DEBUG_LEVEL = WARNING"]},{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":21}},"text":"# DEBUG_LEVEL = ERROR"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":20}},"text":"# DEBUG_LEVEL = INFO"},{"action":"insertText","range":{"start":{"row":5,"column":20},"end":{"row":6,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"lines":["DEBUG_LEVEL = WARNING"]},{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":21}},"text":"# DEBUG_LEVEL = ERROR"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":21},"end":{"row":8,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":22,"column":5},"end":{"row":22,"column":6}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":1}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":2},"end":{"row":7,"column":3}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":2},"end":{"row":5,"column":3}},"text":"S"}]}]],"redo":[]},"/zedconfig.json":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":6},"end":{"row":9,"column":6}},"lastUse":1535392269284,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":21},"end":{"row":6,"column":22}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":21},"end":{"row":6,"column":22}},"text":"5"}]}]],"redo":[]},"/learn_howtorep.py":{"scrollTop":362,"scrollLeft":0,"selection":{"start":{"row":46,"column":2},"end":{"row":46,"column":2}},"lastUse":1535390213006,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":33},"end":{"row":51,"column":34}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":34},"end":{"row":51,"column":35}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":35},"end":{"row":51,"column":36}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":39},"end":{"row":51,"column":40}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":40},"end":{"row":51,"column":41}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":41},"end":{"row":51,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":51,"column":51},"end":{"row":51,"column":54}},"text":"in "},{"action":"insertText","range":{"start":{"row":51,"column":51},"end":{"row":51,"column":52}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":52},"end":{"row":51,"column":53}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":53},"end":{"row":51,"column":54}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":54},"end":{"row":51,"column":55}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":55},"end":{"row":51,"column":56}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":56},"end":{"row":51,"column":57}},"text":"F"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":57},"end":{"row":51,"column":58}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":58},"end":{"row":51,"column":59}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":59},"end":{"row":51,"column":60}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":60},"end":{"row":51,"column":61}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":52,"column":0},"end":{"row":53,"column":0}},"nl":"\n","lines":["      "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":36},"end":{"row":52,"column":42}},"text":"wjsize"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":47},"end":{"row":41,"column":59}},"text":"=self.wjsize"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":23},"end":{"row":38,"column":24}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":24},"end":{"row":38,"column":25}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":25},"end":{"row":38,"column":26}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":26},"end":{"row":38,"column":27}},"text":"j"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":27},"end":{"row":38,"column":28}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":28},"end":{"row":38,"column":29}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":29},"end":{"row":38,"column":30}},"text":"z"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":30},"end":{"row":38,"column":31}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":22,"column":0},"end":{"row":23,"column":0}},"nl":"\n","lines":["    self.wjsize = wjsize"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":72},"end":{"row":15,"column":86}},"text":", wjsize=False"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":18},"end":{"row":52,"column":53}},"text":"self.sching_m['s_len'] == len(ql_l)"},{"action":"insertText","range":{"start":{"row":52,"column":18},"end":{"row":52,"column":24}},"text":"wjsize"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":45},"end":{"row":52,"column":46}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":30},"end":{"row":52,"column":45}},"text":"ql_l + [j.size]"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":10},"end":{"row":52,"column":25}},"text":"ql_l + [j.size]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":25},"end":{"row":52,"column":29}},"text":"ql_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":52,"column":41},"end":{"row":52,"column":45}},"text":"ql_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":23},"end":{"row":50,"column":24}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":24},"end":{"row":50,"column":25}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":25},"end":{"row":50,"column":26}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":26},"end":{"row":50,"column":27}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":27},"end":{"row":50,"column":28}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":23},"end":{"row":50,"column":28}},"text":"'opt'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":28},"end":{"row":50,"column":29}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":29},"end":{"row":50,"column":30}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":30},"end":{"row":50,"column":31}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":31},"end":{"row":50,"column":32}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":32},"end":{"row":50,"column":45}},"text":"self.sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":45},"end":{"row":50,"column":46}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":46},"end":{"row":50,"column":47}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":47},"end":{"row":50,"column":48}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":48},"end":{"row":50,"column":49}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":50,"column":49},"end":{"row":50,"column":50}},"text":" "}]}]],"redo":[]},"/learn_howtorep_wmpi.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":16,"column":0},"end":{"row":16,"column":0}},"lastUse":1535390212870,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":187,"column":75},"end":{"row":187,"column":83}},"text":"'wjsize'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":75},"end":{"row":187,"column":76}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":76},"end":{"row":187,"column":77}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":77},"end":{"row":187,"column":78}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":78},"end":{"row":187,"column":79}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":79},"end":{"row":187,"column":80}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":80},"end":{"row":187,"column":81}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":81},"end":{"row":187,"column":82}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":82},"end":{"row":187,"column":83}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":83},"end":{"row":187,"column":84}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":84},"end":{"row":187,"column":85}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":40},"end":{"row":18,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":8}},"text":"'wjsize'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":1}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":1},"end":{"row":18,"column":2}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":2},"end":{"row":18,"column":3}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":3},"end":{"row":18,"column":4}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":4},"end":{"row":18,"column":5}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":5},"end":{"row":18,"column":6}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":6},"end":{"row":18,"column":7}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":7},"end":{"row":18,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":8},"end":{"row":18,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":9},"end":{"row":18,"column":10}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":10},"end":{"row":18,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":11},"end":{"row":18,"column":12}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":12},"end":{"row":18,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":21},"end":{"row":18,"column":22}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":22},"end":{"row":18,"column":31}},"text":"if wjsize"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":31},"end":{"row":18,"column":32}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":32},"end":{"row":18,"column":33}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":33},"end":{"row":18,"column":34}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":34},"end":{"row":18,"column":35}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":35},"end":{"row":18,"column":36}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":36},"end":{"row":18,"column":37}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":37},"end":{"row":18,"column":38}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":38},"end":{"row":18,"column":39}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":39},"end":{"row":18,"column":40}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":40},"end":{"row":18,"column":41}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":71},"end":{"row":56,"column":72}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":72},"end":{"row":56,"column":73}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":73},"end":{"row":56,"column":74}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":74},"end":{"row":56,"column":75}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":74},"end":{"row":56,"column":75}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":75},"end":{"row":56,"column":76}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":76},"end":{"row":56,"column":77}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":78},"end":{"row":56,"column":79}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":79},"end":{"row":56,"column":80}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":80},"end":{"row":56,"column":81}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":81},"end":{"row":56,"column":82}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":82},"end":{"row":56,"column":83}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":56,"column":82},"end":{"row":56,"column":83}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":82},"end":{"row":56,"column":83}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":83},"end":{"row":56,"column":84}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":84},"end":{"row":56,"column":85}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":85},"end":{"row":56,"column":86}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":86},"end":{"row":56,"column":87}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":87},"end":{"row":56,"column":88}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":88},"end":{"row":56,"column":89}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":56,"column":89},"end":{"row":56,"column":90}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":21},"end":{"row":19,"column":22}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":20},"end":{"row":19,"column":21}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":19},"end":{"row":19,"column":20}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":19},"end":{"row":19,"column":20}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":23,"column":13},"end":{"row":23,"column":14}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":13},"end":{"row":23,"column":14}},"text":"4"}]}]],"redo":[]},"/scher.py":{"scrollTop":1876.5,"scrollLeft":0,"selection":{"start":{"row":150,"column":17},"end":{"row":150,"column":17}},"lastUse":1522765228136,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":208,"column":4},"end":{"row":208,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":208,"column":47},"end":{"row":208,"column":48}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":208,"column":46},"end":{"row":208,"column":47}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":4},"end":{"row":24,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":22,"column":4},"end":{"row":22,"column":6}},"text":"# "},{"action":"removeText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":2},"end":{"row":18,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":2},"end":{"row":18,"column":3}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":3},"end":{"row":18,"column":4}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":4},"end":{"row":18,"column":5}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":5},"end":{"row":18,"column":6}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":6},"end":{"row":18,"column":7}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":7},"end":{"row":18,"column":8}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":8},"end":{"row":18,"column":9}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":9},"end":{"row":18,"column":10}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":10},"end":{"row":18,"column":11}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":2},"end":{"row":18,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":4},"end":{"row":24,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":25,"column":4},"end":{"row":25,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":209,"column":47},"end":{"row":209,"column":48}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":209,"column":47},"end":{"row":209,"column":48}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":6},"end":{"row":195,"column":7}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":7},"end":{"row":195,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":8},"end":{"row":195,"column":9}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":9},"end":{"row":195,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":10},"end":{"row":195,"column":11}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":6},"end":{"row":196,"column":7}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":7},"end":{"row":196,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":8},"end":{"row":196,"column":9}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":9},"end":{"row":196,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":10},"end":{"row":196,"column":11}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":55},"end":{"row":196,"column":56}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":56},"end":{"row":196,"column":57}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":57},"end":{"row":196,"column":58}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":58},"end":{"row":196,"column":59}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":196,"column":59},"end":{"row":196,"column":60}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":197,"column":55},"end":{"row":197,"column":60}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":195,"column":6},"end":{"row":195,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":196,"column":6},"end":{"row":196,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":197,"column":6},"end":{"row":197,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":197,"column":111},"end":{"row":198,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":198,"column":0},"end":{"row":198,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":198,"column":6},"end":{"row":198,"column":104}},"text":"self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)"},{"action":"insertText","range":{"start":{"row":198,"column":104},"end":{"row":199,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"lines":["      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)"]},{"action":"insertText","range":{"start":{"row":200,"column":0},"end":{"row":200,"column":109}},"text":"      self.a_probs = tf.contrib.layers.fully_connected(self.hidden2, self.a_len, activation_fn=tf.nn.softmax)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"nl":"\n","lines":["      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":198,"column":17},"end":{"row":198,"column":18}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":199,"column":66},"end":{"row":199,"column":67}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":499,"column":0}},"nl":"\n","lines":["import math, time, random","import numpy as np","import tensorflow as tf","","def rewards_to_qvals(t_r_l, gamma):","  T = t_r_l.shape[0]","  # reward = average of all following rewards","  # for t in range(T):","  #   t_r_l[t, 0] = np.mean(t_r_l[t:, 0])","  ","  # for t in range(T):","  #   cumw, cumr = 0, 0","  #   for i, r in enumerate(t_r_l[t:, 0] ):","  #     cumw += gamma**i","  #     cumr += gamma**i * r","  #   t_r_l[t, 0] = cumr/cumw","  # return t_r_l","  ","  # gamma = 1","  t_dr_l = np.zeros((T, 1))","  cumw, cumr = 0, 0","  for t in range(T-1, -1, -1):","    cumr = t_r_l[t, 0] + gamma*cumr","    # cumw = 1 + gamma*cumw","    # t_dr_l[t, 0] = cumr/cumw","    t_dr_l[t, 0] = cumr","  return t_dr_l","  ","  # reward = discounted sum of all following rewards","  # t_dr_l = np.zeros((T, 1))","  # radd = 0","  # for t in range(T-1, -1, -1):","  #   radd = t_r_l[t, 0] + radd * gamma","  #   t_dr_l[t, 0] = radd","  # return t_dr_l","","class ValueEster(object):","  def __init__(self, s_len, nn_len, straj_training):","    self.s_len = s_len","    self.nn_len = nn_len","    self.straj_training = straj_training","    ","    self.gamma = 0.99","    self.init()","  ","  def __repr__(self):","    return \"ValueEster[s_len= {}]\".format(self.s_len)","  ","  def init(self):","    if self.straj_training:","      # T x s_len","      self.s_ph = tf.placeholder(shape=(None, self.s_len), dtype=tf.float32)","      # with tf.name_scope('hidden1'):","      #   w = tf.Variable(","      #         tf.truncated_normal([self.s_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.s_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([self.nn_len] ), name='biases')","      #   hidden1 = tf.nn.relu(tf.matmul(self.s_ph, w) + b)","      # with tf.name_scope('hidden2'):","      #   w = tf.Variable(","      #         tf.truncated_normal([self.nn_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([self.nn_len] ), name='biases')","      #   hidden2 = tf.nn.relu(tf.matmul(hidden1, w) + b)","      # with tf.name_scope('v_layer'):","      #   w = tf.Variable(","      #       tf.truncated_normal([self.nn_len, 1], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #       name='weights')","      #   b = tf.Variable(tf.zeros([1] ), name='biases')","      #   self.v = tf.matmul(hidden2, w) + b","      self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","      ","      self.sampled_v = tf.placeholder(shape=(None, 1), dtype=tf.float32)","      # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","      self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v)","    else:","      # N x T x s_len","      self.s_ph = tf.placeholder(shape=(None, None, self.s_len), dtype=tf.float32)","      self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","      ","      self.sampled_v = tf.placeholder(shape=(None, None, 1), dtype=tf.float32)","      # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","      self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v)","    # self.optimizer = tf.train.GradientDescentOptimizer(0.01)","    self.optimizer = tf.train.AdamOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_single_traj(self, t_s_l, t_r_l):","    # r_l keeps one step reward r's not v's","    # print(\"t_s_l.shape= {}\".format(t_s_l.shape) )","    # print(\"t_r_l.shape= {}\".format(t_r_l.shape) )","    v_p1_l = self.sess.run(self.v,","                           feed_dict={self.s_ph: t_s_l[1:] } )","    # print(\"v_p1_l= {}\".format(v_p1_l) )","    # print(\"t_r_l= {}\".format(t_r_l) )","    v_l = np.add(t_r_l[:-1], np.multiply(self.gamma, v_p1_l) )","    # v_l = t_r_l[:-1]","    ","    # print(\"v_l= {}\".format(v_l) )","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: t_s_l[:-1],","                                       self.sampled_v: v_l} )","    # print(\"ValueEster:: loss= {}\".format(loss) )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_v_l):","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.sampled_v: n_t_v_l} )","    print(\"ValueEster:: loss= {}\".format(loss) )","  ","  def get_v(self, n_t_s_l):","    if self.straj_training:","      return self.sess.run(self.v,","                           feed_dict={self.s_ph: n_t_s_l} )","    else:","      return self.sess.run(self.v,","                           feed_dict={self.s_ph: n_t_s_l} )","","class PolicyGradScher(object):","  def __init__(self, s_len, a_len, nn_len=10, straj_training=False, save_name='log/policy_grad'):","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    self.straj_training = straj_training","    self.save_name = save_name","    ","    # self.v_ester = ValueEster(s_len, nn_len, straj_training)","    self.gamma = 0.999","    self.init()","    ","    self.saver = tf.train.Saver(max_to_keep=1)","  ","  def __repr__(self):","    return \"PolicyGradScher[s_len= {}, a_len= {}, nn_len= {}, gamma= {}]\".format(self.s_len, self.a_len, self.nn_len, self.gamma)","  ","  def save(self, step):","    save_path = self.saver.save(self.sess, self.save_name, global_step=step)","    # print(\"saved scher to save_path= {}\".format(save_path) )","  ","  def restore(self, step):","    self.saver.restore(self.sess, '{}-{}'.format(self.save_name, step) )","    # print(\"restored scher to step= {}\".format(step) )","  ","  def init(self):","    if self.straj_training:","      self.s_ph = tf.placeholder(tf.float32, shape=(None, self.s_len), name=\"s_ph\")","      # with tf.name_scope('hidden1'):","      #   w = tf.Variable(","      #         tf.truncated_normal([1, self.s_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.s_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([1, self.nn_len] ), name='biases')","      #   hidden1 = tf.nn.relu(tf.matmul(self.s_ph, w) + b)","      # with tf.name_scope('hidden2'):","      #   w = tf.Variable(","      #         tf.truncated_normal([1, self.nn_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([1, self.nn_len] ), name='biases')","      #   hidden2 = tf.nn.relu(tf.matmul(hidden1, w) + b)","      # with tf.name_scope('a_probs'):","      #   w = tf.Variable(","      #       tf.truncated_normal([1, self.nn_len, self.a_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #       name='weights')","      #   b = tf.Variable(tf.zeros([1, self.a_len] ), name='biases')","      #   self.a_probs = tf.nn.softmax(tf.matmul(hidden2, w) + b)","      hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, 1), name=\"a_ph\")","      self.q_ph = tf.placeholder(tf.float32, shape=(None, 1), name=\"q_ph\")","      self.v_ph = tf.placeholder(tf.float32, shape=(None, 1), name=\"v_ph\")","      ","      sh = tf.shape(self.a_probs)","      indices = tf.range(0, sh[0] )*sh[1] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.gather(tf.reshape(self.a_probs, [-1]), indices)","      self.loss = -tf.reduce_mean(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph) )","    else:","      # N x T x s_len","      # self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","      # hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      # hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","      # self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax)","      ","      # self.a_ph = tf.placeholder(tf.int32, shape=(None, None), name=\"a_ph\")","      # self.q_ph = tf.placeholder(tf.float32, shape=(None, None), name=\"q_ph\")","      # self.v_ph = tf.placeholder(tf.float32, shape=(None, None), name=\"v_ph\")","      ","      self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","      # self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      # self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      # self.a_probs = tf.contrib.layers.fully_connected(self.hidden2, self.a_len, activation_fn=tf.nn.softmax)","      self.hidden = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.a_probs = tf.contrib.layers.fully_connected(self.hidden, self.a_len, activation_fn=tf.nn.softmax)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","      self.q_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","      self.v_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"v_ph\")","      ","      sh = tf.shape(self.a_probs)","      N, T = sh[0], sh[1]","      indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.a_probs, [-1] ), indices), (N, T, 1) )","      self.loss = -tf.reduce_mean(tf.reduce_sum(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph), axis=1), axis=0)","    ","    self.optimizer = tf.train.AdamOptimizer(0.1) # tf.train.GradientDescentOptimizer(0.01)","    # self.optimizer = tf.train.MomentumOptimizer(learning_rate=0.0001, momentum=0.1, use_nesterov=True)","    # self.optimizer = tf.train.RMSPropOptimizer(learning_rate=0.01, decay=0.9)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_single_traj(self, t_s_l, t_a_l, t_r_l):","    # t_s_l: T x s_len, t_a_l, t_r_l: T x 1","    self.v_ester.train_w_single_traj(t_s_l, t_r_l)","    t_v_l = self.v_ester.get_v(t_s_l)","    t_vp1_l = t_v_l[1:]","    t_q_l = np.add(t_r_l[:-1], np.multiply(self.gamma, t_vp1_l) )","    # print(\"t_vp1_l= {}\".format(t_vp1_l) )","    # print(\"t_v_l= {}\".format(t_v_l) )","    loss, _, sh = self.sess.run([self.loss, self.train_op, tf.shape(self.a_probs) ],","                            feed_dict={self.s_ph: t_s_l[:-1],","                                       self.a_ph: t_a_l[:-1],","                                       self.q_ph: t_q_l,","                                       self.v_ph: t_v_l[:-1] } )","    # print(\"sh= {}\".format(sh) )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    # All trajectories use the same policy","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    # print(\"n_t_s_l.shape= {}\".format(n_t_s_l.shape) )","    # print(\"n_t_a_l.shape= {}\".format(n_t_a_l.shape) )","    # '''","    # Policy gradient","    # print(\"avg r= {}\".format(np.mean(n_t_r_l) ) )","    n_t_q_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    # print(\"n_t_q_l= {}\".format(n_t_q_l) )","    # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","    print(\"PolicyGradScher:: avg q= {}\".format(np.mean(n_t_q_l) ) )","    ","    # t_avgr_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","    m = np.mean(n_t_q_l)","    t_avgr_l = np.array([m for t in range(T) ] ).reshape((T, 1))","    n_t_v_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_v_l[n] = t_avgr_l","    # print(\"n_t_v_l= {}\".format(n_t_v_l) )","    # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                      self.a_ph: n_t_a_l,","                                      self.q_ph: n_t_q_l,","                                      self.v_ph: n_t_v_l} )","    # print(\"PolicyGradScher:: loss= {}\".format(loss) )","    # '''","    '''","    # Policy gradient by getting baseline values from actor-critic","    n_t_q_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    # for n in range(N):","    #   self.v_ester.train_w_single_traj(n_t_s_l[n], n_t_r_l[n] )","    # t_avgr_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","    # n_t_v_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   n_t_v_l[n] = t_avgr_l","    self.v_ester.train_w_mult_trajs(n_t_s_l, n_t_q_l)","    n_t_v_l = self.v_ester.get_v(n_t_s_l)","    ","    # print(\"n_t_q_l= {}\".format(n_t_q_l) )","    # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","    # print(\"n_t_v_l= {}\".format(n_t_v_l) )","    # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.q_ph: n_t_q_l,","                                       self.v_ph: n_t_v_l} )","    print(\"PolicyGradScher:: loss= {}\".format(loss) )","    '''","  ","  def get_action_dist(self, s):","    a_probs = self.sess.run(self.a_probs,","                            feed_dict={self.s_ph: [[s]] } )","    return np.array(a_probs[0][0] )","  ","  def get_random_action(self, s):","    # print(\"s= {}\".format(s) )","    if self.straj_training:","      a_probs = self.sess.run(self.a_probs,","                              feed_dict={self.s_ph: [s] } )","      a_dist = np.array(a_probs[0] )","    else:","      a_probs = self.sess.run(self.a_probs,","                              feed_dict={self.s_ph: [[s]] } )","      a_dist = np.array(a_probs[0][0] )","    # print(\"a_dist= {}\".format(a_dist) )","    a = np.random.choice(a_dist, 1, p=a_dist)","    a = np.argmax(a_dist == a)","    # print(\"a= {}\".format(a) )","    return a","  ","  def get_max_action(self, s):","    if self.straj_training:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [s] } )","      a_dist = a_probs[0]","    else:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","      a_dist = a_probs[0][0]","    # print(\"a_dist= {}\".format(a_dist) )","    return np.argmax(a_dist)  ","","class QLearningScher(object):","  def __init__(self, s_len, a_len, nn_len=10):","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    ","    self.gamma = 0.99","    self.eps = 0.1","    self.init()","    ","  def __repr__(self):","    return \"QLearningScher[s_len= {}, a_len= {}]\".format(self.s_len, self.a_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","    self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=None)","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","    self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","    ","    sh = tf.shape(self.Qa_ph)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (sh[0], sh[1], 1) )","    self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","    ","    self.optimizer = tf.train.AdamOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    # n_t_q_l = self.sess.run(self.Qa_ph,","    #                         feed_dict={self.s_ph: n_t_s_l} )","    # n_t_targetq_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   for t in range(T):","    #     if t < T-1:","    #       n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","    #     else:","    #       n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0]","    ","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_targetq_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearningScher:: loss= {}\".format(loss) )","    # self.eps *= 0.95","  ","  def get_random_action(self, s):","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      qa_l = self.sess.run(self.Qa_ph,","                           feed_dict={self.s_ph: [[s]] } )","      return np.argmax(qa_l)","  ","  def get_max_action(self, s):","    qa_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return np.argmax(qa_l)","  ","def test():","  s_len, a_len, nn_len = 3, 3, 10","  straj_training = False","  scher = PolicyGradScher(s_len, a_len, nn_len, straj_training)","  # scher = QLearningScher(s_len, a_len, nn_len)","  ","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s, a):","    # s_min = min(s)","    # r = 10 if s[a] == s_min else 0","    # return min(100, 1/(0.001 + s[a] - min(s) ) )","    # return 100*math.exp(-(s[a] - min(s) ) )","    return 1/(0.1 + s[a] - min(s) )","  ","  def evaluate():","    num_shortest_found = 0","    for e in range(100):","      s = state()","      a = scher.get_max_action(s)","      if s[a] - min(s) < 0.01:","        num_shortest_found += 1","    print(\"freq shortest found= {}\".format(num_shortest_found/100) )","  ","  def train_w_single_traj():","    T = 10","    def gen_traj():","      t_s_l, t_a_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1)), np.zeros((T, 1))","      for t in range(T):","        s = state()","        a = scher.get_random_action(s)","        # a = scher.get_max_action(s)","        # t_s_l.append(s)","        # t_a_l.append(a)","        # t_r_l.append(reward(s, a) )","        t_s_l[t, :] = s","        t_a_l[t, :] = a","        t_r_l[t, :] = reward(s, a)","      return t_s_l, t_a_l, t_r_l","    ","    value_ester = ValueEster(s_len, nn_len=10, straj_training=False)","    for i in range(100*40):","      t_s_l, t_a_l, t_r_l = gen_traj()","      scher.train_w_single_traj(t_s_l, t_a_l, t_r_l)","      # value_ester.train_w_single_traj(t_s_l, t_r_l)","      if i % 10 == 0:","        evaluate()","  ","  def train_w_mult_trajs():","    N, T = 10, 100","    def gen_N_traj():","      n_t_s_l, n_t_a_l, n_t_r_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          s = state()","          a = scher.get_random_action(s)","          n_t_s_l[n, t, :] = s","          n_t_a_l[n, t, :] = a","          n_t_r_l[n, t, :] = reward(s, a)","      return n_t_s_l, n_t_a_l, n_t_r_l","      ","    for i in range(100*20):","      n_t_s_l, n_t_a_l, n_t_r_l = gen_N_traj()","      scher.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        evaluate()","  if straj_training:","    train_w_single_traj()","  else:","    train_w_mult_trajs()","","def vsimple_regress():","  s_len = 3","  T = 100","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s):","    return 10*max(s)","  ","  def gen_traj():","    t_s_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1))","    for t in range(T):","      s = state()","      t_s_l[t, :] = s","      t_r_l[t, :] = reward(s)","    return t_s_l, t_r_l","  ","  value_ester = ValueEster(s_len, nn_len=10, straj_training=False)","  for i in range(100*40):","    t_s_l, t_r_l = gen_traj()","    value_ester.train_w_single_traj(t_s_l, t_r_l)","","if __name__ == \"__main__\":","  test()","  # vsimple_regress()","  "]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":25}},"text":"import math, time, random"},{"action":"insertText","range":{"start":{"row":0,"column":25},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":499,"column":0}},"lines":["import numpy as np","import tensorflow as tf","","def rewards_to_qvals(t_r_l, gamma):","  T = t_r_l.shape[0]","  # reward = average of all following rewards","  # for t in range(T):","  #   t_r_l[t, 0] = np.mean(t_r_l[t:, 0])","  ","  # for t in range(T):","  #   cumw, cumr = 0, 0","  #   for i, r in enumerate(t_r_l[t:, 0] ):","  #     cumw += gamma**i","  #     cumr += gamma**i * r","  #   t_r_l[t, 0] = cumr/cumw","  # return t_r_l","  ","  # gamma = 1","  t_dr_l = np.zeros((T, 1))","  cumw, cumr = 0, 0","  for t in range(T-1, -1, -1):","    cumr = t_r_l[t, 0] + gamma*cumr","    # cumw = 1 + gamma*cumw","    # t_dr_l[t, 0] = cumr/cumw","    t_dr_l[t, 0] = cumr","  return t_dr_l","  ","  # reward = discounted sum of all following rewards","  # t_dr_l = np.zeros((T, 1))","  # radd = 0","  # for t in range(T-1, -1, -1):","  #   radd = t_r_l[t, 0] + radd * gamma","  #   t_dr_l[t, 0] = radd","  # return t_dr_l","","class ValueEster(object):","  def __init__(self, s_len, nn_len, straj_training):","    self.s_len = s_len","    self.nn_len = nn_len","    self.straj_training = straj_training","    ","    self.gamma = 0.99","    self.init()","  ","  def __repr__(self):","    return \"ValueEster[s_len= {}]\".format(self.s_len)","  ","  def init(self):","    if self.straj_training:","      # T x s_len","      self.s_ph = tf.placeholder(shape=(None, self.s_len), dtype=tf.float32)","      # with tf.name_scope('hidden1'):","      #   w = tf.Variable(","      #         tf.truncated_normal([self.s_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.s_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([self.nn_len] ), name='biases')","      #   hidden1 = tf.nn.relu(tf.matmul(self.s_ph, w) + b)","      # with tf.name_scope('hidden2'):","      #   w = tf.Variable(","      #         tf.truncated_normal([self.nn_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([self.nn_len] ), name='biases')","      #   hidden2 = tf.nn.relu(tf.matmul(hidden1, w) + b)","      # with tf.name_scope('v_layer'):","      #   w = tf.Variable(","      #       tf.truncated_normal([self.nn_len, 1], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #       name='weights')","      #   b = tf.Variable(tf.zeros([1] ), name='biases')","      #   self.v = tf.matmul(hidden2, w) + b","      self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","      ","      self.sampled_v = tf.placeholder(shape=(None, 1), dtype=tf.float32)","      # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","      self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v)","    else:","      # N x T x s_len","      self.s_ph = tf.placeholder(shape=(None, None, self.s_len), dtype=tf.float32)","      self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","      ","      self.sampled_v = tf.placeholder(shape=(None, None, 1), dtype=tf.float32)","      # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","      self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v)","    # self.optimizer = tf.train.GradientDescentOptimizer(0.01)","    self.optimizer = tf.train.AdamOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_single_traj(self, t_s_l, t_r_l):","    # r_l keeps one step reward r's not v's","    # print(\"t_s_l.shape= {}\".format(t_s_l.shape) )","    # print(\"t_r_l.shape= {}\".format(t_r_l.shape) )","    v_p1_l = self.sess.run(self.v,","                           feed_dict={self.s_ph: t_s_l[1:] } )","    # print(\"v_p1_l= {}\".format(v_p1_l) )","    # print(\"t_r_l= {}\".format(t_r_l) )","    v_l = np.add(t_r_l[:-1], np.multiply(self.gamma, v_p1_l) )","    # v_l = t_r_l[:-1]","    ","    # print(\"v_l= {}\".format(v_l) )","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: t_s_l[:-1],","                                       self.sampled_v: v_l} )","    # print(\"ValueEster:: loss= {}\".format(loss) )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_v_l):","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.sampled_v: n_t_v_l} )","    print(\"ValueEster:: loss= {}\".format(loss) )","  ","  def get_v(self, n_t_s_l):","    if self.straj_training:","      return self.sess.run(self.v,","                           feed_dict={self.s_ph: n_t_s_l} )","    else:","      return self.sess.run(self.v,","                           feed_dict={self.s_ph: n_t_s_l} )","","class PolicyGradScher(object):","  def __init__(self, s_len, a_len, nn_len=10, straj_training=False, save_name='log/policy_grad'):","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    self.straj_training = straj_training","    self.save_name = save_name","    ","    # self.v_ester = ValueEster(s_len, nn_len, straj_training)","    self.gamma = 0.999","    self.init()","    ","    self.saver = tf.train.Saver(max_to_keep=1)","  ","  def __repr__(self):","    return \"PolicyGradScher[s_len= {}, a_len= {}, nn_len= {}, gamma= {}]\".format(self.s_len, self.a_len, self.nn_len, self.gamma)","  ","  def save(self, step):","    save_path = self.saver.save(self.sess, self.save_name, global_step=step)","    # print(\"saved scher to save_path= {}\".format(save_path) )","  ","  def restore(self, step):","    self.saver.restore(self.sess, '{}-{}'.format(self.save_name, step) )","    # print(\"restored scher to step= {}\".format(step) )","  ","  def init(self):","    if self.straj_training:","      self.s_ph = tf.placeholder(tf.float32, shape=(None, self.s_len), name=\"s_ph\")","      # with tf.name_scope('hidden1'):","      #   w = tf.Variable(","      #         tf.truncated_normal([1, self.s_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.s_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([1, self.nn_len] ), name='biases')","      #   hidden1 = tf.nn.relu(tf.matmul(self.s_ph, w) + b)","      # with tf.name_scope('hidden2'):","      #   w = tf.Variable(","      #         tf.truncated_normal([1, self.nn_len, self.nn_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #         name='weights')","      #   b = tf.Variable(tf.zeros([1, self.nn_len] ), name='biases')","      #   hidden2 = tf.nn.relu(tf.matmul(hidden1, w) + b)","      # with tf.name_scope('a_probs'):","      #   w = tf.Variable(","      #       tf.truncated_normal([1, self.nn_len, self.a_len], stddev=1.0 / math.sqrt(float(self.nn_len) ) ),","      #       name='weights')","      #   b = tf.Variable(tf.zeros([1, self.a_len] ), name='biases')","      #   self.a_probs = tf.nn.softmax(tf.matmul(hidden2, w) + b)","      hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","      self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, 1), name=\"a_ph\")","      self.q_ph = tf.placeholder(tf.float32, shape=(None, 1), name=\"q_ph\")","      self.v_ph = tf.placeholder(tf.float32, shape=(None, 1), name=\"v_ph\")","      ","      sh = tf.shape(self.a_probs)","      indices = tf.range(0, sh[0] )*sh[1] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.gather(tf.reshape(self.a_probs, [-1]), indices)","      self.loss = -tf.reduce_mean(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph) )","    else:","      # N x T x s_len","      # self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","      # hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      # hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","      # self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax)","      ","      # self.a_ph = tf.placeholder(tf.int32, shape=(None, None), name=\"a_ph\")","      # self.q_ph = tf.placeholder(tf.float32, shape=(None, None), name=\"q_ph\")","      # self.v_ph = tf.placeholder(tf.float32, shape=(None, None), name=\"v_ph\")","      ","      self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","      # self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      # self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","      # self.a_probs = tf.contrib.layers.fully_connected(self.hidden2, self.a_len, activation_fn=tf.nn.softmax)","      self.hidden = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","      self.a_probs = tf.contrib.layers.fully_connected(self.hidden, self.a_len, activation_fn=tf.nn.softmax)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","      self.q_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","      self.v_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"v_ph\")","      ","      sh = tf.shape(self.a_probs)","      N, T = sh[0], sh[1]","      indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.a_probs, [-1] ), indices), (N, T, 1) )","      self.loss = -tf.reduce_mean(tf.reduce_sum(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph), axis=1), axis=0)","    ","    self.optimizer = tf.train.AdamOptimizer(0.01) # tf.train.GradientDescentOptimizer(0.01)","    # self.optimizer = tf.train.MomentumOptimizer(learning_rate=0.0001, momentum=0.1, use_nesterov=True)","    # self.optimizer = tf.train.RMSPropOptimizer(learning_rate=0.01, decay=0.9)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_single_traj(self, t_s_l, t_a_l, t_r_l):","    # t_s_l: T x s_len, t_a_l, t_r_l: T x 1","    self.v_ester.train_w_single_traj(t_s_l, t_r_l)","    t_v_l = self.v_ester.get_v(t_s_l)","    t_vp1_l = t_v_l[1:]","    t_q_l = np.add(t_r_l[:-1], np.multiply(self.gamma, t_vp1_l) )","    # print(\"t_vp1_l= {}\".format(t_vp1_l) )","    # print(\"t_v_l= {}\".format(t_v_l) )","    loss, _, sh = self.sess.run([self.loss, self.train_op, tf.shape(self.a_probs) ],","                            feed_dict={self.s_ph: t_s_l[:-1],","                                       self.a_ph: t_a_l[:-1],","                                       self.q_ph: t_q_l,","                                       self.v_ph: t_v_l[:-1] } )","    # print(\"sh= {}\".format(sh) )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    # All trajectories use the same policy","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    # print(\"n_t_s_l.shape= {}\".format(n_t_s_l.shape) )","    # print(\"n_t_a_l.shape= {}\".format(n_t_a_l.shape) )","    # '''","    # Policy gradient","    # print(\"avg r= {}\".format(np.mean(n_t_r_l) ) )","    n_t_q_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    # print(\"n_t_q_l= {}\".format(n_t_q_l) )","    # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","    print(\"PolicyGradScher:: avg q= {}\".format(np.mean(n_t_q_l) ) )","    ","    # t_avgr_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","    m = np.mean(n_t_q_l)","    t_avgr_l = np.array([m for t in range(T) ] ).reshape((T, 1))","    n_t_v_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_v_l[n] = t_avgr_l","    # print(\"n_t_v_l= {}\".format(n_t_v_l) )","    # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                      self.a_ph: n_t_a_l,","                                      self.q_ph: n_t_q_l,","                                      self.v_ph: n_t_v_l} )","    # print(\"PolicyGradScher:: loss= {}\".format(loss) )","    # '''","    '''","    # Policy gradient by getting baseline values from actor-critic","    n_t_q_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    # for n in range(N):","    #   self.v_ester.train_w_single_traj(n_t_s_l[n], n_t_r_l[n] )","    # t_avgr_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","    # n_t_v_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   n_t_v_l[n] = t_avgr_l","    self.v_ester.train_w_mult_trajs(n_t_s_l, n_t_q_l)","    n_t_v_l = self.v_ester.get_v(n_t_s_l)","    ","    # print(\"n_t_q_l= {}\".format(n_t_q_l) )","    # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","    # print(\"n_t_v_l= {}\".format(n_t_v_l) )","    # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.q_ph: n_t_q_l,","                                       self.v_ph: n_t_v_l} )","    print(\"PolicyGradScher:: loss= {}\".format(loss) )","    '''","  ","  def get_action_dist(self, s):","    a_probs = self.sess.run(self.a_probs,","                            feed_dict={self.s_ph: [[s]] } )","    return np.array(a_probs[0][0] )","  ","  def get_random_action(self, s):","    # print(\"s= {}\".format(s) )","    if self.straj_training:","      a_probs = self.sess.run(self.a_probs,","                              feed_dict={self.s_ph: [s] } )","      a_dist = np.array(a_probs[0] )","    else:","      a_probs = self.sess.run(self.a_probs,","                              feed_dict={self.s_ph: [[s]] } )","      a_dist = np.array(a_probs[0][0] )","    # print(\"a_dist= {}\".format(a_dist) )","    a = np.random.choice(a_dist, 1, p=a_dist)","    a = np.argmax(a_dist == a)","    # print(\"a= {}\".format(a) )","    return a","  ","  def get_max_action(self, s):","    if self.straj_training:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [s] } )","      a_dist = a_probs[0]","    else:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","      a_dist = a_probs[0][0]","    # print(\"a_dist= {}\".format(a_dist) )","    return np.argmax(a_dist)  ","","class QLearningScher(object):","  def __init__(self, s_len, a_len, nn_len=10):","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    ","    self.gamma = 0.99","    self.eps = 0.1","    self.init()","    ","  def __repr__(self):","    return \"QLearningScher[s_len= {}, a_len= {}]\".format(self.s_len, self.a_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","    self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=None)","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","    self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","    ","    sh = tf.shape(self.Qa_ph)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (sh[0], sh[1], 1) )","    self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","    ","    self.optimizer = tf.train.AdamOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    # n_t_q_l = self.sess.run(self.Qa_ph,","    #                         feed_dict={self.s_ph: n_t_s_l} )","    # n_t_targetq_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   for t in range(T):","    #     if t < T-1:","    #       n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","    #     else:","    #       n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0]","    ","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      n_t_targetq_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearningScher:: loss= {}\".format(loss) )","    # self.eps *= 0.95","  ","  def get_random_action(self, s):","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      qa_l = self.sess.run(self.Qa_ph,","                           feed_dict={self.s_ph: [[s]] } )","      return np.argmax(qa_l)","  ","  def get_max_action(self, s):","    qa_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return np.argmax(qa_l)","  ","def test():","  s_len, a_len, nn_len = 3, 3, 10","  straj_training = False","  scher = PolicyGradScher(s_len, a_len, nn_len, straj_training)","  # scher = QLearningScher(s_len, a_len, nn_len)","  ","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s, a):","    # s_min = min(s)","    # r = 10 if s[a] == s_min else 0","    # return min(100, 1/(0.001 + s[a] - min(s) ) )","    # return 100*math.exp(-(s[a] - min(s) ) )","    return 1/(0.1 + s[a] - min(s) )","  ","  def evaluate():","    num_shortest_found = 0","    for e in range(100):","      s = state()","      a = scher.get_max_action(s)","      if s[a] - min(s) < 0.01:","        num_shortest_found += 1","    print(\"freq shortest found= {}\".format(num_shortest_found/100) )","  ","  def train_w_single_traj():","    T = 10","    def gen_traj():","      t_s_l, t_a_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1)), np.zeros((T, 1))","      for t in range(T):","        s = state()","        a = scher.get_random_action(s)","        # a = scher.get_max_action(s)","        # t_s_l.append(s)","        # t_a_l.append(a)","        # t_r_l.append(reward(s, a) )","        t_s_l[t, :] = s","        t_a_l[t, :] = a","        t_r_l[t, :] = reward(s, a)","      return t_s_l, t_a_l, t_r_l","    ","    value_ester = ValueEster(s_len, nn_len=10, straj_training=False)","    for i in range(100*40):","      t_s_l, t_a_l, t_r_l = gen_traj()","      scher.train_w_single_traj(t_s_l, t_a_l, t_r_l)","      # value_ester.train_w_single_traj(t_s_l, t_r_l)","      if i % 10 == 0:","        evaluate()","  ","  def train_w_mult_trajs():","    N, T = 10, 100","    def gen_N_traj():","      n_t_s_l, n_t_a_l, n_t_r_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          s = state()","          a = scher.get_random_action(s)","          n_t_s_l[n, t, :] = s","          n_t_a_l[n, t, :] = a","          n_t_r_l[n, t, :] = reward(s, a)","      return n_t_s_l, n_t_a_l, n_t_r_l","      ","    for i in range(100*20):","      n_t_s_l, n_t_a_l, n_t_r_l = gen_N_traj()","      scher.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        evaluate()","  if straj_training:","    train_w_single_traj()","  else:","    train_w_mult_trajs()","","def vsimple_regress():","  s_len = 3","  T = 100","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s):","    return 10*max(s)","  ","  def gen_traj():","    t_s_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1))","    for t in range(T):","      s = state()","      t_s_l[t, :] = s","      t_r_l[t, :] = reward(s)","    return t_s_l, t_r_l","  ","  value_ester = ValueEster(s_len, nn_len=10, straj_training=False)","  for i in range(100*40):","    t_s_l, t_r_l = gen_traj()","    value_ester.train_w_single_traj(t_s_l, t_r_l)","","if __name__ == \"__main__\":","  test()","  # vsimple_regress()","  "]}]}]],"redo":[]},"/rvs.py":{"scrollTop":637,"scrollLeft":0,"selection":{"start":{"row":57,"column":11},"end":{"row":57,"column":11}},"lastUse":1522601372015,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":458,"column":2},"end":{"row":458,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":458,"column":12},"end":{"row":458,"column":15}},"text":"Neg"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":460,"column":16},"end":{"row":460,"column":17}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":460,"column":15},"end":{"row":460,"column":16}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":460,"column":14},"end":{"row":460,"column":15}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":451,"column":13},"end":{"row":451,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":451,"column":12},"end":{"row":451,"column":13}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":451,"column":11},"end":{"row":451,"column":12}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":458,"column":18},"end":{"row":458,"column":26}},"text":"num_succ"},{"action":"insertText","range":{"start":{"row":458,"column":18},"end":{"row":458,"column":19}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":458,"column":45},"end":{"row":458,"column":48}},"text":"l_l"},{"action":"insertText","range":{"start":{"row":458,"column":45},"end":{"row":458,"column":46}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":458,"column":55},"end":{"row":459,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":459,"column":0},"end":{"row":459,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":459,"column":0},"end":{"row":459,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":459,"column":2},"end":{"row":459,"column":19}},"text":"def cdf(self, x):"},{"action":"insertText","range":{"start":{"row":459,"column":19},"end":{"row":460,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":460,"column":0},"end":{"row":466,"column":0}},"lines":["    return self.dist.cdf(x - self.l_l)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def gen_sample(self):"]},{"action":"insertText","range":{"start":{"row":466,"column":0},"end":{"row":466,"column":32}},"text":"    return self.dist.rvs(size=1)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":459,"column":2},"end":{"row":460,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":460,"column":0},"end":{"row":460,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":455,"column":14},"end":{"row":456,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":456,"column":0},"end":{"row":456,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":456,"column":4},"end":{"row":457,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":457,"column":0},"end":{"row":457,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":457,"column":4},"end":{"row":457,"column":47}},"text":"self.dist = scipy.stats.nbinom(num_succ, p)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":457,"column":35},"end":{"row":457,"column":43}},"text":"num_succ"},{"action":"insertText","range":{"start":{"row":457,"column":35},"end":{"row":457,"column":36}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":463,"column":26},"end":{"row":463,"column":37}},"text":" - self.l_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":461,"column":2},"end":{"row":462,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":462,"column":0},"end":{"row":462,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":462,"column":2},"end":{"row":463,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":463,"column":0},"end":{"row":463,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":462,"column":2},"end":{"row":462,"column":19}},"text":"def cdf(self, x):"},{"action":"insertText","range":{"start":{"row":462,"column":19},"end":{"row":463,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":463,"column":0},"end":{"row":463,"column":25}},"text":"  return self.dist.cdf(x)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":463,"column":2},"end":{"row":463,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":462,"column":6},"end":{"row":462,"column":7}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":462,"column":6},"end":{"row":462,"column":7}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":463,"column":21},"end":{"row":463,"column":22}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":463,"column":21},"end":{"row":463,"column":22}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":557,"column":18},"end":{"row":557,"column":19}},"text":"l"},{"action":"removeText","range":{"start":{"row":536,"column":11},"end":{"row":536,"column":12}},"text":"l"},{"action":"removeText","range":{"start":{"row":522,"column":41},"end":{"row":522,"column":42}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":557,"column":17},"end":{"row":557,"column":18}},"text":"a"},{"action":"removeText","range":{"start":{"row":536,"column":10},"end":{"row":536,"column":11}},"text":"a"},{"action":"removeText","range":{"start":{"row":522,"column":40},"end":{"row":522,"column":41}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":557,"column":16},"end":{"row":557,"column":17}},"text":"i"},{"action":"removeText","range":{"start":{"row":536,"column":9},"end":{"row":536,"column":10}},"text":"i"},{"action":"removeText","range":{"start":{"row":522,"column":39},"end":{"row":522,"column":40}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":138,"column":2},"end":{"row":139,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":139,"column":0},"end":{"row":139,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":139,"column":2},"end":{"row":140,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":140,"column":0},"end":{"row":140,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":139,"column":2},"end":{"row":139,"column":22}},"text":"def moment(self, i):"},{"action":"insertText","range":{"start":{"row":139,"column":22},"end":{"row":140,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":140,"column":0},"end":{"row":140,"column":28}},"text":"  return moment_ith(i, self)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":140,"column":2},"end":{"row":140,"column":4}},"text":"  "}]}]],"redo":[]},"/mrun.sh":{"scrollTop":288,"scrollLeft":0,"selection":{"start":{"row":33,"column":30},"end":{"row":33,"column":30}},"lastUse":1522538957733,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":10},"end":{"row":30,"column":11}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":10},"end":{"row":30,"column":11}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":10},"end":{"row":30,"column":11}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":10},"end":{"row":30,"column":11}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":16},"end":{"row":38,"column":17}},"text":"3"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":15},"end":{"row":38,"column":16}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":15},"end":{"row":38,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":16},"end":{"row":38,"column":17}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":15},"end":{"row":38,"column":16}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":15},"end":{"row":38,"column":16}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":9},"end":{"row":30,"column":10}},"text":"3"}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":22,"column":23},"end":{"row":22,"column":23}},"lastUse":1522354223445,"undo":[],"redo":[]}},"window":{"width":1366,"height":687,"top":0,"left":0,"isMaximized":true}}