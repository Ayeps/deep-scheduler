{"split":"2-0","session.current":["/rlearning.py","zed::start"],"session.open":{"/policygrad_learning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":5,"column":22},"end":{"row":5,"column":22}},"lastUse":1541607797682,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":100}},"text":"# #######################################  Value Estimator  ###################################### #"},{"action":"insertText","range":{"start":{"row":3,"column":100},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":43,"column":0}},"lines":["class VEster(object): # Value Estimator","  def __init__(self, s_len, nn_len):","    self.s_len = s_len","    self.nn_len = nn_len","    ","    self.init()","  ","  def __repr__(self):","    return \"VEster[s_len= {}]\".format(self.s_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(shape=(None, None, self.s_len), dtype=tf.float32)","    # self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    # self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","    # self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","    self.hidden = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.v = tf.contrib.layers.fully_connected(self.hidden, 1, activation_fn=None, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.sampled_v = tf.placeholder(shape=(None, None, 1), dtype=tf.float32)","    # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","    self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v) + \\","      tf.losses.get_regularization_loss()","    ","    # self.optimizer = tf.train.GradientDescentOptimizer(0.01)","    self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_v_l):","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.sampled_v: n_t_v_l} )","    print(\"VEster:: loss= {}\".format(loss) )","  ","  def get_v(self, n_t_s_l):","    return self.sess.run(self.v,"]},{"action":"insertText","range":{"start":{"row":43,"column":0},"end":{"row":43,"column":57}},"text":"                         feed_dict={self.s_ph: n_t_s_l} )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":0,"column":16}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":16},"end":{"row":0,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":0,"column":18}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":0,"column":19}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":19},"end":{"row":0,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":20},"end":{"row":0,"column":21}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":0,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":100}},"text":"# ####################################  Policy Gradient Learner  ################################# #"},{"action":"insertText","range":{"start":{"row":2,"column":100},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":116,"column":0}},"lines":["class PolicyGradLearner(Learner):","  def __init__(self, s_len, a_len, nn_len=10, w_actorcritic=False):","    super().__init__(s_len, a_len, nn_len)","    self.w_actorcritic = w_actorcritic","    ","    self.v_ester = VEster(s_len, nn_len)","    self.init()","    self.saver = tf.train.Saver(max_to_keep=5)","    ","    self.eps = 0.1","  ","  def __repr__(self):","    return 'PolicyGradLearner(s_len= {}, a_len= {}, nn_len= {}, gamma= {}, w_actorcritic= {})'.format(self.s_len, self.a_len, self.nn_len, self.gamma, self.w_actorcritic)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    # self.a_probs = tf.contrib.layers.fully_connected(hidden1, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name='a_ph')","    self.q_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='q_ph')","    self.v_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='v_ph')","    ","    sh = tf.shape(self.a_probs)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.a_probs, [-1] ), indices), (N, T, 1) )","    self.loss = \\","      -tf.reduce_mean(tf.reduce_sum(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph), axis=1), axis=0) + \\","      tf.losses.get_regularization_loss()","    ","    self.optimizer = tf.train.AdamOptimizer(0.01) # tf.train.GradientDescentOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    # All trajectories use the same policy","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    # print(\"n_t_s_l.shape= {}\".format(n_t_s_l.shape) )","    # print(\"avg r= {}\".format(np.mean(n_t_r_l) ) )","    ","    if not self.w_actorcritic:","      n_t_q_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","      # print(\"n_t_q_l= {}\".format(n_t_q_l) )","      # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","      print(\"PolicyGradLearner:: avg q= {}\".format(np.mean(n_t_q_l) ) )","      ","      t_avgq_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","      # m = np.mean(n_t_q_l)","      # t_avgq_l = np.array([m for t in range(T) ] ).reshape((T, 1))","      n_t_v_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_v_l[n] = t_avgq_l","      # print(\"n_t_v_l= {}\".format(n_t_v_l) )","      # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","      ","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    else:","      # Policy gradient by getting baseline values from actor-critic","      n_t_v_l = np.zeros((N, T, 1))","      n_t_vest_l = self.v_ester.get_v(n_t_s_l)","      for t in range(T-1):","        n_t_v_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_vest_l[:, t+1]","      n_t_v_l[:, T-1] = n_t_r_l[:, T-1]","      self.v_ester.train_w_mult_trajs(n_t_s_l, n_t_v_l)","      ","      n_t_v_l = self.v_ester.get_v(n_t_s_l)","      n_t_q_l = np.zeros((N, T, 1))","      # for n in range(N):","      #   for t in range(T-1):","      #     n_t_q_l[n, t] = n_t_r_l[n, t] + self.gamma*n_t_v_l[n, t+1]","      #   n_t_q_l[n, T-1] = n_t_r_l[n, t]","      for t in range(T-1):","        n_t_q_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_v_l[:, t+1]","      n_t_q_l[:, T-1] = n_t_r_l[:, T-1]","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    log(INFO, \"PolicyGradLearner;\", loss=loss)","  ","  def get_action_dist(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    return np.array(a_probs[0][0] )","  ","  def get_random_action(self, s):","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","      a_dist = np.array(a_probs[0][0] )","      # log(WARNING, \"\", s=s, a_dist=a_dist)","      a = np.random.choice(a_dist, 1, p=a_dist)","      a = np.argmax(a_dist == a)","      return a","  ","  def get_max_action(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    a_dist = a_probs[0][0]","    # print(\"a_dist= {}\".format(a_dist) )"]},{"action":"insertText","range":{"start":{"row":116,"column":0},"end":{"row":116,"column":30}},"text":"    return np.argmax(a_dist)  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":35}},"text":"def rewards_to_qvals(t_r_l, gamma):"},{"action":"insertText","range":{"start":{"row":2,"column":35},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":23,"column":0}},"lines":["T = t_r_l.shape[0]","# reward = average of all following rewards","# for t in range(T):","#   t_r_l[t, 0] = np.mean(t_r_l[t:, 0])","","# for t in range(T):","#   cumw, cumr = 0, 0","#   for i, r in enumerate(t_r_l[t:, 0] ):","#     cumw += gamma**i","#     cumr += gamma**i * r","#   t_r_l[t, 0] = cumr/cumw","# return t_r_l","","t_dr_l = np.zeros((T, 1))","cumw, cumr = 0, 0","for t in range(T-1, -1, -1):","  cumr = t_r_l[t, 0] + gamma*cumr","  # cumw = 1 + gamma*cumw","  # t_dr_l[t, 0] = cumr/cumw","  t_dr_l[t, 0] = cumr"]},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":13}},"text":"return t_dr_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":13,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":2}},"text":"  "}]}]],"redo":[]},"/test_learning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":5,"column":11},"end":{"row":5,"column":11}},"lastUse":1541607753854,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":100}},"text":"# #############################################  Test  ########################################### #"},{"action":"insertText","range":{"start":{"row":0,"column":100},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":102,"column":0}},"lines":["def test():","  s_len, a_len, nn_len = 3, 3, 10","  scher = PolicyGradLearner(s_len, a_len, nn_len)","  # scher = QLearner(s_len, a_len, nn_len)","  ","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s, a):","    # s_min = min(s)","    # r = 10 if s[a] == s_min else 0","    # return min(100, 1/(0.001 + s[a] - min(s) ) )","    # return 100*math.exp(-(s[a] - min(s) ) )","    return 1/(0.1 + s[a] - min(s) )","  ","  def evaluate():","    num_shortest_found = 0","    for e in range(100):","      s = state()","      a = scher.get_max_action(s)","      if s[a] - min(s) < 0.01:","        num_shortest_found += 1","    print(\"freq shortest found= {}\".format(num_shortest_found/100) )","  ","  def train_w_mult_trajs():","    N, T = 10, 100","    def gen_N_traj():","      n_t_s_l, n_t_a_l, n_t_r_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          s = state()","          a = scher.get_random_action(s)","          n_t_s_l[n, t, :] = s","          n_t_a_l[n, t, :] = a","          n_t_r_l[n, t, :] = reward(s, a)","      return n_t_s_l, n_t_a_l, n_t_r_l","    ","    for i in range(100*20):","      n_t_s_l, n_t_a_l, n_t_r_l = gen_N_traj()","      scher.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        evaluate()","  train_w_mult_trajs()","","def vsimple_regress():","  s_len = 3","  T = 100","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s):","    return 10*max(s)","  ","  def sample_traj():","    t_s_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1))","    for t in range(T):","      s = state()","      t_s_l[t, :] = s","      t_r_l[t, :] = reward(s)","    return t_s_l, t_r_l","  ","  value_ester = VEster(s_len, nn_len=10, straj_training=False)","  for i in range(100*40):","    t_s_l, t_r_l = sample_traj()","    value_ester.train_w_single_traj(t_s_l, t_r_l)","","class A(object):","  def __init__(self):","    self.a = 'A'","  ","  def __repr__(self):","    return self.a","  ","  def test(self):","    print(\"self.a= {}\".format(self.a) )","  ","class B(A):","  def __init__(self):","    super().__init__()","    ","    self.init()","  ","  def init(self):","    self.a = 'B'","","if __name__ == \"__main__\":","  # test()","  # vsimple_regress()","  ","  # b = B()","  # # print(\"b= {}\".format(b) )","  # b.test()","  ","  # learner = PolicyGradLearner(s_len=1, a_len=1)","  learner = QLearner(s_len=1, a_len=1)","  learner.save(0)","  restore_result = learner.restore(0)"]},{"action":"insertText","range":{"start":{"row":102,"column":0},"end":{"row":102,"column":53}},"text":"  print(\"restore_result= {}\".format(restore_result) )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":53},"end":{"row":103,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":8}},"text":"rle"},{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"y"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":0,"column":16}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":16},"end":{"row":0,"column":17}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":0,"column":18}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":0,"column":19}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":19},"end":{"row":0,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":20},"end":{"row":0,"column":21}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":0,"column":22}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":23},"end":{"row":0,"column":24}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":24},"end":{"row":0,"column":25}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":25},"end":{"row":0,"column":26}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":26},"end":{"row":0,"column":27}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":27},"end":{"row":0,"column":28}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":28},"end":{"row":0,"column":29}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":29},"end":{"row":0,"column":30}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":30},"end":{"row":0,"column":31}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":31},"end":{"row":0,"column":32}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":33},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":33}},"text":"from policygrad_learning import *"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":5},"end":{"row":1,"column":15}},"text":"policygrad"},{"action":"insertText","range":{"start":{"row":1,"column":5},"end":{"row":1,"column":6}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":24},"end":{"row":2,"column":0}},"text":"\n"}]}]],"redo":[]},"/rlearning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":6,"column":13},"end":{"row":6,"column":13}},"lastUse":1541607691308,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"nl":"\n","lines":["    blog()"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":427,"column":67},"end":{"row":427,"column":68}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":427,"column":68},"end":{"row":427,"column":69}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":427,"column":69},"end":{"row":427,"column":113}},"text":"eps=self.eps, num_training=self.num_training"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":427,"column":113},"end":{"row":427,"column":114}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":525,"column":0},"end":{"row":525,"column":16}},"text":"    return a_q_l"},{"action":"removeLines","range":{"start":{"row":214,"column":0},"end":{"row":525,"column":0}},"nl":"\n","lines":["# ###########################################  Q Learning  ####################################### #","class QLearner(Learner):","  def __init__(self, s_len, a_len, nn_len=10):","    super().__init__(s_len, a_len, nn_len)","    self.eps = 0.1","    self.init()","    self.saver = tf.train.Saver(max_to_keep=5)","    ","  def __repr__(self):","    return 'QLearner(s_len= {}, a_len= {})'.format(self.s_len, self.a_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","    self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=None)","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","    self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","    ","    sh = tf.shape(self.Qa_ph)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (N, T, 1) )","    self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","    ","    self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_sarsa_l(self, sarsa_l):","    if len(sarsa_l) == 0:","      log(WARNING, \"sarsa_l is empty, skipping.\")","      return","    s_l, a_l, targetq_l = [], [], []","    for sarsa in sarsa_l:","      s, a, r, snext = sarsa[0], sarsa[1], sarsa[2], sarsa[3]","      s_l.append(s)","      a_l.append([a] )","      ","      q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[snext]] } )[0][0]","      targetq = r + self.gamma*max(q_l)","      targetq_l.append([targetq] )","      # blog(targetq_l=targetq_l)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: [s_l],","                                       self.a_ph: [a_l],","                                       self.targetq_ph: [targetq_l] } )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.Qa_ph,","                            feed_dict={self.s_ph: n_t_s_l} )","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      for t in range(T):","        if t < T-1:","          n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","        else:","          n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","    ","    # n_t_targetq_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   n_t_targetq_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def train_w_mult_trajs_(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.Qa_ph,","                            feed_dict={self.s_ph: n_t_s_l} )","    def target_q_w_mstep(m):","      n_t_targetq_l = np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          if t < T-1:","            cumr = 0","            tu_ = min(T-2, t+m-1)","            for t_ in range(tu_, t-1, -1):","              cumr = n_t_r_l[n, t_, 0] + self.gamma*cumr","            n_t_targetq_l[n, t, 0] = cumr + self.gamma*max(n_t_q_l[n, tu_+1, :] )","            # n_t_targetq_l[n, t, 0] = cumr + self.gamma*n_t_q_l[n, tu_+1, n_t_a_l[n, tu_+1, 0] ] # SARSA","          else:","            n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","            # n_t_targetq_l[n, t, 0] = n_t_q_l[n, t, n_t_a_l[n, t, 0] ] # SARSA","      return n_t_targetq_l","    ","    lambda_, L = 0.5, 10","    n_t_targetq_l = np.zeros((N, T, 1))","    for m in range(1, L):","      n_t_targetq_l += lambda_**(m-1) * target_q_w_mstep(m)","    n_t_targetq_l *= (1 - lambda_)/(1 - lambda_**L)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def get_random_action(self, s):","    ## Epsilon-greedy","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_q_l = self.sess.run(self.Qa_ph,","                           feed_dict={self.s_ph: [[s]] } )","      return np.argmax(a_q_l)","    ","    '''","    ## Softmax with temperature parameter equal to 1","    a_q_l = self.sess.run(self.Qa_ph,","                          feed_dict={self.s_ph: [[s]] } )[0][0]","    try:","      a_q_l /= sum(a_q_l)","      ","      a_l = list(range(self.a_len) )","      s = sum([math.exp(a_q_l[a] ) for a in a_l] )","      p_l = [math.exp(a_q_l[a] )/s for a in a_l]","      dist = scipy.stats.rv_discrete(values=(a_l, p_l) )","      return dist.rvs(size=1)[0]","    except:","      return np.argmax(a_q_l)","    '''","  ","  def get_max_action(self, s):","    a_q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return np.argmax(a_q_l)","  ","  def get_a_q_l(self, s):","    a_q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return a_q_l","","# ######################################  QLearner_wTargetNet  ################################### #","class DQNNet:","  def __init__(self, name, s_len, a_len, nn_len=10):","    self.name = name","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    ","    with tf.variable_scope(name):","      # N x T x s_len","      self.s_ph = tf.placeholder(tf.float32, shape=(None, None, s_len) )","      hidden1 = tf.contrib.layers.fully_connected(self.s_ph, nn_len, activation_fn=tf.nn.relu)","      hidden2 = tf.contrib.layers.fully_connected(hidden1, nn_len, activation_fn=tf.nn.relu)","      self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, a_len, activation_fn=None)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","      self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","      ","      sh = tf.shape(self.Qa_ph)","      N, T = sh[0], sh[1]","      indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (N, T, 1) )","      self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","      ","      self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","      self.train_op = self.optimizer.minimize(self.loss)","      ","  def __repr__(self):","    return 'DQNNet(name= {}, s_len= {}, a_len= {})'.format(self.name, self.s_len, self.a_len)","","NUM_TRAINING_BEFORE_QNET_TO_TARGET = 9","class QLearner_wTargetNet(Learner):","  def __init__(self, s_len, a_len, nn_len=10):","    super().__init__(s_len, a_len, nn_len)","    self.eps = 0.1","    self.q_net = DQNNet('QNet', s_len, a_len, nn_len)","    self.target_net = DQNNet('TargetNet', s_len, a_len, nn_len)","    self.num_training = 0","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","    self.saver = tf.train.Saver(max_to_keep=5)","  ","  def __repr__(self):","    return 'QLearner_wTargetNet(s_len= {}, a_len= {})'.format(self.s_len, self.a_len)","  ","  def update_target_graph(self):","    from_vars = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, 'QNet')","    to_vars = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, 'TargetNet')","  ","    op_holder = []","    # Update TargetNet parameters with QNet parameters","    for from_var, to_var in zip(from_vars,to_vars):","      op_holder.append(to_var.assign(from_var) )","    return op_holder","  ","  def end_of_train(self, loss):","    self.eps *= 0.99","    self.num_training += 1","    log(INFO, \"{}:: loss= {}\".format(self.__class__.__name__, loss), eps=self.eps, num_training=self.num_training)","    if self.num_training % NUM_TRAINING_BEFORE_QNET_TO_TARGET == 0:","      self.sess.run(self.update_target_graph() )","      log(INFO, \"updated TargetNet with QNet!\")","  ","  def train_w_sarsa_l(self, sarsa_l):","    if len(sarsa_l) == 0:","      log(WARNING, \"sarsa_l is empty, skipping.\")","      return","    s_l, a_l, targetq_l = [], [], []","    for sarsa in sarsa_l:","      s, a, r, snext = sarsa[0], sarsa[1], sarsa[2], sarsa[3]","      s_l.append(s)","      a_l.append([a] )","      ","      a_q_l = self.sess.run(self.target_net.Qa_ph,","                         feed_dict={self.target_net.s_ph: [[snext]] } )[0][0]","      targetq = r + self.gamma*max(a_q_l)","      targetq_l.append([targetq] )","    # blog(targetq_l=targetq_l)","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: [s_l],","                                       self.q_net.a_ph: [a_l],","                                       self.q_net.targetq_ph: [targetq_l] } )","    self.end_of_train(loss)","  ","  def _train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.target_net.Qa_ph,","                            feed_dict={self.target_net.s_ph: n_t_s_l} )","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      for t in range(T):","        if t < T-1:","          n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","        else:","          n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: n_t_s_l,","                                       self.q_net.a_ph: n_t_a_l,","                                       self.q_net.targetq_ph: n_t_targetq_l} )","    self.end_of_train(loss)","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.target_net.Qa_ph,","                            feed_dict={self.target_net.s_ph: n_t_s_l} )","    def target_q_w_mstep(m):","      n_t_targetq_l = np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          if t < T-1:","            cumr = 0","            tu_ = min(T-2, t+m-1)","            for t_ in range(tu_, t-1, -1):","              cumr = n_t_r_l[n, t_, 0] + self.gamma*cumr","            n_t_targetq_l[n, t, 0] = cumr + self.gamma*max(n_t_q_l[n, tu_+1, :] )","            # n_t_targetq_l[n, t, 0] = cumr + self.gamma*n_t_q_l[n, tu_+1, n_t_a_l[n, tu_+1, 0] ] # SARSA","          else:","            n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","            # n_t_targetq_l[n, t, 0] = n_t_q_l[n, t, n_t_a_l[n, t, 0] ] # SARSA","      return n_t_targetq_l","    ","    lambda_, L = 0.5, 10","    n_t_targetq_l = np.zeros((N, T, 1))","    for m in range(1, L):","      n_t_targetq_l += lambda_**(m-1) * target_q_w_mstep(m)","    n_t_targetq_l *= (1 - lambda_)/(1 - lambda_**L)","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: n_t_s_l,","                                       self.q_net.a_ph: n_t_a_l,","                                       self.q_net.targetq_ph: n_t_targetq_l} )","    self.end_of_train(loss)","  ","  def get_random_action(self, s):","    ## Epsilon-greedy","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_q_l = self.sess.run(self.q_net.Qa_ph,","                           feed_dict={self.q_net.s_ph: [[s]] } )","      return np.argmax(a_q_l)","  ","  def get_max_action(self, s):","    a_q_l = self.sess.run(self.q_net.Qa_ph,","                         feed_dict={self.q_net.s_ph: [[s]] } )","    return np.argmax(a_q_l)","  ","  def get_a_q_l(self, s):","    a_q_l = self.sess.run(self.q_net.Qa_ph,","                         feed_dict={self.q_net.s_ph: [[s]] } )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":214,"column":0},"end":{"row":215,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":214,"column":0},"end":{"row":215,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":70,"column":0},"end":{"row":70,"column":57}},"text":"                         feed_dict={self.s_ph: n_t_s_l} )"},{"action":"removeLines","range":{"start":{"row":30,"column":0},"end":{"row":70,"column":0}},"nl":"\n","lines":["# #######################################  Value Estimator  ###################################### #","class VEster(object): # Value Estimator","  def __init__(self, s_len, nn_len):","    self.s_len = s_len","    self.nn_len = nn_len","    ","    self.init()","  ","  def __repr__(self):","    return \"VEster[s_len= {}]\".format(self.s_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(shape=(None, None, self.s_len), dtype=tf.float32)","    # self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    # self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","    # self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","    self.hidden = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.v = tf.contrib.layers.fully_connected(self.hidden, 1, activation_fn=None, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.sampled_v = tf.placeholder(shape=(None, None, 1), dtype=tf.float32)","    # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","    self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v) + \\","      tf.losses.get_regularization_loss()","    ","    # self.optimizer = tf.train.GradientDescentOptimizer(0.01)","    self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_v_l):","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.sampled_v: n_t_v_l} )","    print(\"VEster:: loss= {}\".format(loss) )","  ","  def get_v(self, n_t_s_l):","    return self.sess.run(self.v,"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":30,"column":0},"end":{"row":31,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":30,"column":0},"end":{"row":31,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":170,"column":0},"end":{"row":170,"column":30}},"text":"    return np.argmax(a_dist)  "},{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":170,"column":0}},"nl":"\n","lines":["# ####################################  Policy Gradient Learner  ################################# #","class PolicyGradLearner(Learner):","  def __init__(self, s_len, a_len, nn_len=10, w_actorcritic=False):","    super().__init__(s_len, a_len, nn_len)","    self.w_actorcritic = w_actorcritic","    ","    self.v_ester = VEster(s_len, nn_len)","    self.init()","    self.saver = tf.train.Saver(max_to_keep=5)","    ","    self.eps = 0.1","  ","  def __repr__(self):","    return 'PolicyGradLearner(s_len= {}, a_len= {}, nn_len= {}, gamma= {}, w_actorcritic= {})'.format(self.s_len, self.a_len, self.nn_len, self.gamma, self.w_actorcritic)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    # self.a_probs = tf.contrib.layers.fully_connected(hidden1, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name='a_ph')","    self.q_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='q_ph')","    self.v_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='v_ph')","    ","    sh = tf.shape(self.a_probs)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.a_probs, [-1] ), indices), (N, T, 1) )","    self.loss = \\","      -tf.reduce_mean(tf.reduce_sum(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph), axis=1), axis=0) + \\","      tf.losses.get_regularization_loss()","    ","    self.optimizer = tf.train.AdamOptimizer(0.01) # tf.train.GradientDescentOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    # All trajectories use the same policy","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    # print(\"n_t_s_l.shape= {}\".format(n_t_s_l.shape) )","    # print(\"avg r= {}\".format(np.mean(n_t_r_l) ) )","    ","    if not self.w_actorcritic:","      n_t_q_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","      # print(\"n_t_q_l= {}\".format(n_t_q_l) )","      # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","      print(\"PolicyGradLearner:: avg q= {}\".format(np.mean(n_t_q_l) ) )","      ","      t_avgq_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","      # m = np.mean(n_t_q_l)","      # t_avgq_l = np.array([m for t in range(T) ] ).reshape((T, 1))","      n_t_v_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_v_l[n] = t_avgq_l","      # print(\"n_t_v_l= {}\".format(n_t_v_l) )","      # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","      ","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    else:","      # Policy gradient by getting baseline values from actor-critic","      n_t_v_l = np.zeros((N, T, 1))","      n_t_vest_l = self.v_ester.get_v(n_t_s_l)","      for t in range(T-1):","        n_t_v_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_vest_l[:, t+1]","      n_t_v_l[:, T-1] = n_t_r_l[:, T-1]","      self.v_ester.train_w_mult_trajs(n_t_s_l, n_t_v_l)","      ","      n_t_v_l = self.v_ester.get_v(n_t_s_l)","      n_t_q_l = np.zeros((N, T, 1))","      # for n in range(N):","      #   for t in range(T-1):","      #     n_t_q_l[n, t] = n_t_r_l[n, t] + self.gamma*n_t_v_l[n, t+1]","      #   n_t_q_l[n, T-1] = n_t_r_l[n, t]","      for t in range(T-1):","        n_t_q_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_v_l[:, t+1]","      n_t_q_l[:, T-1] = n_t_r_l[:, T-1]","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    log(INFO, \"PolicyGradLearner;\", loss=loss)","  ","  def get_action_dist(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    return np.array(a_probs[0][0] )","  ","  def get_random_action(self, s):","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","      a_dist = np.array(a_probs[0][0] )","      # log(WARNING, \"\", s=s, a_dist=a_dist)","      a = np.random.choice(a_dist, 1, p=a_dist)","      a = np.argmax(a_dist == a)","      return a","  ","  def get_max_action(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    a_dist = a_probs[0][0]","    # print(\"a_dist= {}\".format(a_dist) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":57,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":57,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":0},"end":{"row":158,"column":53}},"text":"  print(\"restore_result= {}\".format(restore_result) )"},{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":158,"column":0}},"nl":"\n","lines":["# #############################################  Test  ########################################### #","def test():","  s_len, a_len, nn_len = 3, 3, 10","  scher = PolicyGradLearner(s_len, a_len, nn_len)","  # scher = QLearner(s_len, a_len, nn_len)","  ","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s, a):","    # s_min = min(s)","    # r = 10 if s[a] == s_min else 0","    # return min(100, 1/(0.001 + s[a] - min(s) ) )","    # return 100*math.exp(-(s[a] - min(s) ) )","    return 1/(0.1 + s[a] - min(s) )","  ","  def evaluate():","    num_shortest_found = 0","    for e in range(100):","      s = state()","      a = scher.get_max_action(s)","      if s[a] - min(s) < 0.01:","        num_shortest_found += 1","    print(\"freq shortest found= {}\".format(num_shortest_found/100) )","  ","  def train_w_mult_trajs():","    N, T = 10, 100","    def gen_N_traj():","      n_t_s_l, n_t_a_l, n_t_r_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          s = state()","          a = scher.get_random_action(s)","          n_t_s_l[n, t, :] = s","          n_t_a_l[n, t, :] = a","          n_t_r_l[n, t, :] = reward(s, a)","      return n_t_s_l, n_t_a_l, n_t_r_l","    ","    for i in range(100*20):","      n_t_s_l, n_t_a_l, n_t_r_l = gen_N_traj()","      scher.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        evaluate()","  train_w_mult_trajs()","","def vsimple_regress():","  s_len = 3","  T = 100","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s):","    return 10*max(s)","  ","  def sample_traj():","    t_s_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1))","    for t in range(T):","      s = state()","      t_s_l[t, :] = s","      t_r_l[t, :] = reward(s)","    return t_s_l, t_r_l","  ","  value_ester = VEster(s_len, nn_len=10, straj_training=False)","  for i in range(100*40):","    t_s_l, t_r_l = sample_traj()","    value_ester.train_w_single_traj(t_s_l, t_r_l)","","class A(object):","  def __init__(self):","    self.a = 'A'","  ","  def __repr__(self):","    return self.a","  ","  def test(self):","    print(\"self.a= {}\".format(self.a) )","  ","class B(A):","  def __init__(self):","    super().__init__()","    ","    self.init()","  ","  def init(self):","    self.a = 'B'","","if __name__ == \"__main__\":","  # test()","  # vsimple_regress()","  ","  # b = B()","  # # print(\"b= {}\".format(b) )","  # b.test()","  ","  # learner = PolicyGradLearner(s_len=1, a_len=1)","  learner = QLearner(s_len=1, a_len=1)","  learner.save(0)","  restore_result = learner.restore(0)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":57,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":55,"column":0},"end":{"row":56,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":15}},"text":"  return t_dr_l"},{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":28,"column":0}},"nl":"\n","lines":["def rewards_to_qvals(t_r_l, gamma):","  T = t_r_l.shape[0]","  # reward = average of all following rewards","  # for t in range(T):","  #   t_r_l[t, 0] = np.mean(t_r_l[t:, 0])","  ","  # for t in range(T):","  #   cumw, cumr = 0, 0","  #   for i, r in enumerate(t_r_l[t:, 0] ):","  #     cumw += gamma**i","  #     cumr += gamma**i * r","  #   t_r_l[t, 0] = cumr/cumw","  # return t_r_l","  ","  t_dr_l = np.zeros((T, 1))","  cumw, cumr = 0, 0","  for t in range(T-1, -1, -1):","    cumr = t_r_l[t, 0] + gamma*cumr","    # cumw = 1 + gamma*cumw","    # t_dr_l[t, 0] = cumr/cumw","    t_dr_l[t, 0] = cumr"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":18}},"text":"import numpy as np"},{"action":"insertText","range":{"start":{"row":7,"column":18},"end":{"row":8,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":8,"column":0},"end":{"row":84,"column":0}},"lines":["","from sim_objs import *","","LEARNING_RATE = 0.01 # 0.0001","STATE_LEN = 4","def state(j, wload_l=None, cluster=None):","  if STATE_LEN == 1:","    return [j.totaldemand] # j.k","  elif STATE_LEN == 3:","    return [j.totaldemand, min(wload_l), max(wload_l) ]","    # return [j.totaldemand, np.mean(wload_l), np.std(wload_l) ]","  elif STATE_LEN == 4:","    return [j.totaldemand, min(wload_l), max(wload_l), len(cluster.store.items) ]","  elif STATE_LEN == 5:","    return [j.totaldemand, min(wload_l), max(wload_l), np.mean(wload_l), np.std(wload_l) ]","","def state_(jtotaldemand, wload_l=None, cluster_qlen=None):","  if STATE_LEN == 1:","    return [jtotaldemand]","  elif STATE_LEN == 3:","    return [jtotaldemand, min(wload_l), max(wload_l) ]","  elif STATE_LEN == 4:","    return [jtotaldemand, min(wload_l), max(wload_l), cluster_qlen]","  elif STATE_LEN == 5:","    return [jtotaldemand, min(wload_l), max(wload_l), np.mean(wload_l), np.std(wload_l) ]","","def sample_traj(sinfo_m, scher):","  def reward(slowdown):","    # return 1/slowdown","    # return 10 if slowdown < 1.5 else -10","    ","    ## The following allows Q-learning to converge","    # if slowdown < 1.1:","    #   return 10","    # elif slowdown < 1.5:","    #   return 10/slowdown","    # else:","    #   return -slowdown","    ","    return -slowdown","    ","    # if slowdown < 2:","    #   return 10/slowdown","    # else:","    #   return -10*slowdown","  ","  env = simpy.Environment()","  cl = Cluster(env, scher=scher, **sinfo_m)","  jg = JobGen(env, out=cl, **sinfo_m)","  env.run(until=cl.wait_for_alljobs)","  ","  T = sinfo_m['njob']","  t_s_l, t_a_l, t_r_l, t_sl_l = np.zeros((T, scher.s_len)), np.zeros((T, 1)), np.zeros((T, 1)), np.zeros((T, 1))","  ","  # t = 0","  # for jid, jinfo_m in sorted(cl.jid_info_m.items(), key=itemgetter(0) ):","  #   # blog(t=t, jid=jid, jinfo_m=jinfo_m)","  #   if 'fate' in jinfo_m and jinfo_m['fate'] == 'finished':","  for t in range(T):","    jinfo_m = cl.jid_info_m[t+1]","    t_s_l[t, :] = jinfo_m['s']","    t_a_l[t, :] = jinfo_m['a']","    sl = (jinfo_m['wait_time'] + jinfo_m['run_time'] )/jinfo_m['expected_run_time']","    t_r_l[t, :] = reward(sl)","    t_sl_l[t, :] = sl","  ","  return t_s_l, t_a_l, t_r_l, t_sl_l, \\","         np.mean([w.avg_load for w in cl.w_l] ), \\","         0","         # sum([1 for _, jinfo_m in cl.jid_info_m.items() if 'fate' in jinfo_m and jinfo_m['fate'] == 'dropped'] )/len(cl.jid_info_m)","","def evaluate(sinfo_m, scher):","  alog(\"scher= {}\".format(scher) )","  for _ in range(3):","    t_s_l, t_a_l, t_r_l, t_sl_l = sample_traj(sinfo_m, scher)","    print(\"avg_s= {}, avg_a= {}, avg_r= {}\".format(np.mean(t_s_l), np.mean(t_a_l), np.mean(t_r_l) ) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":["import numpy as np"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[]},"/q_learning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":6,"column":18},"end":{"row":6,"column":18}},"lastUse":1541607645232,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":23}},"text":"from rlearning import *"},{"action":"insertText","range":{"start":{"row":0,"column":23},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":341,"column":0}},"lines":["","# ###########################################  Q Learning  ####################################### #","class QLearner(Learner):","  def __init__(self, s_len, a_len, nn_len=10):","    super().__init__(s_len, a_len, nn_len)","    self.eps = 0.1","    self.init()","    self.saver = tf.train.Saver(max_to_keep=5)","    ","  def __repr__(self):","    return 'QLearner(s_len= {}, a_len= {})'.format(self.s_len, self.a_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu)","    self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=None)","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","    self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","    ","    sh = tf.shape(self.Qa_ph)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (N, T, 1) )","    self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","    ","    self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_sarsa_l(self, sarsa_l):","    if len(sarsa_l) == 0:","      log(WARNING, \"sarsa_l is empty, skipping.\")","      return","    s_l, a_l, targetq_l = [], [], []","    for sarsa in sarsa_l:","      s, a, r, snext = sarsa[0], sarsa[1], sarsa[2], sarsa[3]","      s_l.append(s)","      a_l.append([a] )","      ","      q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[snext]] } )[0][0]","      targetq = r + self.gamma*max(q_l)","      targetq_l.append([targetq] )","      # blog(targetq_l=targetq_l)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: [s_l],","                                       self.a_ph: [a_l],","                                       self.targetq_ph: [targetq_l] } )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.Qa_ph,","                            feed_dict={self.s_ph: n_t_s_l} )","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      for t in range(T):","        if t < T-1:","          n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","        else:","          n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","    ","    # n_t_targetq_l = np.zeros((N, T, 1))","    # for n in range(N):","    #   n_t_targetq_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def train_w_mult_trajs_(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.Qa_ph,","                            feed_dict={self.s_ph: n_t_s_l} )","    def target_q_w_mstep(m):","      n_t_targetq_l = np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          if t < T-1:","            cumr = 0","            tu_ = min(T-2, t+m-1)","            for t_ in range(tu_, t-1, -1):","              cumr = n_t_r_l[n, t_, 0] + self.gamma*cumr","            n_t_targetq_l[n, t, 0] = cumr + self.gamma*max(n_t_q_l[n, tu_+1, :] )","            # n_t_targetq_l[n, t, 0] = cumr + self.gamma*n_t_q_l[n, tu_+1, n_t_a_l[n, tu_+1, 0] ] # SARSA","          else:","            n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","            # n_t_targetq_l[n, t, 0] = n_t_q_l[n, t, n_t_a_l[n, t, 0] ] # SARSA","      return n_t_targetq_l","    ","    lambda_, L = 0.5, 10","    n_t_targetq_l = np.zeros((N, T, 1))","    for m in range(1, L):","      n_t_targetq_l += lambda_**(m-1) * target_q_w_mstep(m)","    n_t_targetq_l *= (1 - lambda_)/(1 - lambda_**L)","    ","    loss, _ = self.sess.run([self.loss, self.train_op],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.a_ph: n_t_a_l,","                                       self.targetq_ph: n_t_targetq_l} )","    print(\"QLearner:: loss= {}\".format(loss) )","    self.eps *= 0.99","    log(INFO, \"\", eps=self.eps)","  ","  def get_random_action(self, s):","    ## Epsilon-greedy","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_q_l = self.sess.run(self.Qa_ph,","                           feed_dict={self.s_ph: [[s]] } )","      return np.argmax(a_q_l)","    ","    '''","    ## Softmax with temperature parameter equal to 1","    a_q_l = self.sess.run(self.Qa_ph,","                          feed_dict={self.s_ph: [[s]] } )[0][0]","    try:","      a_q_l /= sum(a_q_l)","      ","      a_l = list(range(self.a_len) )","      s = sum([math.exp(a_q_l[a] ) for a in a_l] )","      p_l = [math.exp(a_q_l[a] )/s for a in a_l]","      dist = scipy.stats.rv_discrete(values=(a_l, p_l) )","      return dist.rvs(size=1)[0]","    except:","      return np.argmax(a_q_l)","    '''","  ","  def get_max_action(self, s):","    a_q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return np.argmax(a_q_l)","  ","  def get_a_q_l(self, s):","    a_q_l = self.sess.run(self.Qa_ph,","                         feed_dict={self.s_ph: [[s]] } )","    return a_q_l","","# ######################################  QLearner_wTargetNet  ################################### #","class DQNNet:","  def __init__(self, name, s_len, a_len, nn_len=10):","    self.name = name","    self.s_len = s_len","    self.a_len = a_len","    self.nn_len = nn_len","    ","    with tf.variable_scope(name):","      # N x T x s_len","      self.s_ph = tf.placeholder(tf.float32, shape=(None, None, s_len) )","      hidden1 = tf.contrib.layers.fully_connected(self.s_ph, nn_len, activation_fn=tf.nn.relu)","      hidden2 = tf.contrib.layers.fully_connected(hidden1, nn_len, activation_fn=tf.nn.relu)","      self.Qa_ph = tf.contrib.layers.fully_connected(hidden2, a_len, activation_fn=None)","      ","      self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name=\"a_ph\")","      self.targetq_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name=\"q_ph\")","      ","      sh = tf.shape(self.Qa_ph)","      N, T = sh[0], sh[1]","      indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","      self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.Qa_ph, [-1] ), indices), (N, T, 1) )","      self.loss = tf.losses.mean_squared_error(self.resp_outputs, self.targetq_ph)","      ","      self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","      self.train_op = self.optimizer.minimize(self.loss)","      ","  def __repr__(self):","    return 'DQNNet(name= {}, s_len= {}, a_len= {})'.format(self.name, self.s_len, self.a_len)","","NUM_TRAINING_BEFORE_QNET_TO_TARGET = 9","class QLearner_wTargetNet(Learner):","  def __init__(self, s_len, a_len, nn_len=10):","    super().__init__(s_len, a_len, nn_len)","    self.eps = 0.1","    self.q_net = DQNNet('QNet', s_len, a_len, nn_len)","    self.target_net = DQNNet('TargetNet', s_len, a_len, nn_len)","    self.num_training = 0","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","    self.saver = tf.train.Saver(max_to_keep=5)","  ","  def __repr__(self):","    return 'QLearner_wTargetNet(s_len= {}, a_len= {})'.format(self.s_len, self.a_len)","  ","  def update_target_graph(self):","    from_vars = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, 'QNet')","    to_vars = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, 'TargetNet')","  ","    op_holder = []","    # Update TargetNet parameters with QNet parameters","    for from_var, to_var in zip(from_vars,to_vars):","      op_holder.append(to_var.assign(from_var) )","    return op_holder","  ","  def end_of_train(self, loss):","    self.eps *= 0.99","    self.num_training += 1","    log(INFO, \"{}:: loss= {}\".format(self.__class__.__name__, loss), eps=self.eps, num_training=self.num_training)","    if self.num_training % NUM_TRAINING_BEFORE_QNET_TO_TARGET == 0:","      self.sess.run(self.update_target_graph() )","      log(INFO, \"updated TargetNet with QNet!\")","  ","  def train_w_sarsa_l(self, sarsa_l):","    if len(sarsa_l) == 0:","      log(WARNING, \"sarsa_l is empty, skipping.\")","      return","    s_l, a_l, targetq_l = [], [], []","    for sarsa in sarsa_l:","      s, a, r, snext = sarsa[0], sarsa[1], sarsa[2], sarsa[3]","      s_l.append(s)","      a_l.append([a] )","      ","      a_q_l = self.sess.run(self.target_net.Qa_ph,","                         feed_dict={self.target_net.s_ph: [[snext]] } )[0][0]","      targetq = r + self.gamma*max(a_q_l)","      targetq_l.append([targetq] )","    # blog(targetq_l=targetq_l)","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: [s_l],","                                       self.q_net.a_ph: [a_l],","                                       self.q_net.targetq_ph: [targetq_l] } )","    self.end_of_train(loss)","  ","  def _train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.target_net.Qa_ph,","                            feed_dict={self.target_net.s_ph: n_t_s_l} )","    n_t_targetq_l = np.zeros((N, T, 1))","    for n in range(N):","      for t in range(T):","        if t < T-1:","          n_t_targetq_l[n, t, 0] = n_t_r_l[n, t, 0] + self.gamma*max(n_t_q_l[n, t+1, :] )","        else:","          n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: n_t_s_l,","                                       self.q_net.a_ph: n_t_a_l,","                                       self.q_net.targetq_ph: n_t_targetq_l} )","    self.end_of_train(loss)","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    n_t_q_l = self.sess.run(self.target_net.Qa_ph,","                            feed_dict={self.target_net.s_ph: n_t_s_l} )","    def target_q_w_mstep(m):","      n_t_targetq_l = np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          if t < T-1:","            cumr = 0","            tu_ = min(T-2, t+m-1)","            for t_ in range(tu_, t-1, -1):","              cumr = n_t_r_l[n, t_, 0] + self.gamma*cumr","            n_t_targetq_l[n, t, 0] = cumr + self.gamma*max(n_t_q_l[n, tu_+1, :] )","            # n_t_targetq_l[n, t, 0] = cumr + self.gamma*n_t_q_l[n, tu_+1, n_t_a_l[n, tu_+1, 0] ] # SARSA","          else:","            n_t_targetq_l[n, t, 0] = max(n_t_q_l[n, t, :] )","            # n_t_targetq_l[n, t, 0] = n_t_q_l[n, t, n_t_a_l[n, t, 0] ] # SARSA","      return n_t_targetq_l","    ","    lambda_, L = 0.5, 10","    n_t_targetq_l = np.zeros((N, T, 1))","    for m in range(1, L):","      n_t_targetq_l += lambda_**(m-1) * target_q_w_mstep(m)","    n_t_targetq_l *= (1 - lambda_)/(1 - lambda_**L)","    ","    loss, _ = self.sess.run([self.q_net.loss, self.q_net.train_op],","                            feed_dict={self.q_net.s_ph: n_t_s_l,","                                       self.q_net.a_ph: n_t_a_l,","                                       self.q_net.targetq_ph: n_t_targetq_l} )","    self.end_of_train(loss)","  ","  def get_random_action(self, s):","    ## Epsilon-greedy","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_q_l = self.sess.run(self.q_net.Qa_ph,","                           feed_dict={self.q_net.s_ph: [[s]] } )","      return np.argmax(a_q_l)","  ","  def get_max_action(self, s):","    a_q_l = self.sess.run(self.q_net.Qa_ph,","                         feed_dict={self.q_net.s_ph: [[s]] } )","    return np.argmax(a_q_l)","  ","  def get_a_q_l(self, s):","    a_q_l = self.sess.run(self.q_net.Qa_ph,","                         feed_dict={self.q_net.s_ph: [[s]] } )","    return a_q_l","","# ################################  QLearner_wTargetNet_wExpReplay  ############################## #","class QLearner_wTargetNet_wExpReplay(QLearner_wTargetNet):","  def __init__(self, s_len, a_len, exp_buffer_size, exp_batch_size, nn_len=10):","    super().__init__(s_len, a_len, nn_len)","    self.exp_buffer_size = exp_buffer_size","    self.exp_batch_size = exp_batch_size","    ","    self.exp_q = ExpQueue(exp_buffer_size, exp_batch_size)","    self.learning_count = 0","    ","  def __repr__(self):","    return 'QLearner_wTargetNet_wExpReplay(s_len= {}, a_len= {}, exp_buffer_size= {}, exp_batch_size= {})'.format(self.s_len, self.a_len, self.exp_buffer_size, self.exp_batch_size)","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    ","    sarsa_l = []","    for n in range(N):","      for t in range(T-1):","        s, a, r = n_t_s_l[n, t, 0], n_t_a_l[n, t, 0], n_t_r_l[n, t, 0]","        snext, anext = n_t_s_l[n, t+1, 0], n_t_a_l[n, t+1, 0]","        sarsa_l.append((s, a, r, snext, anext) )","    ","    self.exp_q.put_l(sarsa_l)","    self.train_w_sarsa_l(self.exp_q.sample_batch() )"]},{"action":"insertText","range":{"start":{"row":341,"column":0},"end":{"row":341,"column":2}},"text":"  "}]}]],"redo":[]},"/log_utils.py":{"scrollTop":371,"scrollLeft":0,"selection":{"start":{"row":38,"column":25},"end":{"row":38,"column":25}},"lastUse":1541607377284,"undo":[],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":2}},"text":"# "}]}]]},"/learn_wmpi.py":{"scrollTop":2991,"scrollLeft":0,"selection":{"start":{"row":170,"column":19},"end":{"row":170,"column":19}},"lastUse":1541606951294,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":167,"column":0},"end":{"row":168,"column":0}},"nl":"\n","lines":["  return load*random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":11},"end":{"row":165,"column":16}},"text":"load*"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":161,"column":11},"end":{"row":161,"column":16}},"text":"load*"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":147,"column":0},"end":{"row":157,"column":0}},"nl":"\n","lines":["  '''","  base_Pr_straggling = 0.3","  threshold = 0.2","  if load < threshold:","    return random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1","  else:","    p_max = 0.6","    p = base_Pr_straggling + (p_max - base_Pr_straggling)/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","    return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1","  '''"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"nl":"\n","lines":["  '''"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":147,"column":0},"end":{"row":148,"column":0}},"nl":"\n","lines":["  '''"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":36},"end":{"row":168,"column":37}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":39},"end":{"row":168,"column":40}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":168,"column":35},"end":{"row":168,"column":36}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":168,"column":39},"end":{"row":168,"column":40}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":39},"end":{"row":168,"column":40}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":150,"column":31},"end":{"row":150,"column":32}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":154,"column":31},"end":{"row":154,"column":32}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":146,"column":5},"end":{"row":147,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":147,"column":0},"end":{"row":147,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":147,"column":2},"end":{"row":147,"column":3}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":147,"column":3},"end":{"row":147,"column":4}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":147,"column":4},"end":{"row":147,"column":5}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":0},"end":{"row":156,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":2},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":2},"end":{"row":158,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":158,"column":0},"end":{"row":158,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":2},"end":{"row":156,"column":3}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":3},"end":{"row":156,"column":4}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":4},"end":{"row":156,"column":5}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":5},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":2},"end":{"row":157,"column":26}},"text":"base_Pr_straggling = 0.3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":2},"end":{"row":158,"column":67}},"text":"return random.uniform(0, 0.01) if random.uniform(0, 1) < p else 1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":2},"end":{"row":157,"column":20}},"text":"base_Pr_straggling"},{"action":"insertText","range":{"start":{"row":157,"column":2},"end":{"row":157,"column":3}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":166,"column":17},"end":{"row":166,"column":18}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":166,"column":17},"end":{"row":166,"column":18}},"text":"1"}]}]],"redo":[]},"/experience_replay.py":{"scrollTop":55.5,"scrollLeft":0,"selection":{"start":{"row":35,"column":34},"end":{"row":35,"column":34}},"lastUse":1541606681100,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":9},"end":{"row":18,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":10},"end":{"row":18,"column":11}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":19},"end":{"row":18,"column":20}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":20},"end":{"row":18,"column":21}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":11},"end":{"row":21,"column":17}},"text":"append"},{"action":"insertText","range":{"start":{"row":21,"column":11},"end":{"row":21,"column":12}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":12},"end":{"row":21,"column":13}},"text":"x"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":13},"end":{"row":21,"column":14}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":14},"end":{"row":21,"column":15}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":15},"end":{"row":21,"column":16}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":16},"end":{"row":21,"column":17}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":19},"end":{"row":21,"column":20}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":20},"end":{"row":21,"column":21}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":23},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":4},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":4},"end":{"row":19,"column":62}},"text":"if len(self.buffer) + len(experience) >= self.buffer_size:"},{"action":"insertText","range":{"start":{"row":19,"column":62},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":20,"column":0},"end":{"row":21,"column":0}},"lines":["        self.buffer[0:(len(experience)+len(self.buffer))-self.buffer_size] = []"]},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":34}},"text":"    self.buffer.extend(experience)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":16},"end":{"row":19,"column":22}},"text":"buffer"},{"action":"insertText","range":{"start":{"row":19,"column":16},"end":{"row":19,"column":17}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":25},"end":{"row":19,"column":35}},"text":"experience"},{"action":"insertText","range":{"start":{"row":19,"column":25},"end":{"row":19,"column":26}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":26},"end":{"row":19,"column":27}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":27},"end":{"row":19,"column":28}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":38},"end":{"row":19,"column":45}},"text":"buffer_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":20,"column":13},"end":{"row":20,"column":19}},"text":"buffer"},{"action":"insertText","range":{"start":{"row":20,"column":13},"end":{"row":20,"column":14}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":20,"column":22},"end":{"row":20,"column":32}},"text":"experience"},{"action":"insertText","range":{"start":{"row":20,"column":22},"end":{"row":20,"column":23}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":23},"end":{"row":20,"column":24}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":24},"end":{"row":20,"column":25}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":26},"end":{"row":20,"column":27}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":28},"end":{"row":20,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":20,"column":38},"end":{"row":20,"column":44}},"text":"buffer"},{"action":"insertText","range":{"start":{"row":20,"column":38},"end":{"row":20,"column":39}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":41},"end":{"row":20,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":43},"end":{"row":20,"column":44}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":20,"column":49},"end":{"row":20,"column":56}},"text":"buffer_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":9},"end":{"row":21,"column":15}},"text":"buffer"},{"action":"insertText","range":{"start":{"row":21,"column":9},"end":{"row":21,"column":10}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":18},"end":{"row":21,"column":28}},"text":"experience"},{"action":"insertText","range":{"start":{"row":21,"column":18},"end":{"row":21,"column":19}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":19},"end":{"row":21,"column":20}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":20},"end":{"row":21,"column":21}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["    if len(self.l) == self.size:"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["      self.l.pop(0)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["    self.l.extend(e_l)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":22,"column":2},"end":{"row":22,"column":4}},"text":"  "}]}]],"redo":[]},"/mrun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":12,"column":16},"end":{"row":12,"column":16}},"lastUse":1541602511723,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":20}},"text":" # 11"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":18},"end":{"row":10,"column":19}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":16},"end":{"row":10,"column":17}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}]],"redo":[]},"/scheduler.py":{"scrollTop":993,"scrollLeft":0,"selection":{"start":{"row":72,"column":2},"end":{"row":72,"column":2}},"lastUse":1541564048138,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":8},"end":{"row":86,"column":10}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":10},"end":{"row":86,"column":12}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":12},"end":{"row":86,"column":14}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":14},"end":{"row":86,"column":16}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":16},"end":{"row":86,"column":18}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":18},"end":{"row":86,"column":20}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":20},"end":{"row":86,"column":25}},"text":"list("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":90},"end":{"row":86,"column":91}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":91},"end":{"row":86,"column":92}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":97,"column":29},"end":{"row":97,"column":88}},"text":"np.logspace(0.1, math.log10(job_totaldemand_rv.u_l/10), 10)"},{"action":"insertText","range":{"start":{"row":97,"column":29},"end":{"row":97,"column":42}},"text":"totaldemand_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":28},"end":{"row":5,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":1},"end":{"row":5,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":2},"end":{"row":5,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":3},"end":{"row":5,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":4},"end":{"row":5,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":5},"end":{"row":5,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":6},"end":{"row":5,"column":7}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":7},"end":{"row":5,"column":8}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":8},"end":{"row":5,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":9},"end":{"row":5,"column":10}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":10},"end":{"row":5,"column":11}},"text":"b"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":11},"end":{"row":5,"column":12}},"text":"j"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":12},"end":{"row":5,"column":13}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":13},"end":{"row":5,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":14},"end":{"row":5,"column":15}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":15},"end":{"row":5,"column":16}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":16},"end":{"row":5,"column":17}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":17},"end":{"row":5,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":18},"end":{"row":5,"column":19}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":19},"end":{"row":5,"column":20}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":20},"end":{"row":5,"column":21}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":21},"end":{"row":5,"column":22}},"text":"J"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":22},"end":{"row":5,"column":23}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":23},"end":{"row":5,"column":24}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":24},"end":{"row":6,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":["from sim_objs import Job"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":104,"column":30},"end":{"row":104,"column":38}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":104,"column":30},"end":{"row":104,"column":39}},"text":"get_a_q_l"},{"action":"removeText","range":{"start":{"row":97,"column":32},"end":{"row":97,"column":40}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":97,"column":32},"end":{"row":97,"column":41}},"text":"get_a_q_l"},{"action":"removeText","range":{"start":{"row":90,"column":28},"end":{"row":90,"column":36}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":90,"column":28},"end":{"row":90,"column":37}},"text":"get_a_q_l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":25,"column":32},"end":{"row":25,"column":33}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":25,"column":31},"end":{"row":25,"column":32}},"text":"\\"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":28}},"text":"from learning_utils import *"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":70,"column":62},"end":{"row":71,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":71,"column":0},"end":{"row":71,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":4},"end":{"row":71,"column":23}},"text":"QLearner_wTargetNet"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":23},"end":{"row":71,"column":58}},"text":"(self.s_len, self.a_len, nn_len=10)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":4},"end":{"row":71,"column":19}},"text":"self.learner = "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":70,"column":4},"end":{"row":70,"column":6}},"text":"# "}]}]],"redo":[]},"/sim_objs.py":{"scrollTop":5346,"scrollLeft":0,"selection":{"start":{"row":294,"column":11},"end":{"row":294,"column":19}},"lastUse":1541559231145,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":64},"end":{"row":53,"column":65}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":65},"end":{"row":53,"column":66}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":66},"end":{"row":53,"column":82}},"text":"self.totaldemand"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":66},"end":{"row":53,"column":67}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":67},"end":{"row":53,"column":68}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":68},"end":{"row":53,"column":69}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":69},"end":{"row":53,"column":70}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":70},"end":{"row":53,"column":71}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":71},"end":{"row":53,"column":72}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":72},"end":{"row":53,"column":73}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":73},"end":{"row":53,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":46},"end":{"row":53,"column":47}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":47},"end":{"row":53,"column":48}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":48},"end":{"row":53,"column":49}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":49},"end":{"row":53,"column":50}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":50},"end":{"row":53,"column":51}},"text":"q"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":51},"end":{"row":53,"column":52}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":52},"end":{"row":53,"column":53}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":53},"end":{"row":53,"column":54}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":54},"end":{"row":53,"column":55}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":55},"end":{"row":53,"column":56}},"text":"{"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":56},"end":{"row":53,"column":57}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":101},"end":{"row":53,"column":102}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":102},"end":{"row":53,"column":103}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":103},"end":{"row":53,"column":104}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":104},"end":{"row":53,"column":105}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":105},"end":{"row":53,"column":106}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":106},"end":{"row":53,"column":107}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":107},"end":{"row":53,"column":108}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":108},"end":{"row":53,"column":113}},"text":"reqed"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":301,"column":8},"end":{"row":301,"column":10}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":304,"column":10},"end":{"row":304,"column":12}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"nl":"\n","lines":["        # print(\"job completed, jid= {}\".format(t.jid) )"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":27}},"text":"Scher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":27},"end":{"row":3,"column":28}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":28},"end":{"row":3,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":29},"end":{"row":3,"column":36}},"text":"RLScher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["# from scheduler import Scher, RLScher"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l, self)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}]],"redo":[]},"/mapper.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":18,"column":20},"end":{"row":18,"column":20}},"lastUse":1541534205173,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":30},"end":{"row":13,"column":31}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":29},"end":{"row":13,"column":30}},"text":"\\"}]}]],"redo":[]},"/sim_exp.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":11,"column":4},"end":{"row":11,"column":37}},"lastUse":1541532808547,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":42}},"text":"  ar_ub = arrival_rate_upperbound(sinfo_m)"},{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":67,"column":0}},"nl":"\n","lines":["    'ar': None, 'njob': 10000, 'nworker': 10, 'wcap': 10,","    'totaldemand_rv': TPareto(1, 10000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 10, 1.1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': TPareto(1, 100, 1.1),","      'normal_dur_rv': TPareto(1, 100, 1.1) }","  }","  mapping_m = {'type': 'spreading'} # {'type': 'packing'}","  sching_m = {'type': 'opportunistic', 'a': 2} # {'type': 'plain', 'a': 0}"]},{"action":"removeText","range":{"start":{"row":55,"column":2},"end":{"row":55,"column":13}},"text":"sinfo_m = {"},{"action":"removeText","range":{"start":{"row":55,"column":2},"end":{"row":56,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":55,"column":2},"end":{"row":55,"column":13}},"text":"sinfo_m = {"},{"action":"insertText","range":{"start":{"row":55,"column":13},"end":{"row":56,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":56,"column":0},"end":{"row":67,"column":0}},"lines":["    'njob': 2000*2, 'nworker': 5, 'wcap': 10,","    'totaldemand_rv': TPareto(10, 1000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 5, 1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': DUniform(100, 100), # DUniform(100, 200) # TPareto(1, 1000, 1),","      'normal_dur_rv': DUniform(1, 1) } } # TPareto(1, 10, 1)","  ar_ub = arrival_rate_upperbound(sinfo_m)","  sinfo_m['ar'] = 1/4*ar_ub # 1/2","  mapping_m = {'type': 'spreading'}"]},{"action":"insertText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":42}},"text":"  sching_m = {'a': 1, 'N': num_mpiprocs-1}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":2},"end":{"row":65,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":65,"column":0},"end":{"row":66,"column":0}},"nl":"\n","lines":["  # sinfo_m['ar'] = 1/4*ar_ub # 1/2"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":71,"column":21},"end":{"row":71,"column":22}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":21},"end":{"row":71,"column":22}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":42},"end":{"row":67,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":67,"column":2},"end":{"row":68,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":68,"column":0},"end":{"row":68,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":2},"end":{"row":68,"column":64}},"text":"{'type': 'expand_if_totaldemand_leq', 'threshold': 10, 'a': 1}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":2},"end":{"row":68,"column":13}},"text":"sching_m = "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":2},"end":{"row":66,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":67,"column":0},"end":{"row":68,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":56},"end":{"row":68,"column":57}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":57},"end":{"row":68,"column":58}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":58},"end":{"row":68,"column":66}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":66},"end":{"row":68,"column":67}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":67},"end":{"row":68,"column":75}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":0},"end":{"row":52,"column":37}},"text":"  return np.random.uniform(0.01, 0.1)"},{"action":"removeLines","range":{"start":{"row":43,"column":0},"end":{"row":52,"column":0}},"nl":"\n","lines":["  # if load < threshold:","  #   return 1","  # else:","  #   p_max = 0.8 # probability of straggling when load is 1","  #   p = p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","  #   # return 1-load if random.uniform(0, 1) < p else 1","  #   return 0.1 if random.uniform(0, 1) < p else 1","  ","  # return np.random.uniform(0.01, 1 - load)"]},{"action":"removeText","range":{"start":{"row":42,"column":2},"end":{"row":42,"column":19}},"text":"# threshold = 0.3"},{"action":"removeText","range":{"start":{"row":42,"column":2},"end":{"row":43,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":42,"column":2},"end":{"row":42,"column":26}},"text":"base_Pr_straggling = 0.3"},{"action":"insertText","range":{"start":{"row":42,"column":26},"end":{"row":43,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":43,"column":0},"end":{"row":49,"column":0}},"lines":["  threshold = 0.6","  if load < threshold:","    return random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1","  else:","    p_max = 0.5","    p = base_Pr_straggling + p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)"]},{"action":"insertText","range":{"start":{"row":49,"column":0},"end":{"row":49,"column":68}},"text":"    return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1"}]}]],"redo":[]},"/zedconfig.json":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":26,"column":31},"end":{"row":26,"column":31}},"lastUse":1541523330678,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":31}},"text":"\"Find:Find In Project\": {"},{"action":"insertText","range":{"start":{"row":28,"column":31},"end":{"row":29,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":29,"column":0},"end":{"row":35,"column":0}},"lines":["          \"mac\": \"Command-Shift-F\",","          \"win\": \"Ctrl-Shift-F\"","      },","      \"Find:All\": {","        \"mac\": \"Command-Shift-F\",","        \"win\": \"Ctrl-Shift-F\""]},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":7}},"text":"      }"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":27,"column":8}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"F"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"F"},{"action":"insertText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":26}},"text":"Shift"},{"action":"insertText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":22}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":22},"end":{"row":34,"column":23}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":23},"end":{"row":34,"column":24}},"text":"t"}]}]],"redo":[]},"/rvs.py":{"scrollTop":6243.5,"scrollLeft":0,"selection":{"start":{"row":400,"column":2},"end":{"row":400,"column":2}},"lastUse":1541521935717,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":523,"column":7},"end":{"row":523,"column":17}},"text":"Pr_X_leq_x"},{"action":"insertText","range":{"start":{"row":523,"column":7},"end":{"row":523,"column":15}},"text":"Pr_X_g_x"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":4},"end":{"row":524,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":525,"column":4},"end":{"row":525,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":524,"column":20},"end":{"row":524,"column":23}},"text":"cdf"},{"action":"insertText","range":{"start":{"row":524,"column":20},"end":{"row":524,"column":21}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":21},"end":{"row":524,"column":22}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":22},"end":{"row":524,"column":23}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":23},"end":{"row":524,"column":24}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":526,"column":0},"end":{"row":527,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":526,"column":20},"end":{"row":526,"column":29}},"text":"X.tail(x)"},{"action":"insertText","range":{"start":{"row":526,"column":20},"end":{"row":526,"column":28}},"text":"Pr_X_g_x"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":524,"column":27},"end":{"row":524,"column":28}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":31},"end":{"row":524,"column":32}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":518,"column":26},"end":{"row":518,"column":27}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":518,"column":30},"end":{"row":518,"column":31}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":499,"column":2},"end":{"row":500,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":500,"column":0},"end":{"row":500,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":2},"end":{"row":501,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":501,"column":0},"end":{"row":501,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":2},"end":{"row":500,"column":3}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":3},"end":{"row":500,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":4},"end":{"row":500,"column":5}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":5},"end":{"row":500,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":6},"end":{"row":500,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":7},"end":{"row":500,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":8},"end":{"row":500,"column":9}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":9},"end":{"row":500,"column":10}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":10},"end":{"row":500,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":11},"end":{"row":500,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":12},"end":{"row":500,"column":13}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":11},"end":{"row":500,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":12},"end":{"row":500,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":13},"end":{"row":500,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":14},"end":{"row":500,"column":15}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":17},"end":{"row":501,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":501,"column":0},"end":{"row":501,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":4},"end":{"row":501,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":5},"end":{"row":501,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":6},"end":{"row":501,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":7},"end":{"row":501,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":8},"end":{"row":501,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":9},"end":{"row":501,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":10},"end":{"row":501,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":11},"end":{"row":501,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":12},"end":{"row":501,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":13},"end":{"row":501,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":14},"end":{"row":501,"column":15}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":15},"end":{"row":501,"column":16}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":16},"end":{"row":501,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":17},"end":{"row":501,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":18},"end":{"row":501,"column":19}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":19},"end":{"row":501,"column":20}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":20},"end":{"row":501,"column":21}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":21},"end":{"row":501,"column":22}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":22},"end":{"row":501,"column":23}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":23},"end":{"row":501,"column":24}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":23},"end":{"row":501,"column":24}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":522,"column":12},"end":{"row":522,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":522,"column":13},"end":{"row":522,"column":14}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":12},"end":{"row":528,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":13},"end":{"row":528,"column":14}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":521,"column":10},"end":{"row":521,"column":15}},"text":"ERROR"},{"action":"insertText","range":{"start":{"row":521,"column":10},"end":{"row":521,"column":11}},"text":"W"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":11},"end":{"row":521,"column":12}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":12},"end":{"row":521,"column":13}},"text":"R"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":13},"end":{"row":521,"column":14}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":14},"end":{"row":521,"column":15}},"text":"I"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":15},"end":{"row":521,"column":16}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":16},"end":{"row":521,"column":17}},"text":"G"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":527,"column":10},"end":{"row":527,"column":15}},"text":"ERROR"},{"action":"insertText","range":{"start":{"row":527,"column":10},"end":{"row":527,"column":17}},"text":"WARNING"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":527,"column":6},"end":{"row":527,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":6},"end":{"row":521,"column":8}},"text":"# "}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":14,"column":18},"end":{"row":14,"column":18}},"lastUse":1541429079423,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":23}},"text":"elif [ $1 = 'p' ]; then"},{"action":"insertText","range":{"start":{"row":14,"column":23},"end":{"row":15,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":17}},"text":"$PY plot_scher.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":16}},"text":"plot_scher"},{"action":"insertText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":7},"end":{"row":15,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":8},"end":{"row":15,"column":9}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":9},"end":{"row":15,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":10},"end":{"row":15,"column":11}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":11},"end":{"row":15,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":12},"end":{"row":15,"column":13}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":13},"end":{"row":15,"column":14}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":2},"end":{"row":15,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":19},"end":{"row":16,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":2},"end":{"row":16,"column":17}},"text":"$PY modeling.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":16},"end":{"row":16,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":17},"end":{"row":16,"column":18}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":23}},"text":"elif [ $1 = 'm' ]; then"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":23},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":16}},"text":"$PY sim_exp.py"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":6},"end":{"row":11,"column":10}},"text":"sim_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":9},"end":{"row":11,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":10},"end":{"row":11,"column":11}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":11},"end":{"row":11,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":12},"end":{"row":11,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":14},"end":{"row":11,"column":15}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":15},"end":{"row":11,"column":16}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":16},"end":{"row":11,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":17},"end":{"row":11,"column":18}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":18},"end":{"row":11,"column":19}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":19},"end":{"row":11,"column":20}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":20},"end":{"row":11,"column":21}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":21},"end":{"row":11,"column":22}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":"y"}]}]],"redo":[]},"/sim_wqs_objs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":17,"column":4},"end":{"row":17,"column":4}},"lastUse":1541425789297,"undo":[],"redo":[]},"/srun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"lastUse":1541308205199,"undo":[],"redo":[]},"/plot_scher.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":19,"column":17},"end":{"row":19,"column":17}},"lastUse":1541264912146,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"nl":"\n","lines":["    # for totaldemand in np.logspace(0.01, math.log10(job_totaldemand_rv.mean() ), 10):"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":4},"end":{"row":13,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":36},"end":{"row":13,"column":37}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":35},"end":{"row":13,"column":36}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load1_l.append(load1)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load2_l.append(load2)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":56}},"text":", [load1, load2]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":41}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":13},"end":{"row":18,"column":35}},"text":"load1= {}, load2= {}, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":44},"end":{"row":18,"column":58}},"text":"load1, load2, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"5"},{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":20},"end":{"row":38,"column":21}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":5,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":42}},"text":"learner = QLearner(s_len, a_len, nn_len)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":42}},"text":"QLearner(s_len, a_len, nn_len)"},{"action":"insertText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":84}},"text":"PolicyGradLearner(self.s_len, self.a_len, nn_len=10, w_actorcritic=True)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":30},"end":{"row":4,"column":35}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":37},"end":{"row":4,"column":42}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"},{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":39}},"text":"STATE_LEN"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":22}},"text":"load1_l, load2_l, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":29},"end":{"row":11,"column":30}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":28},"end":{"row":11,"column":29}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":27},"end":{"row":11,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":26},"end":{"row":11,"column":27}},"text":","}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":25},"end":{"row":11,"column":26}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":24},"end":{"row":11,"column":25}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":23},"end":{"row":11,"column":24}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":","}]}]],"redo":[]},"/modeling_w_k.py":{"scrollTop":242,"scrollLeft":0,"selection":{"start":{"row":34,"column":21},"end":{"row":34,"column":21}},"lastUse":1541105560945,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":31},"end":{"row":98,"column":32}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":51}},"text":"N, Cap, k, D, S_gen"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"2"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":33},"end":{"row":98,"column":34}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"3"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":35},"end":{"row":98,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":36},"end":{"row":98,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":104,"column":4},"end":{"row":104,"column":46}},"text":"E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":104,"column":0},"end":{"row":105,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":35},"end":{"row":102,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":102,"column":0},"end":{"row":102,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":3}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":3}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":44}},"text":"E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":44},"end":{"row":103,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":2},"end":{"row":103,"column":3}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":3},"end":{"row":103,"column":4}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":4},"end":{"row":103,"column":5}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":5},"end":{"row":103,"column":6}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":6},"end":{"row":103,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":7},"end":{"row":103,"column":8}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":8},"end":{"row":103,"column":9}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":104,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":104,"column":0},"end":{"row":104,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":8},"end":{"row":103,"column":9}},"text":"\""}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":103,"column":10}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":103,"column":13}},"text":"E_sl"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":13},"end":{"row":103,"column":14}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":14},"end":{"row":103,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":15},"end":{"row":103,"column":16}},"text":"{"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":16},"end":{"row":103,"column":17}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":18},"end":{"row":103,"column":19}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":19},"end":{"row":103,"column":20}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":20},"end":{"row":103,"column":21}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":21},"end":{"row":103,"column":22}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":22},"end":{"row":103,"column":23}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":23},"end":{"row":103,"column":24}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":24},"end":{"row":103,"column":25}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":25},"end":{"row":103,"column":26}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":26},"end":{"row":103,"column":27}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":27},"end":{"row":103,"column":28}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":26},"end":{"row":103,"column":30}},"text":"E_sl"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":106,"column":11},"end":{"row":106,"column":12}},"text":"\\"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":106,"column":12},"end":{"row":106,"column":13}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":109,"column":4},"end":{"row":109,"column":6}},"text":"# "},{"action":"insertText","range":{"start":{"row":110,"column":4},"end":{"row":110,"column":6}},"text":"# "}]}]],"redo":[]},"/__pycache__/rvs.cpython-35.pyc":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"lastUse":1541014162533,"undo":[],"redo":[]},"/modeling.py":{"scrollTop":791,"scrollLeft":0,"selection":{"start":{"row":50,"column":0},"end":{"row":50,"column":0}},"lastUse":1541011386653,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"/"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":11},"end":{"row":57,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"},{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":12},"end":{"row":57,"column":13}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":13},"end":{"row":57,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":17},"end":{"row":57,"column":18}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":18},"end":{"row":57,"column":19}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":19},"end":{"row":57,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":20},"end":{"row":57,"column":21}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":21},"end":{"row":57,"column":22}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":24},"end":{"row":57,"column":25}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":23},"end":{"row":58,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":10}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":13},"end":{"row":68,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":14},"end":{"row":68,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":15},"end":{"row":68,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":16},"end":{"row":68,"column":19}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":8}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":8},"end":{"row":68,"column":9}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":9},"end":{"row":68,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":25},"end":{"row":58,"column":26}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"5"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":27},"end":{"row":18,"column":28}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":43},"end":{"row":66,"column":44}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":41},"end":{"row":66,"column":42}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":42},"end":{"row":66,"column":43}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":38},"end":{"row":65,"column":39}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":36},"end":{"row":65,"column":37}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":37},"end":{"row":65,"column":38}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":41},"end":{"row":75,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":39},"end":{"row":75,"column":40}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":40},"end":{"row":75,"column":41}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":36},"end":{"row":74,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":34},"end":{"row":74,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":35},"end":{"row":74,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":36},"end":{"row":60,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":34},"end":{"row":60,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":35},"end":{"row":60,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":14},"end":{"row":54,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":15},"end":{"row":54,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":16},"end":{"row":54,"column":17}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":12},"end":{"row":54,"column":13}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":13},"end":{"row":54,"column":14}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":5},"end":{"row":54,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"Z"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":7},"end":{"row":54,"column":8}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":8},"end":{"row":54,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":9},"end":{"row":54,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":10},"end":{"row":54,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":11},"end":{"row":54,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":3},"end":{"row":54,"column":4}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":4},"end":{"row":54,"column":5}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":42},"end":{"row":54,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":2},"end":{"row":54,"column":3}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":23},"end":{"row":49,"column":24}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":23}},"text":"D.mean()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":30},"end":{"row":48,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":28},"end":{"row":48,"column":29}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":29},"end":{"row":48,"column":30}},"text":","}]}]]},"/w_queues/deneme.py":{"scrollTop":672,"scrollLeft":0,"selection":{"start":{"row":87,"column":4},"end":{"row":87,"column":49}},"lastUse":1540925087109,"undo":[],"redo":[]},"/w_queues/mgs_wred_model.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"lastUse":1540844978153,"undo":[],"redo":[]}},"window":{"width":1440,"height":877,"top":23,"left":0,"isMaximized":true}}