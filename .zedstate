{"split":"2-0","session.current":["/rlearning.py","/experience_replay.py"],"session.open":{"/rlearning.py":{"scrollTop":4135.5,"scrollLeft":0,"selection":{"start":{"row":240,"column":48},"end":{"row":240,"column":48}},"lastUse":1541540354243,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":248,"column":12},"end":{"row":248,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":247,"column":25},"end":{"row":248,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":248,"column":0},"end":{"row":248,"column":6}},"text":"      "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":6},"end":{"row":248,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":7},"end":{"row":248,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":8},"end":{"row":248,"column":9}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":9},"end":{"row":248,"column":10}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":10},"end":{"row":248,"column":11}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":10},"end":{"row":248,"column":11}},"text":"W"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":11},"end":{"row":248,"column":12}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":12},"end":{"row":248,"column":13}},"text":"R"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":13},"end":{"row":248,"column":14}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":14},"end":{"row":248,"column":15}},"text":"I"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":15},"end":{"row":248,"column":16}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":16},"end":{"row":248,"column":17}},"text":"G"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":17},"end":{"row":248,"column":18}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":18},"end":{"row":248,"column":19}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":248,"column":18},"end":{"row":248,"column":19}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":248,"column":17},"end":{"row":248,"column":18}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":17},"end":{"row":248,"column":18}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":18},"end":{"row":248,"column":19}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":19},"end":{"row":248,"column":20}},"text":"\""}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":20},"end":{"row":248,"column":21}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":20},"end":{"row":248,"column":27}},"text":"sarsa_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":27},"end":{"row":248,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":28},"end":{"row":248,"column":29}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":29},"end":{"row":248,"column":30}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":30},"end":{"row":248,"column":31}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":31},"end":{"row":248,"column":32}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":32},"end":{"row":248,"column":33}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":33},"end":{"row":248,"column":34}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":34},"end":{"row":248,"column":35}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":35},"end":{"row":248,"column":36}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":36},"end":{"row":248,"column":37}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":37},"end":{"row":248,"column":38}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":38},"end":{"row":248,"column":39}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":39},"end":{"row":248,"column":40}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":40},"end":{"row":248,"column":41}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":41},"end":{"row":248,"column":42}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":42},"end":{"row":248,"column":43}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":43},"end":{"row":248,"column":44}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":44},"end":{"row":248,"column":45}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":45},"end":{"row":248,"column":46}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":248,"column":46},"end":{"row":248,"column":47}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":291,"column":4},"end":{"row":291,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":292,"column":4},"end":{"row":292,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":327,"column":4},"end":{"row":327,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":328,"column":4},"end":{"row":328,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":266,"column":46},"end":{"row":267,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":267,"column":0},"end":{"row":267,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":267,"column":4},"end":{"row":267,"column":20}},"text":"self.eps *= 0.99"},{"action":"insertText","range":{"start":{"row":267,"column":20},"end":{"row":268,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":268,"column":0},"end":{"row":268,"column":31}},"text":"    log(INFO, \"\", eps=self.eps)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":21},"end":{"row":240,"column":49}},"text":"tf.train.AdamOptimizer(0.01)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":49},"end":{"row":240,"column":50}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":50},"end":{"row":240,"column":51}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":51},"end":{"row":240,"column":52}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":240,"column":52},"end":{"row":240,"column":75}},"text":"tf.train.AdamOptimizer("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":240,"column":56},"end":{"row":240,"column":57}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":46},"end":{"row":240,"column":47}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":240,"column":47},"end":{"row":240,"column":48}},"text":"0"}]}]],"redo":[]},"/sim_objs.py":{"scrollTop":5371,"scrollLeft":0,"selection":{"start":{"row":285,"column":36},"end":{"row":285,"column":36}},"lastUse":1541534222822,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":64},"end":{"row":53,"column":65}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":65},"end":{"row":53,"column":66}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":66},"end":{"row":53,"column":82}},"text":"self.totaldemand"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":66},"end":{"row":53,"column":67}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":67},"end":{"row":53,"column":68}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":68},"end":{"row":53,"column":69}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":69},"end":{"row":53,"column":70}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":70},"end":{"row":53,"column":71}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":71},"end":{"row":53,"column":72}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":72},"end":{"row":53,"column":73}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":73},"end":{"row":53,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":46},"end":{"row":53,"column":47}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":47},"end":{"row":53,"column":48}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":48},"end":{"row":53,"column":49}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":49},"end":{"row":53,"column":50}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":50},"end":{"row":53,"column":51}},"text":"q"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":51},"end":{"row":53,"column":52}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":52},"end":{"row":53,"column":53}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":53},"end":{"row":53,"column":54}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":54},"end":{"row":53,"column":55}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":55},"end":{"row":53,"column":56}},"text":"{"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":56},"end":{"row":53,"column":57}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":101},"end":{"row":53,"column":102}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":102},"end":{"row":53,"column":103}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":103},"end":{"row":53,"column":104}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":104},"end":{"row":53,"column":105}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":105},"end":{"row":53,"column":106}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":106},"end":{"row":53,"column":107}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":107},"end":{"row":53,"column":108}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":108},"end":{"row":53,"column":113}},"text":"reqed"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":301,"column":8},"end":{"row":301,"column":10}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":304,"column":10},"end":{"row":304,"column":12}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"nl":"\n","lines":["        # print(\"job completed, jid= {}\".format(t.jid) )"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":27}},"text":"Scher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":27},"end":{"row":3,"column":28}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":28},"end":{"row":3,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":29},"end":{"row":3,"column":36}},"text":"RLScher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["# from scheduler import Scher, RLScher"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l, self)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}]],"redo":[]},"/mapper.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":18,"column":20},"end":{"row":18,"column":20}},"lastUse":1541534205173,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":30},"end":{"row":13,"column":31}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":29},"end":{"row":13,"column":30}},"text":"\\"}]}]],"redo":[]},"/scheduler.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":13,"column":25},"end":{"row":13,"column":25}},"lastUse":1541533944851,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":67},"end":{"row":85,"column":68}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":20},"end":{"row":85,"column":21}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":21},"end":{"row":85,"column":22}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":22},"end":{"row":85,"column":23}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":23},"end":{"row":85,"column":24}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":24},"end":{"row":85,"column":25}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":74},"end":{"row":85,"column":75}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":75},"end":{"row":85,"column":76}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":79},"end":{"row":85,"column":80}},"text":"\\"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":80},"end":{"row":86,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":86,"column":0},"end":{"row":86,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":4},"end":{"row":86,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":6},"end":{"row":86,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":8},"end":{"row":86,"column":10}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":10},"end":{"row":86,"column":12}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":12},"end":{"row":86,"column":14}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":14},"end":{"row":86,"column":16}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":16},"end":{"row":86,"column":18}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":18},"end":{"row":86,"column":20}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":20},"end":{"row":86,"column":25}},"text":"list("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":90},"end":{"row":86,"column":91}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":91},"end":{"row":86,"column":92}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":97,"column":29},"end":{"row":97,"column":88}},"text":"np.logspace(0.1, math.log10(job_totaldemand_rv.u_l/10), 10)"},{"action":"insertText","range":{"start":{"row":97,"column":29},"end":{"row":97,"column":42}},"text":"totaldemand_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":28},"end":{"row":5,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":1},"end":{"row":5,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":2},"end":{"row":5,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":3},"end":{"row":5,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":4},"end":{"row":5,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":5},"end":{"row":5,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":6},"end":{"row":5,"column":7}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":7},"end":{"row":5,"column":8}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":8},"end":{"row":5,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":9},"end":{"row":5,"column":10}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":10},"end":{"row":5,"column":11}},"text":"b"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":11},"end":{"row":5,"column":12}},"text":"j"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":12},"end":{"row":5,"column":13}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":13},"end":{"row":5,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":14},"end":{"row":5,"column":15}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":15},"end":{"row":5,"column":16}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":16},"end":{"row":5,"column":17}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":17},"end":{"row":5,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":18},"end":{"row":5,"column":19}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":19},"end":{"row":5,"column":20}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":20},"end":{"row":5,"column":21}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":21},"end":{"row":5,"column":22}},"text":"J"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":22},"end":{"row":5,"column":23}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":23},"end":{"row":5,"column":24}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":24},"end":{"row":6,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":["from sim_objs import Job"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":104,"column":30},"end":{"row":104,"column":38}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":104,"column":30},"end":{"row":104,"column":39}},"text":"get_a_q_l"},{"action":"removeText","range":{"start":{"row":97,"column":32},"end":{"row":97,"column":40}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":97,"column":32},"end":{"row":97,"column":41}},"text":"get_a_q_l"},{"action":"removeText","range":{"start":{"row":90,"column":28},"end":{"row":90,"column":36}},"text":"get_qa_l"},{"action":"insertText","range":{"start":{"row":90,"column":28},"end":{"row":90,"column":37}},"text":"get_a_q_l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":25,"column":32},"end":{"row":25,"column":33}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":25,"column":31},"end":{"row":25,"column":32}},"text":"\\"}]}]],"redo":[]},"/learn_wmpi.py":{"scrollTop":1026,"scrollLeft":0,"selection":{"start":{"row":59,"column":15},"end":{"row":59,"column":15}},"lastUse":1541532832691,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":7},"end":{"row":174,"column":8}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":6},"end":{"row":174,"column":7}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":6},"end":{"row":174,"column":7}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":7},"end":{"row":174,"column":8}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":8},"end":{"row":174,"column":9}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":8},"end":{"row":174,"column":9}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":6},"end":{"row":60,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":6},"end":{"row":49,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":49,"column":6},"end":{"row":49,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":17},"end":{"row":162,"column":18}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":17},"end":{"row":162,"column":18}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":179,"column":4},"end":{"row":179,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":8},"end":{"row":174,"column":9}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":7},"end":{"row":174,"column":8}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":7},"end":{"row":174,"column":8}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":187,"column":0}},"nl":"\n","lines":["import sys","import numpy as np","from mpi4py import MPI","","from rvs import *","from scheduler import *","","def eval_wmpi(rank):","  log(INFO, \"starting;\", rank=rank)","  sys.stdout.flush()","  ","  if rank == 0:","    blog(sinfo_m=sinfo_m)","    sys.stdout.flush()","    ","    schingi__sl_E_std_l = []","    for i, sching_m in enumerate(sching_m_l):","      for p in range(1, num_mpiprocs):","        eval_i = np.array([i], dtype='i')","        comm.Send([eval_i, MPI.INT], dest=p)","      ","      Esl_l, sl_std_l = [], []","      # cum_sl_l = []","      for p in range(1, num_mpiprocs):","        sl_E_std = np.empty(2, dtype=np.float64)","        comm.Recv(sl_E_std, source=p)","        Esl_l.append(sl_E_std[0] )","        sl_std_l.append(sl_E_std[1] )","        # sl_l = np.empty(T, dtype=np.float64)","        # comm.Recv(sl_l, source=p)","        # cum_sl_l += sl_l.tolist()","      log(INFO, \"\", i=i, sching_m=sching_m, Esl=np.mean(Esl_l), sl_std=np.mean(sl_std_l) )","      sys.stdout.flush()","      schingi__sl_E_std_l.append(sl_E_std)","      ","      # x_l = numpy.sort(cum_sl_l)[::-1]","      # y_l = numpy.arange(x_l.size)/x_l.size","      # plot.step(x_l, y_l, label=sching_m['name'], color=next(dark_color), marker=next(marker), linestyle=':')","    # plot.xscale('log')","    # plot.yscale('log')","    # plot.legend()","    # plot.xlabel(r'Slowdown', fontsize=13)","    # plot.ylabel(r'Tail distribution', fontsize=13)","    # plot.savefig(\"sltail_ar{0:.2f}.png\".format(ar) )","    # plot.gcf().clear()","    ","    for p in range(1, num_mpiprocs):","      eval_i = np.array([-1], dtype='i')","      comm.Send([eval_i, MPI.INT], dest=p)","      print(\"Sent req eval_i= {} to p= {}\".format(eval_i, p) )","    return schingi__sl_E_std_l","  else:","    while True:","      eval_i = np.empty(1, dtype='i')","      comm.Recv([eval_i, MPI.INT], source=0)","      eval_i = eval_i[0]","      if eval_i == -1:","        return","      ","      scher = Scher(mapping_m, sching_m_l[eval_i] )","      # log(INFO, \"simulating;\", rank=rank, eval_i=eval_i, scher=scher)","      sys.stdout.flush()","      t_s_l, t_a_l, t_r_l, t_sl_l, load_mean, droprate_mean = sample_traj(sinfo_m, scher)","      print(\"rank= {}, eval_i= {}, a_mean= {}, sl_mean= {}, load_mean= {}, droprate_mean= {}\".format(rank, eval_i, np.mean(t_a_l), np.mean(t_sl_l), load_mean, droprate_mean) )","      ","      sl_E_std = np.array([np.mean(t_sl_l), np.std(t_sl_l) ], dtype=np.float64)","      comm.Send([sl_E_std, MPI.FLOAT], dest=0)","      sys.stdout.flush()","","def learn_wmpi(rank):","  scher = RLScher(sinfo_m, mapping_m, sching_m)","  N, T, s_len = scher.N, scher.T, scher.s_len","  log(INFO, \"starting;\", rank=rank, scher=scher)","  sys.stdout.flush()","  ","  if rank == 0:","    blog(sinfo_m=sinfo_m)","    for i in range(L):","      scher.save(i)","      n_t_s_l, n_t_a_l, n_t_r_l, n_t_sl_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        p = n % (num_mpiprocs-1) + 1","        sim_step = np.array([i], dtype='i')","        comm.Send([sim_step, MPI.INT], dest=p)","      ","      for n in range(N):","        p = n % (num_mpiprocs-1) + 1","        t_s_l = np.empty(T*s_len, dtype=np.float64)","        comm.Recv([t_s_l, MPI.FLOAT], source=p)","        t_a_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_a_l, MPI.FLOAT], source=p)","        t_r_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_r_l, MPI.FLOAT], source=p)","        t_sl_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_sl_l, MPI.FLOAT], source=p)","        ","        n_t_s_l[n, :] = t_s_l.reshape((T, s_len))","        n_t_a_l[n, :] = t_a_l.reshape((T, 1))","        n_t_r_l[n, :] = t_r_l.reshape((T, 1))","        n_t_sl_l[n, :] = t_sl_l.reshape((T, 1))","      alog(\"i= {}, a_mean= {}, sl_mean= {}, sl_std= {}\".format(i, np.mean(n_t_a_l), np.mean(n_t_sl_l), np.std(n_t_sl_l) ) )","      scher.learner.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        scher.summarize()","      sys.stdout.flush()","    scher.save(L)","    for p in range(1, num_mpiprocs):","      sim_step = np.array([-1], dtype='i')","      comm.Send([sim_step, MPI.INT], dest=p)","      print(\"Sent req sim_step= {} to p= {}\".format(sim_step, p) )","    sys.stdout.flush()","    return scher","  else:","    while True:","      sim_step = np.empty(1, dtype='i')","      comm.Recv([sim_step, MPI.INT], source=0)","      sim_step = sim_step[0]","      if sim_step == -1:","        break","      ","      scher.restore(sim_step)","      t_s_l, t_a_l, t_r_l, t_sl_l, load_mean, droprate_mean = sample_traj(sinfo_m, scher)","      print(\"rank= {}, sim_step= {}, a_mean= {}, r_mean= {}, sl_mean= {}, load_mean= {}, droprate_mean= {}\".format(rank, sim_step, np.mean(t_a_l), np.mean(t_r_l), np.mean(t_sl_l), load_mean, droprate_mean) )","      comm.Send([t_s_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_a_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_r_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_sl_l.flatten(), MPI.FLOAT], dest=0)","      sys.stdout.flush()","    scher.restore(L)","    return scher","","def slowdown(load):","  # return np.random.uniform(0.01, 0.1)","  '''","  threshold = 0.2","  if load < threshold:","    # return 1","    return 0.5 if random.uniform(0, 1) < 0.2 else 1","  else:","    p_max = 0.8 # probability of straggling when load is 1","    p = p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","    # return 0.05*(1-load) if random.uniform(0, 1) < p else 1","    # return 0.05 if random.uniform(0, 1) < p else 1","    ","    # return random.uniform(0, 0.1)*random.uniform(0, 1-p) if random.uniform(0, 1) < p else 1","    return random.uniform(0, 0.1)*random.uniform(0, 1) if random.uniform(0, 1) < p else 1","  '''","  base_Pr_straggling = 0.3","  threshold = 0.6","  if load < threshold:","    return random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1","  else:","    p_max = 0.5","    p = base_Pr_straggling + p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","    return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1","","if __name__ == \"__main__\":","  comm = MPI.COMM_WORLD","  num_mpiprocs = comm.Get_size()","  rank = comm.Get_rank()","  ","  sinfo_m = {","    'njob': 2000*5, 'nworker': 5, 'wcap': 10,","    'totaldemand_rv': TPareto(10, 1000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 5, 1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': DUniform(100, 100), # DUniform(100, 200) # TPareto(1, 1000, 1),","      'normal_dur_rv': DUniform(1, 1) } } # TPareto(1, 10, 1)","  ar_ub = arrival_rate_upperbound(sinfo_m)","  sinfo_m['ar'] = 1/4*ar_ub # 1/2","  mapping_m = {'type': 'spreading'}","  sching_m = {'a': 1, 'N': num_mpiprocs-1}","  L = 150 # number of learning steps","  ","  # {'type': 'plain', 'a': 1},","  # {'type': 'opportunistic', 'mapping_type': 'spreading', 'a': 1}","  sching_m_l = [","    {'type': 'plain', 'a': 0},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 10, 'a': 1},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 100, 'a': 1},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 1000, 'a': 1} ]","  eval_wmpi(rank)","  ","  learn_wmpi(rank)","  "]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":10}},"text":"import sys"},{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":188,"column":0}},"lines":["import numpy as np","from mpi4py import MPI","","from rvs import *","from scheduler import *","","def eval_wmpi(rank):","  log(INFO, \"starting;\", rank=rank)","  sys.stdout.flush()","  ","  if rank == 0:","    blog(sinfo_m=sinfo_m)","    sys.stdout.flush()","    ","    schingi__sl_E_std_l = []","    for i, sching_m in enumerate(sching_m_l):","      for p in range(1, num_mpiprocs):","        eval_i = np.array([i], dtype='i')","        comm.Send([eval_i, MPI.INT], dest=p)","      ","      Esl_l, sl_std_l = [], []","      # cum_sl_l = []","      for p in range(1, num_mpiprocs):","        sl_E_std = np.empty(2, dtype=np.float64)","        comm.Recv(sl_E_std, source=p)","        Esl_l.append(sl_E_std[0] )","        sl_std_l.append(sl_E_std[1] )","        # sl_l = np.empty(T, dtype=np.float64)","        # comm.Recv(sl_l, source=p)","        # cum_sl_l += sl_l.tolist()","      log(INFO, \"\", i=i, sching_m=sching_m, Esl=np.mean(Esl_l), sl_std=np.mean(sl_std_l) )","      sys.stdout.flush()","      schingi__sl_E_std_l.append(sl_E_std)","      ","      # x_l = numpy.sort(cum_sl_l)[::-1]","      # y_l = numpy.arange(x_l.size)/x_l.size","      # plot.step(x_l, y_l, label=sching_m['name'], color=next(dark_color), marker=next(marker), linestyle=':')","    # plot.xscale('log')","    # plot.yscale('log')","    # plot.legend()","    # plot.xlabel(r'Slowdown', fontsize=13)","    # plot.ylabel(r'Tail distribution', fontsize=13)","    # plot.savefig(\"sltail_ar{0:.2f}.png\".format(ar) )","    # plot.gcf().clear()","    ","    for p in range(1, num_mpiprocs):","      eval_i = np.array([-1], dtype='i')","      comm.Send([eval_i, MPI.INT], dest=p)","      print(\"Sent req eval_i= {} to p= {}\".format(eval_i, p) )","    return schingi__sl_E_std_l","  else:","    while True:","      eval_i = np.empty(1, dtype='i')","      comm.Recv([eval_i, MPI.INT], source=0)","      eval_i = eval_i[0]","      if eval_i == -1:","        return","      ","      scher = Scher(mapping_m, sching_m_l[eval_i] )","      # log(INFO, \"simulating;\", rank=rank, eval_i=eval_i, scher=scher)","      sys.stdout.flush()","      t_s_l, t_a_l, t_r_l, t_sl_l, load_mean, droprate_mean = sample_traj(sinfo_m, scher)","      print(\"rank= {}, eval_i= {}, a_mean= {}, sl_mean= {}, load_mean= {}, droprate_mean= {}\".format(rank, eval_i, np.mean(t_a_l), np.mean(t_sl_l), load_mean, droprate_mean) )","      ","      sl_E_std = np.array([np.mean(t_sl_l), np.std(t_sl_l) ], dtype=np.float64)","      comm.Send([sl_E_std, MPI.FLOAT], dest=0)","      sys.stdout.flush()","","def learn_wmpi(rank):","  scher = RLScher(sinfo_m, mapping_m, sching_m)","  N, T, s_len = scher.N, scher.T, scher.s_len","  log(INFO, \"starting;\", rank=rank, scher=scher)","  sys.stdout.flush()","  ","  if rank == 0:","    blog(sinfo_m=sinfo_m)","    for i in range(L):","      scher.save(i)","      n_t_s_l, n_t_a_l, n_t_r_l, n_t_sl_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        p = n % (num_mpiprocs-1) + 1","        sim_step = np.array([i], dtype='i')","        comm.Send([sim_step, MPI.INT], dest=p)","      ","      for n in range(N):","        p = n % (num_mpiprocs-1) + 1","        t_s_l = np.empty(T*s_len, dtype=np.float64)","        comm.Recv([t_s_l, MPI.FLOAT], source=p)","        t_a_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_a_l, MPI.FLOAT], source=p)","        t_r_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_r_l, MPI.FLOAT], source=p)","        t_sl_l = np.empty(T, dtype=np.float64)","        comm.Recv([t_sl_l, MPI.FLOAT], source=p)","        ","        n_t_s_l[n, :] = t_s_l.reshape((T, s_len))","        n_t_a_l[n, :] = t_a_l.reshape((T, 1))","        n_t_r_l[n, :] = t_r_l.reshape((T, 1))","        n_t_sl_l[n, :] = t_sl_l.reshape((T, 1))","      alog(\"i= {}, a_mean= {}, sl_mean= {}, sl_std= {}\".format(i, np.mean(n_t_a_l), np.mean(n_t_sl_l), np.std(n_t_sl_l) ) )","      scher.learner.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        scher.summarize()","      sys.stdout.flush()","    scher.save(L)","    for p in range(1, num_mpiprocs):","      sim_step = np.array([-1], dtype='i')","      comm.Send([sim_step, MPI.INT], dest=p)","      print(\"Sent req sim_step= {} to p= {}\".format(sim_step, p) )","    sys.stdout.flush()","    return scher","  else:","    while True:","      sim_step = np.empty(1, dtype='i')","      comm.Recv([sim_step, MPI.INT], source=0)","      sim_step = sim_step[0]","      if sim_step == -1:","        break","      ","      scher.restore(sim_step)","      t_s_l, t_a_l, t_r_l, t_sl_l, load_mean, droprate_mean = sample_traj(sinfo_m, scher)","      print(\"rank= {}, sim_step= {}, a_mean= {}, r_mean= {}, sl_mean= {}, load_mean= {}, droprate_mean= {}\".format(rank, sim_step, np.mean(t_a_l), np.mean(t_r_l), np.mean(t_sl_l), load_mean, droprate_mean) )","      comm.Send([t_s_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_a_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_r_l.flatten(), MPI.FLOAT], dest=0)","      comm.Send([t_sl_l.flatten(), MPI.FLOAT], dest=0)","      sys.stdout.flush()","    scher.restore(L)","    return scher","","def slowdown(load):","  # return np.random.uniform(0.01, 0.1)","  '''","  threshold = 0.2","  if load < threshold:","    # return 1","    return 0.5 if random.uniform(0, 1) < 0.2 else 1","  else:","    p_max = 0.8 # probability of straggling when load is 1","    p = p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","    # return 0.05*(1-load) if random.uniform(0, 1) < p else 1","    # return 0.05 if random.uniform(0, 1) < p else 1","    ","    # return random.uniform(0, 0.1)*random.uniform(0, 1-p) if random.uniform(0, 1) < p else 1","    return random.uniform(0, 0.1)*random.uniform(0, 1) if random.uniform(0, 1) < p else 1","  '''","  base_Pr_straggling = 0.2","  threshold = 0.5","  if load < threshold:","    return random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1","  else:","    p_max = 0.4","    p = base_Pr_straggling + p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","    # return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1","    return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1","","if __name__ == \"__main__\":","  comm = MPI.COMM_WORLD","  num_mpiprocs = comm.Get_size()","  rank = comm.Get_rank()","  ","  sinfo_m = {","    'njob': 2000*5, 'nworker': 5, 'wcap': 10,","    'totaldemand_rv': TPareto(10, 1000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 5, 1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': DUniform(100, 100), # DUniform(100, 200) # TPareto(1, 1000, 1),","      'normal_dur_rv': DUniform(1, 1) } } # TPareto(1, 10, 1)","  ar_ub = arrival_rate_upperbound(sinfo_m)","  sinfo_m['ar'] = 1/2*ar_ub","  mapping_m = {'type': 'spreading'}","  sching_m = {'a': 1, 'N': num_mpiprocs-1}","  L = 150 # number of learning steps","  ","  # {'type': 'plain', 'a': 1},","  # {'type': 'opportunistic', 'mapping_type': 'spreading', 'a': 1}","  sching_m_l = [","    {'type': 'plain', 'a': 0},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 10, 'a': 1},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 100, 'a': 1},","    {'type': 'expand_if_totaldemand_leq', 'threshold': 1000, 'a': 1} ]","  eval_wmpi(rank)","  ","  learn_wmpi(rank)","  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":148,"column":16},"end":{"row":148,"column":17}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":148,"column":16},"end":{"row":148,"column":17}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":154,"column":0},"end":{"row":155,"column":0}},"nl":"\n","lines":["    # return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":163,"column":31},"end":{"row":163,"column":32}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":171,"column":20},"end":{"row":171,"column":21}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":171,"column":20},"end":{"row":171,"column":21}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":171,"column":20},"end":{"row":171,"column":21}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":171,"column":20},"end":{"row":171,"column":21}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":163,"column":31},"end":{"row":163,"column":32}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":163,"column":32},"end":{"row":163,"column":33}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":163,"column":32},"end":{"row":163,"column":33}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":180,"column":55},"end":{"row":180,"column":56}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":180,"column":55},"end":{"row":180,"column":56}},"text":"2"}]}]],"redo":[]},"/sim_exp.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":11,"column":4},"end":{"row":11,"column":37}},"lastUse":1541532808547,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":42}},"text":"  ar_ub = arrival_rate_upperbound(sinfo_m)"},{"action":"removeLines","range":{"start":{"row":56,"column":0},"end":{"row":67,"column":0}},"nl":"\n","lines":["    'ar': None, 'njob': 10000, 'nworker': 10, 'wcap': 10,","    'totaldemand_rv': TPareto(1, 10000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 10, 1.1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': TPareto(1, 100, 1.1),","      'normal_dur_rv': TPareto(1, 100, 1.1) }","  }","  mapping_m = {'type': 'spreading'} # {'type': 'packing'}","  sching_m = {'type': 'opportunistic', 'a': 2} # {'type': 'plain', 'a': 0}"]},{"action":"removeText","range":{"start":{"row":55,"column":2},"end":{"row":55,"column":13}},"text":"sinfo_m = {"},{"action":"removeText","range":{"start":{"row":55,"column":2},"end":{"row":56,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":55,"column":2},"end":{"row":55,"column":13}},"text":"sinfo_m = {"},{"action":"insertText","range":{"start":{"row":55,"column":13},"end":{"row":56,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":56,"column":0},"end":{"row":67,"column":0}},"lines":["    'njob': 2000*2, 'nworker': 5, 'wcap': 10,","    'totaldemand_rv': TPareto(10, 1000, 1.1),","    'demandperslot_mean_rv': TPareto(0.1, 5, 1),","    'k_rv': DUniform(1, 1),","    'straggle_m': {","      'slowdown': slowdown,","      'straggle_dur_rv': DUniform(100, 100), # DUniform(100, 200) # TPareto(1, 1000, 1),","      'normal_dur_rv': DUniform(1, 1) } } # TPareto(1, 10, 1)","  ar_ub = arrival_rate_upperbound(sinfo_m)","  sinfo_m['ar'] = 1/4*ar_ub # 1/2","  mapping_m = {'type': 'spreading'}"]},{"action":"insertText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":42}},"text":"  sching_m = {'a': 1, 'N': num_mpiprocs-1}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":2},"end":{"row":65,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":65,"column":0},"end":{"row":66,"column":0}},"nl":"\n","lines":["  # sinfo_m['ar'] = 1/4*ar_ub # 1/2"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":71,"column":21},"end":{"row":71,"column":22}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":21},"end":{"row":71,"column":22}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":42},"end":{"row":67,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":67,"column":0},"end":{"row":67,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":67,"column":2},"end":{"row":68,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":68,"column":0},"end":{"row":68,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":2},"end":{"row":68,"column":64}},"text":"{'type': 'expand_if_totaldemand_leq', 'threshold': 10, 'a': 1}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":2},"end":{"row":68,"column":13}},"text":"sching_m = "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":2},"end":{"row":66,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":67,"column":0},"end":{"row":68,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":56},"end":{"row":68,"column":57}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":57},"end":{"row":68,"column":58}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":58},"end":{"row":68,"column":66}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":66},"end":{"row":68,"column":67}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":67},"end":{"row":68,"column":75}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":52,"column":0},"end":{"row":52,"column":37}},"text":"  return np.random.uniform(0.01, 0.1)"},{"action":"removeLines","range":{"start":{"row":43,"column":0},"end":{"row":52,"column":0}},"nl":"\n","lines":["  # if load < threshold:","  #   return 1","  # else:","  #   p_max = 0.8 # probability of straggling when load is 1","  #   p = p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)","  #   # return 1-load if random.uniform(0, 1) < p else 1","  #   return 0.1 if random.uniform(0, 1) < p else 1","  ","  # return np.random.uniform(0.01, 1 - load)"]},{"action":"removeText","range":{"start":{"row":42,"column":2},"end":{"row":42,"column":19}},"text":"# threshold = 0.3"},{"action":"removeText","range":{"start":{"row":42,"column":2},"end":{"row":43,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":42,"column":2},"end":{"row":42,"column":26}},"text":"base_Pr_straggling = 0.3"},{"action":"insertText","range":{"start":{"row":42,"column":26},"end":{"row":43,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":43,"column":0},"end":{"row":49,"column":0}},"lines":["  threshold = 0.6","  if load < threshold:","    return random.uniform(0, 0.1) if random.uniform(0, 1) < base_Pr_straggling else 1","  else:","    p_max = 0.5","    p = base_Pr_straggling + p_max/(math.e**(1-threshold) - 1) * (math.e**(load-threshold) - 1)"]},{"action":"insertText","range":{"start":{"row":49,"column":0},"end":{"row":49,"column":68}},"text":"    return random.uniform(0, 0.1) if random.uniform(0, 1) < p else 1"}]}]],"redo":[]},"/experience_replay.py":{"scrollTop":1842.5,"scrollLeft":0,"selection":{"start":{"row":103,"column":16},"end":{"row":103,"column":32}},"lastUse":1541530470040,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":148,"column":136},"end":{"row":148,"column":137}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":148,"column":123},"end":{"row":148,"column":127}},"text":"mean"},{"action":"insertText","range":{"start":{"row":148,"column":123},"end":{"row":148,"column":124}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":148,"column":124},"end":{"row":148,"column":125}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":148,"column":125},"end":{"row":148,"column":126}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":199,"column":19},"end":{"row":200,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":200,"column":0},"end":{"row":200,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":146,"column":30},"end":{"row":146,"column":35}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":147,"column":79},"end":{"row":147,"column":84}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":142,"column":14},"end":{"row":142,"column":16}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":139,"column":12},"end":{"row":140,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":140,"column":0},"end":{"row":140,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":139,"column":0},"end":{"row":140,"column":0}},"nl":"\n","lines":["            "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":139,"column":12},"end":{"row":139,"column":14}},"text":"# "},{"action":"insertText","range":{"start":{"row":140,"column":12},"end":{"row":140,"column":14}},"text":"# "},{"action":"insertText","range":{"start":{"row":141,"column":12},"end":{"row":141,"column":14}},"text":"# "},{"action":"insertText","range":{"start":{"row":142,"column":12},"end":{"row":142,"column":14}},"text":"# "},{"action":"insertText","range":{"start":{"row":143,"column":12},"end":{"row":143,"column":14}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":28},"end":{"row":35,"column":29}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":29},"end":{"row":35,"column":30}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":26},"end":{"row":36,"column":27}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":27},"end":{"row":36,"column":28}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":37,"column":24},"end":{"row":37,"column":25}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":37,"column":25},"end":{"row":37,"column":26}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":28},"end":{"row":35,"column":29}},"text":"5"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":29},"end":{"row":35,"column":30}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":30},"end":{"row":35,"column":31}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":31},"end":{"row":35,"column":32}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":32},"end":{"row":35,"column":33}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":26},"end":{"row":36,"column":30}},"text":"5000"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":30},"end":{"row":36,"column":31}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":31},"end":{"row":36,"column":32}},"text":"+"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":32},"end":{"row":36,"column":33}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":33},"end":{"row":36,"column":34}},"text":"M"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":36,"column":34},"end":{"row":36,"column":35}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":35,"column":31},"end":{"row":35,"column":32}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":31},"end":{"row":35,"column":32}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":37,"column":25},"end":{"row":37,"column":26}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":37,"column":24},"end":{"row":37,"column":25}},"text":"#"}]}]],"redo":[]},"/learning_utils.py":{"scrollTop":318.5,"scrollLeft":0,"selection":{"start":{"row":46,"column":23},"end":{"row":46,"column":23}},"lastUse":1541523364533,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":100}},"text":"# ############################################  utils  ########################################### #"},{"action":"insertText","range":{"start":{"row":1,"column":100},"end":{"row":2,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":2,"column":0},"end":{"row":51,"column":0}},"lines":["def sample_traj(sinfo_m, scher):","  def reward(slowdown):","    # return 1/slowdown","    # return 10 if slowdown < 1.5 else -10","    ","    ## The following allows Q-learning to converge","    # if slowdown < 1.1:","    #   return 10","    # elif slowdown < 1.5:","    #   return 10/slowdown","    # else:","    #   return -slowdown","    ","    return -slowdown","    ","    # if slowdown < 2:","    #   return 10/slowdown","    # else:","    #   return -10*slowdown","    ","  env = simpy.Environment()","  cl = Cluster(env, scher=scher, **sinfo_m)","  jg = JobGen(env, out=cl, **sinfo_m)","  env.run(until=cl.wait_for_alljobs)","  ","  T = sinfo_m['njob']","  t_s_l, t_a_l, t_r_l, t_sl_l = np.zeros((T, scher.s_len)), np.zeros((T, 1)), np.zeros((T, 1)), np.zeros((T, 1))","  ","  # t = 0","  # for jid, jinfo_m in sorted(cl.jid_info_m.items(), key=itemgetter(0) ):","  #   # blog(t=t, jid=jid, jinfo_m=jinfo_m)","  #   if 'fate' in jinfo_m and jinfo_m['fate'] == 'finished':","  for t in range(T):","    jinfo_m = cl.jid_info_m[t+1]","    t_s_l[t, :] = jinfo_m['s']","    t_a_l[t, :] = jinfo_m['a']","    sl = (jinfo_m['wait_time'] + jinfo_m['run_time'] )/jinfo_m['expected_run_time']","    t_r_l[t, :] = reward(sl)","    t_sl_l[t, :] = sl","  ","  return t_s_l, t_a_l, t_r_l, t_sl_l, \\","         np.mean([w.avg_load for w in cl.w_l] ), \\","         0","         # sum([1 for _, jinfo_m in cl.jid_info_m.items() if 'fate' in jinfo_m and jinfo_m['fate'] == 'dropped'] )/len(cl.jid_info_m)","","def evaluate(sinfo_m, scher):","  alog(\"scher= {}\".format(scher) )","  for _ in range(3):","    t_s_l, t_a_l, t_r_l, t_sl_l = sample_traj(sinfo_m, scher)"]},{"action":"insertText","range":{"start":{"row":51,"column":0},"end":{"row":51,"column":101}},"text":"    print(\"avg_s= {}, avg_a= {}, avg_r= {}\".format(np.mean(t_s_l), np.mean(t_a_l), np.mean(t_r_l) ) )"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":["# ############################################  utils  ########################################### #"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":22}},"text":"from sim_objs import *"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":13}},"text":"STATE_LEN = 3"},{"action":"insertText","range":{"start":{"row":2,"column":13},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":10,"column":0}},"lines":["def state(j, wload_l=None):","  if STATE_LEN == 1:","    return [j.totaldemand] # j.k","  elif STATE_LEN == 3:","    # return [j.totaldemand, min(wload_l), max(wload_l) ]","    return [j.totaldemand, np.mean(wload_l), np.std(wload_l) ]","  elif STATE_LEN == 5:"]},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":90}},"text":"    return [j.totaldemand, min(wload_l), max(wload_l), np.mean(wload_l), np.std(wload_l) ]"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":61,"column":101},"end":{"row":62,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":31,"column":2},"end":{"row":31,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":18}},"text":"import numpy as np"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":1,"column":0}},"text":"\n"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":31},"end":{"row":20,"column":32}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":32},"end":{"row":20,"column":33}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":33},"end":{"row":20,"column":34}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":34},"end":{"row":20,"column":35}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":35},"end":{"row":20,"column":36}},"text":"_"}]}]]},"/zedconfig.json":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":26,"column":31},"end":{"row":26,"column":31}},"lastUse":1541523330678,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":31}},"text":"\"Find:Find In Project\": {"},{"action":"insertText","range":{"start":{"row":28,"column":31},"end":{"row":29,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":29,"column":0},"end":{"row":35,"column":0}},"lines":["          \"mac\": \"Command-Shift-F\",","          \"win\": \"Ctrl-Shift-F\"","      },","      \"Find:All\": {","        \"mac\": \"Command-Shift-F\",","        \"win\": \"Ctrl-Shift-F\""]},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":7}},"text":"      }"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":27,"column":8}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"F"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"F"},{"action":"insertText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":26}},"text":"Shift"},{"action":"insertText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":22}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":22},"end":{"row":34,"column":23}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":23},"end":{"row":34,"column":24}},"text":"t"}]}]],"redo":[]},"/rvs.py":{"scrollTop":6243.5,"scrollLeft":0,"selection":{"start":{"row":400,"column":2},"end":{"row":400,"column":2}},"lastUse":1541521935717,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":523,"column":7},"end":{"row":523,"column":17}},"text":"Pr_X_leq_x"},{"action":"insertText","range":{"start":{"row":523,"column":7},"end":{"row":523,"column":15}},"text":"Pr_X_g_x"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":4},"end":{"row":524,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":525,"column":4},"end":{"row":525,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":524,"column":20},"end":{"row":524,"column":23}},"text":"cdf"},{"action":"insertText","range":{"start":{"row":524,"column":20},"end":{"row":524,"column":21}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":21},"end":{"row":524,"column":22}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":22},"end":{"row":524,"column":23}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":23},"end":{"row":524,"column":24}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":526,"column":0},"end":{"row":527,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":526,"column":20},"end":{"row":526,"column":29}},"text":"X.tail(x)"},{"action":"insertText","range":{"start":{"row":526,"column":20},"end":{"row":526,"column":28}},"text":"Pr_X_g_x"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":524,"column":27},"end":{"row":524,"column":28}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":524,"column":31},"end":{"row":524,"column":32}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":518,"column":26},"end":{"row":518,"column":27}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":518,"column":30},"end":{"row":518,"column":31}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":499,"column":2},"end":{"row":500,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":500,"column":0},"end":{"row":500,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":2},"end":{"row":501,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":501,"column":0},"end":{"row":501,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":2},"end":{"row":500,"column":3}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":3},"end":{"row":500,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":4},"end":{"row":500,"column":5}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":5},"end":{"row":500,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":6},"end":{"row":500,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":7},"end":{"row":500,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":8},"end":{"row":500,"column":9}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":9},"end":{"row":500,"column":10}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":10},"end":{"row":500,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":11},"end":{"row":500,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":12},"end":{"row":500,"column":13}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":11},"end":{"row":500,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":12},"end":{"row":500,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":13},"end":{"row":500,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":14},"end":{"row":500,"column":15}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":17},"end":{"row":501,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":501,"column":0},"end":{"row":501,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":4},"end":{"row":501,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":5},"end":{"row":501,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":6},"end":{"row":501,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":7},"end":{"row":501,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":8},"end":{"row":501,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":9},"end":{"row":501,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":10},"end":{"row":501,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":11},"end":{"row":501,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":12},"end":{"row":501,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":13},"end":{"row":501,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":14},"end":{"row":501,"column":15}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":15},"end":{"row":501,"column":16}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":16},"end":{"row":501,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":17},"end":{"row":501,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":18},"end":{"row":501,"column":19}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":19},"end":{"row":501,"column":20}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":20},"end":{"row":501,"column":21}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":21},"end":{"row":501,"column":22}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":22},"end":{"row":501,"column":23}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":23},"end":{"row":501,"column":24}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":23},"end":{"row":501,"column":24}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":522,"column":12},"end":{"row":522,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":522,"column":13},"end":{"row":522,"column":14}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":12},"end":{"row":528,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":13},"end":{"row":528,"column":14}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":521,"column":10},"end":{"row":521,"column":15}},"text":"ERROR"},{"action":"insertText","range":{"start":{"row":521,"column":10},"end":{"row":521,"column":11}},"text":"W"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":11},"end":{"row":521,"column":12}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":12},"end":{"row":521,"column":13}},"text":"R"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":13},"end":{"row":521,"column":14}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":14},"end":{"row":521,"column":15}},"text":"I"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":15},"end":{"row":521,"column":16}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":16},"end":{"row":521,"column":17}},"text":"G"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":527,"column":10},"end":{"row":527,"column":15}},"text":"ERROR"},{"action":"insertText","range":{"start":{"row":527,"column":10},"end":{"row":527,"column":17}},"text":"WARNING"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":527,"column":6},"end":{"row":527,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":6},"end":{"row":521,"column":8}},"text":"# "}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":14,"column":18},"end":{"row":14,"column":18}},"lastUse":1541429079423,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":23}},"text":"elif [ $1 = 'p' ]; then"},{"action":"insertText","range":{"start":{"row":14,"column":23},"end":{"row":15,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":17}},"text":"$PY plot_scher.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":16}},"text":"plot_scher"},{"action":"insertText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":7},"end":{"row":15,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":8},"end":{"row":15,"column":9}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":9},"end":{"row":15,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":10},"end":{"row":15,"column":11}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":11},"end":{"row":15,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":12},"end":{"row":15,"column":13}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":13},"end":{"row":15,"column":14}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":2},"end":{"row":15,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":19},"end":{"row":16,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":2},"end":{"row":16,"column":17}},"text":"$PY modeling.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":16},"end":{"row":16,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":17},"end":{"row":16,"column":18}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":23}},"text":"elif [ $1 = 'm' ]; then"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":23},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":16}},"text":"$PY sim_exp.py"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":6},"end":{"row":11,"column":10}},"text":"sim_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":9},"end":{"row":11,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":10},"end":{"row":11,"column":11}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":11},"end":{"row":11,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":12},"end":{"row":11,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":14},"end":{"row":11,"column":15}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":15},"end":{"row":11,"column":16}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":16},"end":{"row":11,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":17},"end":{"row":11,"column":18}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":18},"end":{"row":11,"column":19}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":19},"end":{"row":11,"column":20}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":20},"end":{"row":11,"column":21}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":21},"end":{"row":11,"column":22}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":"y"}]}]],"redo":[]},"/mrun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":20,"column":15},"end":{"row":20,"column":15}},"lastUse":1541426454829,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":20}},"text":" # 11"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":18},"end":{"row":10,"column":19}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":16},"end":{"row":10,"column":17}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}]],"redo":[]},"/log_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":17,"column":12},"end":{"row":17,"column":12}},"lastUse":1541426210538,"undo":[],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":2}},"text":"# "}]}]]},"/sim_wqs_objs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":17,"column":4},"end":{"row":17,"column":4}},"lastUse":1541425789297,"undo":[],"redo":[]},"/srun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"lastUse":1541308205199,"undo":[],"redo":[]},"/plot_scher.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":19,"column":17},"end":{"row":19,"column":17}},"lastUse":1541264912146,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"nl":"\n","lines":["    # for totaldemand in np.logspace(0.01, math.log10(job_totaldemand_rv.mean() ), 10):"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":4},"end":{"row":13,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":36},"end":{"row":13,"column":37}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":35},"end":{"row":13,"column":36}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load1_l.append(load1)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load2_l.append(load2)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":56}},"text":", [load1, load2]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":41}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":13},"end":{"row":18,"column":35}},"text":"load1= {}, load2= {}, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":44},"end":{"row":18,"column":58}},"text":"load1, load2, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"5"},{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":20},"end":{"row":38,"column":21}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":5,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":42}},"text":"learner = QLearner(s_len, a_len, nn_len)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":42}},"text":"QLearner(s_len, a_len, nn_len)"},{"action":"insertText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":84}},"text":"PolicyGradLearner(self.s_len, self.a_len, nn_len=10, w_actorcritic=True)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":30},"end":{"row":4,"column":35}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":37},"end":{"row":4,"column":42}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"},{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":39}},"text":"STATE_LEN"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":22}},"text":"load1_l, load2_l, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":29},"end":{"row":11,"column":30}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":28},"end":{"row":11,"column":29}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":27},"end":{"row":11,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":26},"end":{"row":11,"column":27}},"text":","}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":25},"end":{"row":11,"column":26}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":24},"end":{"row":11,"column":25}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":23},"end":{"row":11,"column":24}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":","}]}]],"redo":[]},"/modeling_w_k.py":{"scrollTop":242,"scrollLeft":0,"selection":{"start":{"row":34,"column":21},"end":{"row":34,"column":21}},"lastUse":1541105560945,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":31},"end":{"row":98,"column":32}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":51}},"text":"N, Cap, k, D, S_gen"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"2"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":33},"end":{"row":98,"column":34}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"3"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":35},"end":{"row":98,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":36},"end":{"row":98,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":32},"end":{"row":98,"column":33}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":98,"column":34},"end":{"row":98,"column":35}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":104,"column":4},"end":{"row":104,"column":46}},"text":"E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":104,"column":0},"end":{"row":105,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":35},"end":{"row":102,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":102,"column":0},"end":{"row":102,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":3}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":3}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":2},"end":{"row":102,"column":44}},"text":"E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":44},"end":{"row":103,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":2},"end":{"row":103,"column":3}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":3},"end":{"row":103,"column":4}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":4},"end":{"row":103,"column":5}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":5},"end":{"row":103,"column":6}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":6},"end":{"row":103,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":7},"end":{"row":103,"column":8}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":8},"end":{"row":103,"column":9}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":104,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":104,"column":0},"end":{"row":104,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":8},"end":{"row":103,"column":9}},"text":"\""}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":103,"column":10}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":9},"end":{"row":103,"column":13}},"text":"E_sl"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":13},"end":{"row":103,"column":14}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":14},"end":{"row":103,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":15},"end":{"row":103,"column":16}},"text":"{"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":16},"end":{"row":103,"column":17}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":18},"end":{"row":103,"column":19}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":19},"end":{"row":103,"column":20}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":20},"end":{"row":103,"column":21}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":21},"end":{"row":103,"column":22}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":22},"end":{"row":103,"column":23}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":23},"end":{"row":103,"column":24}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":24},"end":{"row":103,"column":25}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":25},"end":{"row":103,"column":26}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":26},"end":{"row":103,"column":27}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":27},"end":{"row":103,"column":28}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":103,"column":26},"end":{"row":103,"column":30}},"text":"E_sl"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":106,"column":11},"end":{"row":106,"column":12}},"text":"\\"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":106,"column":12},"end":{"row":106,"column":13}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":109,"column":4},"end":{"row":109,"column":6}},"text":"# "},{"action":"insertText","range":{"start":{"row":110,"column":4},"end":{"row":110,"column":6}},"text":"# "}]}]],"redo":[]},"/__pycache__/rvs.cpython-35.pyc":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"lastUse":1541014162533,"undo":[],"redo":[]},"/modeling.py":{"scrollTop":791,"scrollLeft":0,"selection":{"start":{"row":50,"column":0},"end":{"row":50,"column":0}},"lastUse":1541011386653,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"/"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":11},"end":{"row":57,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"},{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":12},"end":{"row":57,"column":13}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":13},"end":{"row":57,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":17},"end":{"row":57,"column":18}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":18},"end":{"row":57,"column":19}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":19},"end":{"row":57,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":20},"end":{"row":57,"column":21}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":21},"end":{"row":57,"column":22}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":24},"end":{"row":57,"column":25}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":23},"end":{"row":58,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":10}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":13},"end":{"row":68,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":14},"end":{"row":68,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":15},"end":{"row":68,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":16},"end":{"row":68,"column":19}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":8}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":8},"end":{"row":68,"column":9}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":9},"end":{"row":68,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":25},"end":{"row":58,"column":26}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"5"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":27},"end":{"row":18,"column":28}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":43},"end":{"row":66,"column":44}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":41},"end":{"row":66,"column":42}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":42},"end":{"row":66,"column":43}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":38},"end":{"row":65,"column":39}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":36},"end":{"row":65,"column":37}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":37},"end":{"row":65,"column":38}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":41},"end":{"row":75,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":39},"end":{"row":75,"column":40}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":40},"end":{"row":75,"column":41}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":36},"end":{"row":74,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":34},"end":{"row":74,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":35},"end":{"row":74,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":36},"end":{"row":60,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":34},"end":{"row":60,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":35},"end":{"row":60,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":14},"end":{"row":54,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":15},"end":{"row":54,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":16},"end":{"row":54,"column":17}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":12},"end":{"row":54,"column":13}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":13},"end":{"row":54,"column":14}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":5},"end":{"row":54,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"Z"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":7},"end":{"row":54,"column":8}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":8},"end":{"row":54,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":9},"end":{"row":54,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":10},"end":{"row":54,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":11},"end":{"row":54,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":3},"end":{"row":54,"column":4}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":4},"end":{"row":54,"column":5}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":42},"end":{"row":54,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":2},"end":{"row":54,"column":3}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":23},"end":{"row":49,"column":24}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":23}},"text":"D.mean()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":30},"end":{"row":48,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":28},"end":{"row":48,"column":29}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":29},"end":{"row":48,"column":30}},"text":","}]}]]},"/w_queues/deneme.py":{"scrollTop":672,"scrollLeft":0,"selection":{"start":{"row":87,"column":4},"end":{"row":87,"column":49}},"lastUse":1540925087109,"undo":[],"redo":[]},"/w_queues/mgs_wred_model.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"lastUse":1540844978153,"undo":[],"redo":[]}},"window":{"width":1440,"height":877,"top":23,"left":0,"isMaximized":true}}