{"split":"2-0","session.current":["/modeling_w_k.py","/plot_utils.py"],"session.open":{"/plot_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":21,"column":2},"end":{"row":21,"column":2}},"lastUse":1542142570491,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":1},"end":{"row":10,"column":2}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":2},"end":{"row":10,"column":3}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":3},"end":{"row":10,"column":4}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":5}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":9}},"text":"o"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":7},"end":{"row":10,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":1},"end":{"row":9,"column":2}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":2},"end":{"row":9,"column":3}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":3},"end":{"row":9,"column":4}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":8},"end":{"row":9,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":7},"end":{"row":9,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":6},"end":{"row":9,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":5},"end":{"row":9,"column":6}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":5},"end":{"row":12,"column":6}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":4},"end":{"row":12,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":3},"end":{"row":12,"column":4}},"text":"k"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":2},"end":{"row":12,"column":3}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":1},"end":{"row":12,"column":2}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":6},"end":{"row":13,"column":13}},"text":"_marker"},{"action":"insertText","range":{"start":{"row":13,"column":6},"end":{"row":13,"column":7}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":7},"end":{"row":9,"column":11}},"text":"ycle"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":12}},"text":"ycle"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":8}},"text":"ycle"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":3},"end":{"row":12,"column":7}},"text":"ycle"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":1},"end":{"row":12,"column":2}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":2},"end":{"row":12,"column":3}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":3},"end":{"row":12,"column":4}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":4},"end":{"row":12,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":5},"end":{"row":12,"column":6}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":1},"end":{"row":11,"column":2}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":3}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":3},"end":{"row":11,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":5}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":5},"end":{"row":11,"column":6}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":6},"end":{"row":11,"column":7}},"text":"y"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":7},"end":{"row":11,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":8},"end":{"row":11,"column":9}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":9},"end":{"row":11,"column":10}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":7},"end":{"row":10,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":9}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":5},"end":{"row":9,"column":6}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":6},"end":{"row":9,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":7},"end":{"row":9,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":8},"end":{"row":9,"column":9}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":9}},"text":"NICE_BLUE"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":9}},"text":"NICE_BLUE"},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":15,"column":0}},"lines":["NICE_BLUE = '#66b3ff'","NICE_RED = '#ff9999'","NICE_GREEN = '#99ff99'","NICE_ORANGE = '#ffcc99'",""]},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":82}},"text":"nice_color_cycle = itertools.cycle((NICE_BLUE, NICE_RED, NICE_GREEN, NICE_ORANGE))"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":16,"column":0},"end":{"row":17,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":4},"end":{"row":15,"column":5}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":11},"end":{"row":15,"column":15}},"text":"ycle"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":42},"end":{"row":20,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":21,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":17}},"text":"def prettify(ax):"},{"action":"insertText","range":{"start":{"row":21,"column":17},"end":{"row":22,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":22,"column":0},"end":{"row":25,"column":0}},"lines":["plot.tick_params(top='off', right='off', which='both')","ax.patch.set_alpha(0.2)","ax.spines['right'].set_visible(False)"]},{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":25,"column":35}},"text":"ax.spines['top'].set_visible(False)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":25,"column":2}},"text":"  "}]}]],"redo":[]},"/rvs.py":{"scrollTop":6411.5,"scrollLeft":0,"selection":{"start":{"row":407,"column":38},"end":{"row":407,"column":38}},"lastUse":1542142176546,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":51},"end":{"row":528,"column":52}},"text":"x"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":528,"column":2},"end":{"row":528,"column":8}},"text":"result"},{"action":"insertText","range":{"start":{"row":528,"column":2},"end":{"row":528,"column":3}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":529,"column":0},"end":{"row":530,"column":0}},"nl":"\n","lines":["  s = "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":400,"column":10},"end":{"row":400,"column":11}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":400,"column":11},"end":{"row":400,"column":12}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":401,"column":35},"end":{"row":401,"column":41}},"text":"self.v"},{"action":"insertText","range":{"start":{"row":401,"column":35},"end":{"row":401,"column":43}},"text":"self.v_l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":403,"column":69},"end":{"row":403,"column":75}},"text":"self.v"},{"action":"insertText","range":{"start":{"row":403,"column":69},"end":{"row":403,"column":77}},"text":"self.v_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":10},"end":{"row":402,"column":11}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":11},"end":{"row":402,"column":12}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":403,"column":85},"end":{"row":403,"column":86}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":403,"column":86},"end":{"row":403,"column":87}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":4},"end":{"row":403,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":403,"column":0},"end":{"row":403,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":4},"end":{"row":402,"column":5}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":5},"end":{"row":402,"column":6}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":6},"end":{"row":402,"column":7}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":6},"end":{"row":402,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":5},"end":{"row":402,"column":6}},"text":"u"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":4},"end":{"row":402,"column":5}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":4},"end":{"row":402,"column":5}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":5},"end":{"row":402,"column":6}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":6},"end":{"row":402,"column":7}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":7},"end":{"row":402,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":8},"end":{"row":402,"column":9}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":5},"end":{"row":402,"column":6}},"text":"_"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":4},"end":{"row":402,"column":5}},"text":"w"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":7},"end":{"row":402,"column":8}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":8},"end":{"row":402,"column":9}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":9},"end":{"row":402,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":10},"end":{"row":402,"column":11}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":11},"end":{"row":402,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":402,"column":11},"end":{"row":402,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":11},"end":{"row":402,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":403,"column":18},"end":{"row":403,"column":26}},"text":"sum(w_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":12},"end":{"row":402,"column":20}},"text":"sum(w_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":12},"end":{"row":402,"column":13}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":402,"column":13},"end":{"row":402,"column":14}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":403,"column":18},"end":{"row":403,"column":25}},"text":"sum_w_l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":407,"column":28},"end":{"row":407,"column":29}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":28},"end":{"row":407,"column":29}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":29},"end":{"row":407,"column":30}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":30},"end":{"row":407,"column":31}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":31},"end":{"row":407,"column":32}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":32},"end":{"row":407,"column":33}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":33},"end":{"row":407,"column":34}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":34},"end":{"row":407,"column":35}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":35},"end":{"row":407,"column":36}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":36},"end":{"row":407,"column":37}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":407,"column":37},"end":{"row":407,"column":38}},"text":"x"}]}]],"redo":[]},"/modeling_w_k.py":{"scrollTop":934,"scrollLeft":0,"selection":{"start":{"row":176,"column":80},"end":{"row":176,"column":80}},"lastUse":1542123724623,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":173,"column":70},"end":{"row":173,"column":72}},"text":"\\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":173,"column":73},"end":{"row":173,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":4},"end":{"row":168,"column":5}},"text":"o"},{"action":"insertText","range":{"start":{"row":162,"column":4},"end":{"row":162,"column":5}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":161,"column":73},"end":{"row":162,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":162,"column":0},"end":{"row":162,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":2},"end":{"row":162,"column":3}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":3},"end":{"row":162,"column":4}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":4},"end":{"row":162,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":5},"end":{"row":162,"column":6}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":6},"end":{"row":162,"column":7}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":7},"end":{"row":162,"column":8}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":8},"end":{"row":162,"column":9}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":9},"end":{"row":162,"column":10}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":6},"end":{"row":162,"column":7}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":9},"end":{"row":162,"column":10}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":10},"end":{"row":162,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":11},"end":{"row":162,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":11},"end":{"row":162,"column":12}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":12},"end":{"row":162,"column":13}},"text":"x"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":73},"end":{"row":169,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":169,"column":0},"end":{"row":169,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":169,"column":2},"end":{"row":169,"column":14}},"text":"prettify(ax)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":176,"column":32},"end":{"row":176,"column":53}},"text":", bbox_inches='tight'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":2},"end":{"row":175,"column":7}},"text":"st = "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":176,"column":34},"end":{"row":176,"column":60}},"text":"bbox_extra_artists=(st,), "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":25},"end":{"row":175,"column":26}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":29},"end":{"row":175,"column":30}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":34},"end":{"row":175,"column":35}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":38},"end":{"row":175,"column":39}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":85},"end":{"row":175,"column":86}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":89},"end":{"row":175,"column":90}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":98},"end":{"row":175,"column":99}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":102},"end":{"row":175,"column":103}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":107},"end":{"row":175,"column":108}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":111},"end":{"row":175,"column":112}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":175,"column":121},"end":{"row":175,"column":122}},"text":"$"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":125},"end":{"row":175,"column":126}},"text":"$"}]}]],"redo":[]},"/q_learning.py":{"scrollTop":6521.5,"scrollLeft":0,"selection":{"start":{"row":410,"column":19},"end":{"row":410,"column":19}},"lastUse":1542058264692,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":6},"end":{"row":107,"column":35}},"text":"self.a_for_uncertain_q.put(1)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":33},"end":{"row":107,"column":34}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":33},"end":{"row":107,"column":34}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":105,"column":0},"end":{"row":106,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":64,"column":42},"end":{"row":65,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":65,"column":0},"end":{"row":65,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":4},"end":{"row":65,"column":21}},"text":"a_for_uncertain_q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":4},"end":{"row":65,"column":5}},"text":"b"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":5},"end":{"row":65,"column":6}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":6},"end":{"row":65,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":7},"end":{"row":65,"column":8}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":8},"end":{"row":65,"column":9}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":26},"end":{"row":65,"column":27}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":9},"end":{"row":65,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":10},"end":{"row":65,"column":11}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":11},"end":{"row":65,"column":12}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":12},"end":{"row":65,"column":13}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":13},"end":{"row":65,"column":14}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":14},"end":{"row":65,"column":15}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":15},"end":{"row":65,"column":16}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":16},"end":{"row":65,"column":17}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":17},"end":{"row":65,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":18},"end":{"row":65,"column":19}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":19},"end":{"row":65,"column":20}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":20},"end":{"row":65,"column":21}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":21},"end":{"row":65,"column":22}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":22},"end":{"row":65,"column":23}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":23},"end":{"row":65,"column":24}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":24},"end":{"row":65,"column":25}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":65,"column":24},"end":{"row":65,"column":25}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":65,"column":23},"end":{"row":65,"column":24}},"text":"e"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":65,"column":22},"end":{"row":65,"column":23}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":22},"end":{"row":65,"column":23}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":23},"end":{"row":65,"column":24}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":65,"column":23},"end":{"row":65,"column":24}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":23},"end":{"row":65,"column":24}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":24},"end":{"row":65,"column":25}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":25},"end":{"row":65,"column":26}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":26},"end":{"row":65,"column":27}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":27},"end":{"row":65,"column":28}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":28},"end":{"row":65,"column":29}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":29},"end":{"row":65,"column":30}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":30},"end":{"row":65,"column":31}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":31},"end":{"row":65,"column":32}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":32},"end":{"row":65,"column":33}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":33},"end":{"row":65,"column":34}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":34},"end":{"row":65,"column":35}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":52},"end":{"row":65,"column":53}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":53},"end":{"row":65,"column":54}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":30},"end":{"row":65,"column":31}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":31},"end":{"row":65,"column":32}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":32},"end":{"row":65,"column":33}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":33},"end":{"row":65,"column":34}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":34},"end":{"row":65,"column":35}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":35},"end":{"row":65,"column":36}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":36},"end":{"row":65,"column":37}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":37},"end":{"row":65,"column":38}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":63},"end":{"row":65,"column":64}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":64},"end":{"row":65,"column":65}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":66,"column":0},"end":{"row":67,"column":0}},"nl":"\n","lines":["    pass"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":29},"end":{"row":55,"column":30}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":29},"end":{"row":55,"column":30}},"text":"2"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":30},"end":{"row":55,"column":31}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":101,"column":19},"end":{"row":101,"column":20}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":19},"end":{"row":101,"column":20}},"text":"0"}]}]],"redo":[]},"/modeling.py":{"scrollTop":311,"scrollLeft":0,"selection":{"start":{"row":56,"column":16},"end":{"row":56,"column":16}},"lastUse":1541974027299,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"/"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":11},"end":{"row":57,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"},{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":14}},"text":"2 - ro"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":12},"end":{"row":57,"column":13}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":13},"end":{"row":57,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":14},"end":{"row":57,"column":15}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":15},"end":{"row":57,"column":16}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":16},"end":{"row":57,"column":17}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":17},"end":{"row":57,"column":18}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":18},"end":{"row":57,"column":19}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":19},"end":{"row":57,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":20},"end":{"row":57,"column":21}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":21},"end":{"row":57,"column":22}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":24},"end":{"row":57,"column":25}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":22},"end":{"row":58,"column":23}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":23},"end":{"row":58,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":10}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":13},"end":{"row":68,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":14},"end":{"row":68,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":15},"end":{"row":68,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":16},"end":{"row":68,"column":19}},"text":"2/3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":8}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":8},"end":{"row":68,"column":9}},"text":"/"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":9},"end":{"row":68,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":58,"column":25},"end":{"row":58,"column":26}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":8},"end":{"row":57,"column":9}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":9},"end":{"row":57,"column":10}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":10},"end":{"row":57,"column":11}},"text":"5"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":28},"end":{"row":18,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":27},"end":{"row":18,"column":28}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":43},"end":{"row":66,"column":44}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":41},"end":{"row":66,"column":42}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":42},"end":{"row":66,"column":43}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":38},"end":{"row":65,"column":39}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":36},"end":{"row":65,"column":37}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":37},"end":{"row":65,"column":38}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":41},"end":{"row":75,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":39},"end":{"row":75,"column":40}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":40},"end":{"row":75,"column":41}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":36},"end":{"row":74,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":34},"end":{"row":74,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":35},"end":{"row":74,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":36},"end":{"row":60,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":34},"end":{"row":60,"column":35}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":35},"end":{"row":60,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":14},"end":{"row":54,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":15},"end":{"row":54,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":16},"end":{"row":54,"column":17}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":12},"end":{"row":54,"column":13}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":13},"end":{"row":54,"column":14}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":5},"end":{"row":54,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":6},"end":{"row":54,"column":7}},"text":"Z"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":7},"end":{"row":54,"column":8}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":8},"end":{"row":54,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":9},"end":{"row":54,"column":10}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":10},"end":{"row":54,"column":11}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":11},"end":{"row":54,"column":12}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":3},"end":{"row":54,"column":4}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":4},"end":{"row":54,"column":5}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":42},"end":{"row":54,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":2},"end":{"row":54,"column":3}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":16}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":23},"end":{"row":49,"column":24}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":15},"end":{"row":49,"column":23}},"text":"D.mean()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":30},"end":{"row":48,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":28},"end":{"row":48,"column":29}},"text":"k"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":29},"end":{"row":48,"column":30}},"text":","}]}]]},"/scheduler.py":{"scrollTop":21.5,"scrollLeft":0,"selection":{"start":{"row":15,"column":18},"end":{"row":15,"column":18}},"lastUse":1541960119500,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":9},"end":{"row":88,"column":10}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":10},"end":{"row":88,"column":11}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":11},"end":{"row":88,"column":12}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":12},"end":{"row":88,"column":13}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":13},"end":{"row":88,"column":14}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":14},"end":{"row":88,"column":15}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":15},"end":{"row":88,"column":16}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":16},"end":{"row":88,"column":17}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":2},"end":{"row":88,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":88,"column":0},"end":{"row":88,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":2},"end":{"row":88,"column":3}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":3},"end":{"row":88,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":4},"end":{"row":88,"column":5}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":5},"end":{"row":88,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":6},"end":{"row":88,"column":7}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":7},"end":{"row":88,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":8},"end":{"row":88,"column":9}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":9},"end":{"row":88,"column":10}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":10},"end":{"row":88,"column":11}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":11},"end":{"row":88,"column":12}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":12},"end":{"row":88,"column":13}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":13},"end":{"row":88,"column":14}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":13},"end":{"row":88,"column":14}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":14},"end":{"row":88,"column":15}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":15},"end":{"row":88,"column":16}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":16},"end":{"row":88,"column":17}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":17},"end":{"row":88,"column":18}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":18},"end":{"row":88,"column":19}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":88,"column":18},"end":{"row":88,"column":19}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":88,"column":17},"end":{"row":88,"column":18}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":88,"column":18},"end":{"row":88,"column":19}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":4},"end":{"row":89,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":5},"end":{"row":89,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":6},"end":{"row":89,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":7},"end":{"row":89,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":8},"end":{"row":89,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":9},"end":{"row":89,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":89,"column":10},"end":{"row":89,"column":11}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":89,"column":16},"end":{"row":89,"column":33}},"text":"learner.explorer."}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"nl":"\n","lines":["  def refine(self):"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"nl":"\n","lines":["    return self.refine()"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":30},"end":{"row":57,"column":31}},"text":"("}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":29},"end":{"row":57,"column":30}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":29},"end":{"row":57,"column":30}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":30},"end":{"row":57,"column":31}},"text":"+"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":31},"end":{"row":57,"column":32}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":54},"end":{"row":57,"column":55}},"text":")"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":53},"end":{"row":57,"column":54}},"text":"1"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":52},"end":{"row":57,"column":53}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":51},"end":{"row":57,"column":52}},"text":"+"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":57,"column":50},"end":{"row":57,"column":51}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":33,"column":22},"end":{"row":33,"column":23}},"text":"("}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":33,"column":21},"end":{"row":33,"column":22}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":33,"column":21},"end":{"row":33,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":33,"column":22},"end":{"row":33,"column":23}},"text":"+"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":33,"column":23},"end":{"row":33,"column":24}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":33,"column":25},"end":{"row":33,"column":30}},"text":" + 1)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":33,"column":25},"end":{"row":33,"column":26}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":26},"end":{"row":57,"column":27}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":27},"end":{"row":57,"column":28}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":28},"end":{"row":57,"column":29}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":29},"end":{"row":57,"column":30}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":54},"end":{"row":57,"column":55}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":57,"column":55},"end":{"row":57,"column":56}},"text":")"}]}]],"redo":[]},"/sim_exp.py":{"scrollTop":334.5,"scrollLeft":0,"selection":{"start":{"row":35,"column":16},"end":{"row":35,"column":16}},"lastUse":1541960105511,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":24},"end":{"row":55,"column":25}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":25},"end":{"row":55,"column":26}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":26},"end":{"row":55,"column":27}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":31},"end":{"row":55,"column":32}},"text":"1"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":30},"end":{"row":55,"column":31}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":29},"end":{"row":55,"column":30}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":55,"column":29},"end":{"row":55,"column":30}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":2},"end":{"row":69,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":70,"column":2},"end":{"row":70,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":14},"end":{"row":69,"column":15}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":15},"end":{"row":69,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":14},"end":{"row":69,"column":15}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":15},"end":{"row":69,"column":16}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":15},"end":{"row":69,"column":16}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":16},"end":{"row":69,"column":17}},"text":"y"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":17},"end":{"row":69,"column":18}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":18},"end":{"row":69,"column":19}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":20},"end":{"row":69,"column":21}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":21},"end":{"row":69,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":22},"end":{"row":69,"column":23}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":22},"end":{"row":69,"column":23}},"text":"p"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":21},"end":{"row":69,"column":22}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":21},"end":{"row":69,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":22},"end":{"row":69,"column":23}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":23},"end":{"row":69,"column":24}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":23},"end":{"row":69,"column":24}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":24},"end":{"row":69,"column":25}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":25},"end":{"row":69,"column":26}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":26},"end":{"row":69,"column":27}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":27},"end":{"row":69,"column":28}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":5},"end":{"row":42,"column":9}},"text":"avg_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":15},"end":{"row":42,"column":16}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":14},"end":{"row":42,"column":15}},"text":"o"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":13},"end":{"row":42,"column":14}},"text":"i"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":12},"end":{"row":42,"column":13}},"text":"t"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":11},"end":{"row":42,"column":12}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":10},"end":{"row":42,"column":11}},"text":"z"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":9},"end":{"row":42,"column":10}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":9},"end":{"row":42,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":10},"end":{"row":42,"column":11}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":11},"end":{"row":42,"column":12}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":12},"end":{"row":42,"column":13}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":13},"end":{"row":42,"column":14}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":5},"end":{"row":41,"column":9}},"text":"avg_"},{"action":"insertText","range":{"start":{"row":41,"column":5},"end":{"row":41,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":6},"end":{"row":41,"column":7}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":7},"end":{"row":41,"column":15}},"text":"slowdown"},{"action":"insertText","range":{"start":{"row":41,"column":7},"end":{"row":41,"column":8}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":8},"end":{"row":41,"column":9}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":8},"end":{"row":41,"column":9}},"text":"e"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":7},"end":{"row":41,"column":8}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":7},"end":{"row":41,"column":8}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":8},"end":{"row":41,"column":9}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":9},"end":{"row":41,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":10},"end":{"row":41,"column":11}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":11},"end":{"row":41,"column":12}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":35},"end":{"row":42,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":42,"column":0},"end":{"row":42,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":4},"end":{"row":42,"column":35}},"text":"'sl_mean': np.mean(slowdown_l),"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":8},"end":{"row":42,"column":12}},"text":"mean"},{"action":"insertText","range":{"start":{"row":42,"column":8},"end":{"row":42,"column":9}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":9},"end":{"row":42,"column":10}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":10},"end":{"row":42,"column":11}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":17},"end":{"row":42,"column":21}},"text":"mean"},{"action":"insertText","range":{"start":{"row":42,"column":17},"end":{"row":42,"column":18}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":18},"end":{"row":42,"column":19}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":42,"column":19},"end":{"row":42,"column":20}},"text":"d"}]}]],"redo":[]},"/rlearning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":19,"column":13},"end":{"row":19,"column":13}},"lastUse":1541959265701,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":26},"end":{"row":28,"column":38}},"text":"cluster_qlen"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":38},"end":{"row":28,"column":39}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":39},"end":{"row":28,"column":40}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":40},"end":{"row":28,"column":66}},"text":"min(wload_l), max(wload_l)"},{"action":"insertText","range":{"start":{"row":28,"column":40},"end":{"row":28,"column":73}},"text":"np.mean(wload_l), np.std(wload_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":73},"end":{"row":28,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":28},"end":{"row":75,"column":29}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":75,"column":29},"end":{"row":75,"column":30}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":12},"end":{"row":8,"column":13}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":13},"end":{"row":8,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":14},"end":{"row":8,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":15},"end":{"row":8,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":55},"end":{"row":16,"column":79}},"text":"len(cluster.store.items)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":54},"end":{"row":16,"column":55}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":53},"end":{"row":16,"column":54}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":27},"end":{"row":16,"column":51}},"text":"len(cluster.store.items)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":51},"end":{"row":16,"column":52}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":52},"end":{"row":16,"column":53}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":81},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":4},"end":{"row":18,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":4},"end":{"row":18,"column":37}},"text":"np.mean(wload_l), np.std(wload_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":4},"end":{"row":16,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":4},"end":{"row":17,"column":81}},"text":"return [j.totaldemand, len(cluster.store.items), min(wload_l), max(wload_l) ]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":4},"end":{"row":18,"column":37}},"text":"np.mean(wload_l), np.std(wload_l)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":18,"column":0},"end":{"row":19,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":53},"end":{"row":17,"column":79}},"text":"min(wload_l), max(wload_l)"},{"action":"insertText","range":{"start":{"row":17,"column":53},"end":{"row":17,"column":86}},"text":"np.mean(wload_l), np.std(wload_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":12},"end":{"row":8,"column":13}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":13},"end":{"row":8,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":14},"end":{"row":8,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":15},"end":{"row":8,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":20},"end":{"row":8,"column":21}},"text":"6"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":19},"end":{"row":8,"column":20}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":18},"end":{"row":8,"column":19}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":17},"end":{"row":8,"column":18}},"text":" "}]}]],"redo":[]},"/learn_wmpi.py":{"scrollTop":3131,"scrollLeft":0,"selection":{"start":{"row":170,"column":27},"end":{"row":170,"column":27}},"lastUse":1541948220286,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":180,"column":62},"end":{"row":181,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":181,"column":0},"end":{"row":181,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":181,"column":2},"end":{"row":181,"column":19}},"text":"sching_m.update({"},{"action":"insertText","range":{"start":{"row":181,"column":19},"end":{"row":182,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":182,"column":0},"end":{"row":183,"column":0}},"lines":["  'learner': 'QLearner_wTargetNet_wExpReplay',"]},{"action":"insertText","range":{"start":{"row":183,"column":0},"end":{"row":183,"column":58}},"text":"  'exp_buffer_size': 100*10**6, 'exp_batch_size': 10**3} )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":182,"column":0},"end":{"row":182,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":183,"column":0},"end":{"row":183,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":183,"column":4},"end":{"row":183,"column":57}},"text":"'exp_buffer_size': 100*10**6, 'exp_batch_size': 10**3"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":183,"column":0},"end":{"row":183,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":182,"column":48},"end":{"row":183,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":182,"column":47},"end":{"row":182,"column":48}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":182,"column":0},"end":{"row":182,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":181,"column":19},"end":{"row":182,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":181,"column":50},"end":{"row":181,"column":61}},"text":"_wExpReplay"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":172,"column":34},"end":{"row":172,"column":35}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":172,"column":34},"end":{"row":172,"column":35}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":192,"column":2},"end":{"row":192,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":6},"end":{"row":124,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":124,"column":0},"end":{"row":124,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":6},"end":{"row":123,"column":12}},"text":"refine"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":6},"end":{"row":123,"column":7}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":7},"end":{"row":123,"column":8}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":8},"end":{"row":123,"column":9}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":9},"end":{"row":123,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":10},"end":{"row":123,"column":11}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":11},"end":{"row":123,"column":12}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":18},"end":{"row":123,"column":19}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":19},"end":{"row":123,"column":20}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":123,"column":12},"end":{"row":123,"column":29}},"text":"learner.explorer."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":179,"column":2},"end":{"row":179,"column":4}},"text":"# "},{"action":"removeText","range":{"start":{"row":180,"column":2},"end":{"row":180,"column":4}},"text":"# "},{"action":"removeText","range":{"start":{"row":181,"column":2},"end":{"row":181,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":182,"column":2},"end":{"row":182,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":193,"column":2},"end":{"row":193,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":179,"column":2},"end":{"row":179,"column":4}},"text":"# "},{"action":"insertText","range":{"start":{"row":180,"column":2},"end":{"row":180,"column":4}},"text":"# "},{"action":"insertText","range":{"start":{"row":181,"column":2},"end":{"row":181,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":182,"column":2},"end":{"row":182,"column":4}},"text":"# "}]}]],"redo":[]},"/sim_objs.py":{"scrollTop":2140,"scrollLeft":0,"selection":{"start":{"row":107,"column":15},"end":{"row":107,"column":15}},"lastUse":1541820389867,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":304,"column":10},"end":{"row":304,"column":12}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"nl":"\n","lines":["        # print(\"job completed, jid= {}\".format(t.jid) )"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":27}},"text":"Scher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":27},"end":{"row":3,"column":28}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":28},"end":{"row":3,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":29},"end":{"row":3,"column":36}},"text":"RLScher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["# from scheduler import Scher, RLScher"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l, self)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":129,"column":2},"end":{"row":130,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":130,"column":0},"end":{"row":130,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":2},"end":{"row":131,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":131,"column":0},"end":{"row":131,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":2},"end":{"row":130,"column":3}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":3},"end":{"row":130,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":4},"end":{"row":130,"column":5}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":5},"end":{"row":130,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":6},"end":{"row":130,"column":7}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":7},"end":{"row":130,"column":8}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":8},"end":{"row":130,"column":9}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":9},"end":{"row":130,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":10},"end":{"row":130,"column":11}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":11},"end":{"row":130,"column":12}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":12},"end":{"row":130,"column":13}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":13},"end":{"row":130,"column":14}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":14},"end":{"row":130,"column":15}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":15},"end":{"row":130,"column":16}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":15},"end":{"row":130,"column":16}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":16},"end":{"row":130,"column":17}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":17},"end":{"row":130,"column":18}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":18},"end":{"row":130,"column":19}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":20},"end":{"row":130,"column":21}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":21},"end":{"row":131,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":131,"column":0},"end":{"row":131,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":4},"end":{"row":131,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":5},"end":{"row":131,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":6},"end":{"row":131,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":7},"end":{"row":131,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":8},"end":{"row":131,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":9},"end":{"row":131,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":10},"end":{"row":131,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":11},"end":{"row":131,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":12},"end":{"row":131,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":13},"end":{"row":131,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":14},"end":{"row":131,"column":15}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":15},"end":{"row":131,"column":16}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":16},"end":{"row":131,"column":24}},"text":"avg_load"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":25},"end":{"row":256,"column":26}},"text":"1"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":24},"end":{"row":256,"column":25}},"text":"+"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":26},"end":{"row":256,"column":27}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":16},"end":{"row":131,"column":17}},"text":"_"},{"action":"insertText","range":{"start":{"row":128,"column":26},"end":{"row":128,"column":27}},"text":"_"},{"action":"insertText","range":{"start":{"row":128,"column":9},"end":{"row":128,"column":10}},"text":"_"},{"action":"insertText","range":{"start":{"row":101,"column":9},"end":{"row":101,"column":10}},"text":"_"}]}]],"redo":[]},"/log_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"lastUse":1541818726381,"undo":[],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":2}},"text":"# "}]}]]},"/sim_objs_lessreal.py":{"scrollTop":2994,"scrollLeft":0,"selection":{"start":{"row":166,"column":19},"end":{"row":166,"column":19}},"lastUse":1541815805573,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":6},"end":{"row":72,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":72,"column":0},"end":{"row":72,"column":6}},"text":"      "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":72,"column":6},"end":{"row":73,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":72,"column":6},"end":{"row":72,"column":24}},"text":"for t in self.t_l:"},{"action":"insertText","range":{"start":{"row":72,"column":24},"end":{"row":73,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":34}},"text":"      t.rem_lifetime -= serv_time_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":6},"end":{"row":73,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":6},"end":{"row":72,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":72,"column":0},"end":{"row":72,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":72,"column":6},"end":{"row":72,"column":26}},"text":"if self.add_to_serv:"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":74,"column":0},"end":{"row":74,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":8},"end":{"row":74,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":74,"column":0},"end":{"row":74,"column":8}},"text":"        "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":8},"end":{"row":75,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":75,"column":0},"end":{"row":75,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":74,"column":6},"end":{"row":74,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":6},"end":{"row":74,"column":7}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":7},"end":{"row":74,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":8},"end":{"row":74,"column":9}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":9},"end":{"row":74,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":10},"end":{"row":74,"column":11}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":80,"column":0},"end":{"row":80,"column":38}},"text":"          t.rem_lifetime -= serv_time_"},{"action":"removeText","range":{"start":{"row":79,"column":8},"end":{"row":79,"column":31}},"text":"for t in self.t_l[:-1]:"},{"action":"removeText","range":{"start":{"row":79,"column":8},"end":{"row":80,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":79,"column":0},"end":{"row":80,"column":0}},"nl":"\n","lines":["        "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":8},"end":{"row":73,"column":31}},"text":"for t in self.t_l[:-1]:"},{"action":"insertText","range":{"start":{"row":73,"column":31},"end":{"row":74,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":74,"column":0},"end":{"row":74,"column":36}},"text":"        t.rem_lifetime -= serv_time_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":8},"end":{"row":74,"column":10}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":72,"column":0}},"nl":"\n","lines":["      "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":77,"column":6},"end":{"row":77,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":60},"end":{"row":65,"column":61}},"text":"{"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":61},"end":{"row":65,"column":62}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":99,"column":19},"end":{"row":100,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":100,"column":0},"end":{"row":100,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":4},"end":{"row":100,"column":77}},"text":"slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":33},"end":{"row":100,"column":49}},"text":"binded, njob= {}"},{"action":"insertText","range":{"start":{"row":100,"column":33},"end":{"row":100,"column":34}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":34},"end":{"row":100,"column":35}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":35},"end":{"row":100,"column":36}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":36},"end":{"row":100,"column":37}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":37},"end":{"row":100,"column":38}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":38},"end":{"row":100,"column":39}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":39},"end":{"row":100,"column":40}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":40},"end":{"row":100,"column":41}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":41},"end":{"row":100,"column":42}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":51},"end":{"row":100,"column":66}},"text":"len(self.t_l) )"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":50},"end":{"row":100,"column":51}},"text":"("}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":49},"end":{"row":100,"column":50}},"text":"t"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":48},"end":{"row":100,"column":49}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":47},"end":{"row":100,"column":48}},"text":"m"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":46},"end":{"row":100,"column":47}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":45},"end":{"row":100,"column":46}},"text":"o"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":44},"end":{"row":100,"column":45}},"text":"f"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":43},"end":{"row":100,"column":44}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":33},"end":{"row":100,"column":34}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":34},"end":{"row":100,"column":35}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":35},"end":{"row":100,"column":36}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":36},"end":{"row":100,"column":37}},"text":":"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":37},"end":{"row":100,"column":38}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":100,"column":38},"end":{"row":100,"column":39}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":178,"column":8},"end":{"row":179,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":179,"column":0},"end":{"row":179,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":178,"column":8},"end":{"row":178,"column":35}},"text":"yield self.env.timeout(0.1)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":178,"column":33},"end":{"row":178,"column":34}},"text":"0"}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":15,"column":20},"end":{"row":15,"column":20}},"lastUse":1541814815136,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":23}},"text":"elif [ $1 = 'p' ]; then"},{"action":"insertText","range":{"start":{"row":14,"column":23},"end":{"row":15,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":17}},"text":"$PY plot_scher.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":16}},"text":"plot_scher"},{"action":"insertText","range":{"start":{"row":15,"column":6},"end":{"row":15,"column":7}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":7},"end":{"row":15,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":8},"end":{"row":15,"column":9}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":9},"end":{"row":15,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":10},"end":{"row":15,"column":11}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":11},"end":{"row":15,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":12},"end":{"row":15,"column":13}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":13},"end":{"row":15,"column":14}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":2},"end":{"row":15,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":19},"end":{"row":16,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":2},"end":{"row":16,"column":17}},"text":"$PY modeling.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":16},"end":{"row":16,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":17},"end":{"row":16,"column":18}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":23}},"text":"elif [ $1 = 'm' ]; then"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":23},"end":{"row":11,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":16}},"text":"$PY sim_exp.py"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":6},"end":{"row":11,"column":10}},"text":"sim_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":9},"end":{"row":11,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":10},"end":{"row":11,"column":11}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":11},"end":{"row":11,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":12},"end":{"row":11,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":14},"end":{"row":11,"column":15}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":15},"end":{"row":11,"column":16}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":16},"end":{"row":11,"column":17}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":17},"end":{"row":11,"column":18}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":18},"end":{"row":11,"column":19}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":19},"end":{"row":11,"column":20}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":20},"end":{"row":11,"column":21}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":21},"end":{"row":11,"column":22}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":"y"}]}]],"redo":[]},"/w_queues/sim.py":{"scrollTop":122.5,"scrollLeft":0,"selection":{"start":{"row":22,"column":38},"end":{"row":22,"column":38}},"lastUse":1541792559875,"undo":[],"redo":[]},"/experience_replay.py":{"scrollTop":2664.5,"scrollLeft":0,"selection":{"start":{"row":153,"column":29},"end":{"row":153,"column":29}},"lastUse":1541726142849,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":94,"column":0},"end":{"row":95,"column":0}},"nl":"\n","lines":["              "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":95,"column":0},"end":{"row":96,"column":0}},"nl":"\n","lines":["              "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":95,"column":14},"end":{"row":95,"column":31}},"text":"t_sl_l.append(sl)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":90,"column":93},"end":{"row":91,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":91,"column":0},"end":{"row":91,"column":14}},"text":"              "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":91,"column":14},"end":{"row":91,"column":31}},"text":"t_sl_l.append(sl)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":97,"column":0},"end":{"row":98,"column":0}},"nl":"\n","lines":["            "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":96,"column":12},"end":{"row":96,"column":14}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":16},"end":{"row":87,"column":17}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":87,"column":16},"end":{"row":87,"column":17}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":16},"end":{"row":87,"column":17}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":17},"end":{"row":87,"column":18}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":18},"end":{"row":87,"column":19}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":26},"end":{"row":87,"column":27}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":27},"end":{"row":87,"column":28}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":28},"end":{"row":87,"column":29}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":29},"end":{"row":87,"column":30}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":30},"end":{"row":87,"column":31}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":82},"end":{"row":87,"column":83}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":83},"end":{"row":87,"column":84}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":26},"end":{"row":87,"column":27}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":27},"end":{"row":87,"column":28}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":28},"end":{"row":87,"column":29}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":29},"end":{"row":87,"column":30}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":30},"end":{"row":87,"column":31}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":31},"end":{"row":87,"column":32}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":32},"end":{"row":87,"column":33}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":33},"end":{"row":87,"column":34}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":34},"end":{"row":87,"column":35}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":35},"end":{"row":87,"column":36}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":94},"end":{"row":87,"column":95}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":95},"end":{"row":87,"column":96}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":86,"column":47},"end":{"row":86,"column":48}},"text":"1"},{"action":"insertText","range":{"start":{"row":86,"column":47},"end":{"row":86,"column":48}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":48},"end":{"row":86,"column":49}},"text":"e"},{"action":"insertText","range":{"start":{"row":86,"column":49},"end":{"row":86,"column":50}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":50},"end":{"row":86,"column":51}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":51},"end":{"row":86,"column":52}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":52},"end":{"row":86,"column":53}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":53},"end":{"row":86,"column":54}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":54},"end":{"row":86,"column":55}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":55},"end":{"row":86,"column":56}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":56},"end":{"row":86,"column":57}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":57},"end":{"row":86,"column":58}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":58},"end":{"row":86,"column":59}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":59},"end":{"row":86,"column":60}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":60},"end":{"row":86,"column":61}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":61},"end":{"row":86,"column":62}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":62},"end":{"row":86,"column":63}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":93,"column":23},"end":{"row":93,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":93,"column":23},"end":{"row":93,"column":24}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":94,"column":23},"end":{"row":94,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":94,"column":23},"end":{"row":94,"column":24}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":95,"column":23},"end":{"row":95,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":95,"column":23},"end":{"row":95,"column":24}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":146,"column":2},"end":{"row":146,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":143,"column":2},"end":{"row":143,"column":4}},"text":"# "},{"action":"removeText","range":{"start":{"row":144,"column":2},"end":{"row":144,"column":4}},"text":"# "},{"action":"removeText","range":{"start":{"row":145,"column":2},"end":{"row":145,"column":4}},"text":"# "}]}]],"redo":[]},"/__pycache__/rvs.cpython-35.pyc":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"lastUse":1541708149682,"undo":[],"redo":[]},"/mrun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":17,"column":16},"end":{"row":17,"column":16}},"lastUse":1541697026693,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":20}},"text":" # 11"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":18},"end":{"row":10,"column":19}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":16},"end":{"row":10,"column":17}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}]],"redo":[]},"/policygrad_learning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":5,"column":22},"end":{"row":5,"column":22}},"lastUse":1541607797682,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":100}},"text":"# #######################################  Value Estimator  ###################################### #"},{"action":"insertText","range":{"start":{"row":3,"column":100},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":43,"column":0}},"lines":["class VEster(object): # Value Estimator","  def __init__(self, s_len, nn_len):","    self.s_len = s_len","    self.nn_len = nn_len","    ","    self.init()","  ","  def __repr__(self):","    return \"VEster[s_len= {}]\".format(self.s_len)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(shape=(None, None, self.s_len), dtype=tf.float32)","    # self.hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu)","    # self.hidden2 = tf.contrib.layers.fully_connected(self.hidden1, self.nn_len, activation_fn=tf.nn.relu)","    # self.v = tf.contrib.layers.fully_connected(self.hidden2, 1, activation_fn=None)","    self.hidden = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.v = tf.contrib.layers.fully_connected(self.hidden, 1, activation_fn=None, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.sampled_v = tf.placeholder(shape=(None, None, 1), dtype=tf.float32)","    # self.loss = tf.reduce_sum(tf.squared_difference(self.v, self.sampled_v) )","    self.loss = tf.losses.mean_squared_error(self.v, self.sampled_v) + \\","      tf.losses.get_regularization_loss()","    ","    # self.optimizer = tf.train.GradientDescentOptimizer(0.01)","    self.optimizer = tf.train.AdamOptimizer(LEARNING_RATE)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_v_l):","    _, loss = self.sess.run([self.train_op, self.loss],","                            feed_dict={self.s_ph: n_t_s_l,","                                       self.sampled_v: n_t_v_l} )","    print(\"VEster:: loss= {}\".format(loss) )","  ","  def get_v(self, n_t_s_l):","    return self.sess.run(self.v,"]},{"action":"insertText","range":{"start":{"row":43,"column":0},"end":{"row":43,"column":57}},"text":"                         feed_dict={self.s_ph: n_t_s_l} )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":0,"column":16}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":16},"end":{"row":0,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":0,"column":18}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":0,"column":19}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":19},"end":{"row":0,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":20},"end":{"row":0,"column":21}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":0,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":100}},"text":"# ####################################  Policy Gradient Learner  ################################# #"},{"action":"insertText","range":{"start":{"row":2,"column":100},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":116,"column":0}},"lines":["class PolicyGradLearner(Learner):","  def __init__(self, s_len, a_len, nn_len=10, w_actorcritic=False):","    super().__init__(s_len, a_len, nn_len)","    self.w_actorcritic = w_actorcritic","    ","    self.v_ester = VEster(s_len, nn_len)","    self.init()","    self.saver = tf.train.Saver(max_to_keep=5)","    ","    self.eps = 0.1","  ","  def __repr__(self):","    return 'PolicyGradLearner(s_len= {}, a_len= {}, nn_len= {}, gamma= {}, w_actorcritic= {})'.format(self.s_len, self.a_len, self.nn_len, self.gamma, self.w_actorcritic)","  ","  def init(self):","    # N x T x s_len","    self.s_ph = tf.placeholder(tf.float32, shape=(None, None, self.s_len) )","    hidden1 = tf.contrib.layers.fully_connected(self.s_ph, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    hidden2 = tf.contrib.layers.fully_connected(hidden1, self.nn_len, activation_fn=tf.nn.relu, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    self.a_probs = tf.contrib.layers.fully_connected(hidden2, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    # self.a_probs = tf.contrib.layers.fully_connected(hidden1, self.a_len, activation_fn=tf.nn.softmax, weights_regularizer=tf.contrib.layers.l2_regularizer(0.01) )","    ","    self.a_ph = tf.placeholder(tf.int32, shape=(None, None, 1), name='a_ph')","    self.q_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='q_ph')","    self.v_ph = tf.placeholder(tf.float32, shape=(None, None, 1), name='v_ph')","    ","    sh = tf.shape(self.a_probs)","    N, T = sh[0], sh[1]","    indices = tf.range(0, N*T)*sh[2] + tf.reshape(self.a_ph, [-1] )","    self.resp_outputs = tf.reshape(tf.gather(tf.reshape(self.a_probs, [-1] ), indices), (N, T, 1) )","    self.loss = \\","      -tf.reduce_mean(tf.reduce_sum(tf.log(self.resp_outputs)*(self.q_ph - self.v_ph), axis=1), axis=0) + \\","      tf.losses.get_regularization_loss()","    ","    self.optimizer = tf.train.AdamOptimizer(0.01) # tf.train.GradientDescentOptimizer(0.01)","    self.train_op = self.optimizer.minimize(self.loss)","    ","    self.sess = tf.Session()","    self.sess.run(tf.global_variables_initializer() )","  ","  def train_w_mult_trajs(self, n_t_s_l, n_t_a_l, n_t_r_l):","    # All trajectories use the same policy","    N = len(n_t_s_l)","    T = len(n_t_s_l[0] )","    # print(\"n_t_s_l.shape= {}\".format(n_t_s_l.shape) )","    # print(\"avg r= {}\".format(np.mean(n_t_r_l) ) )","    ","    if not self.w_actorcritic:","      n_t_q_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_q_l[n] = rewards_to_qvals(n_t_r_l[n], self.gamma)","      # print(\"n_t_q_l= {}\".format(n_t_q_l) )","      # print(\"n_t_q_l.shape= {}\".format(n_t_q_l.shape) )","      print(\"PolicyGradLearner:: avg q= {}\".format(np.mean(n_t_q_l) ) )","      ","      t_avgq_l = np.array([np.mean(n_t_q_l[:, t, 0] ) for t in range(T) ] ).reshape((T, 1))","      # m = np.mean(n_t_q_l)","      # t_avgq_l = np.array([m for t in range(T) ] ).reshape((T, 1))","      n_t_v_l = np.zeros((N, T, 1))","      for n in range(N):","        n_t_v_l[n] = t_avgq_l","      # print(\"n_t_v_l= {}\".format(n_t_v_l) )","      # print(\"n_t_v_l.shape= {}\".format(n_t_v_l.shape) )","      ","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    else:","      # Policy gradient by getting baseline values from actor-critic","      n_t_v_l = np.zeros((N, T, 1))","      n_t_vest_l = self.v_ester.get_v(n_t_s_l)","      for t in range(T-1):","        n_t_v_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_vest_l[:, t+1]","      n_t_v_l[:, T-1] = n_t_r_l[:, T-1]","      self.v_ester.train_w_mult_trajs(n_t_s_l, n_t_v_l)","      ","      n_t_v_l = self.v_ester.get_v(n_t_s_l)","      n_t_q_l = np.zeros((N, T, 1))","      # for n in range(N):","      #   for t in range(T-1):","      #     n_t_q_l[n, t] = n_t_r_l[n, t] + self.gamma*n_t_v_l[n, t+1]","      #   n_t_q_l[n, T-1] = n_t_r_l[n, t]","      for t in range(T-1):","        n_t_q_l[:, t] = n_t_r_l[:, t] + self.gamma*n_t_v_l[:, t+1]","      n_t_q_l[:, T-1] = n_t_r_l[:, T-1]","      loss, _ = self.sess.run([self.loss, self.train_op],","                              feed_dict={self.s_ph: n_t_s_l,","                                         self.a_ph: n_t_a_l,","                                         self.q_ph: n_t_q_l,","                                         self.v_ph: n_t_v_l} )","    log(INFO, \"PolicyGradLearner;\", loss=loss)","  ","  def get_action_dist(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    return np.array(a_probs[0][0] )","  ","  def get_random_action(self, s):","    if random.uniform(0, 1) < self.eps:","      return np.random.randint(self.a_len, size=1)[0]","    else:","      a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","      a_dist = np.array(a_probs[0][0] )","      # log(WARNING, \"\", s=s, a_dist=a_dist)","      a = np.random.choice(a_dist, 1, p=a_dist)","      a = np.argmax(a_dist == a)","      return a","  ","  def get_max_action(self, s):","    a_probs = self.sess.run(self.a_probs, feed_dict={self.s_ph: [[s]] } )","    a_dist = a_probs[0][0]","    # print(\"a_dist= {}\".format(a_dist) )"]},{"action":"insertText","range":{"start":{"row":116,"column":0},"end":{"row":116,"column":30}},"text":"    return np.argmax(a_dist)  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":35}},"text":"def rewards_to_qvals(t_r_l, gamma):"},{"action":"insertText","range":{"start":{"row":2,"column":35},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":23,"column":0}},"lines":["T = t_r_l.shape[0]","# reward = average of all following rewards","# for t in range(T):","#   t_r_l[t, 0] = np.mean(t_r_l[t:, 0])","","# for t in range(T):","#   cumw, cumr = 0, 0","#   for i, r in enumerate(t_r_l[t:, 0] ):","#     cumw += gamma**i","#     cumr += gamma**i * r","#   t_r_l[t, 0] = cumr/cumw","# return t_r_l","","t_dr_l = np.zeros((T, 1))","cumw, cumr = 0, 0","for t in range(T-1, -1, -1):","  cumr = t_r_l[t, 0] + gamma*cumr","  # cumw = 1 + gamma*cumw","  # t_dr_l[t, 0] = cumr/cumw","  t_dr_l[t, 0] = cumr"]},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":13}},"text":"return t_dr_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":13,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":2}},"text":"  "}]}]],"redo":[]},"/test_learning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":5,"column":11},"end":{"row":5,"column":11}},"lastUse":1541607753854,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":100}},"text":"# #############################################  Test  ########################################### #"},{"action":"insertText","range":{"start":{"row":0,"column":100},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":102,"column":0}},"lines":["def test():","  s_len, a_len, nn_len = 3, 3, 10","  scher = PolicyGradLearner(s_len, a_len, nn_len)","  # scher = QLearner(s_len, a_len, nn_len)","  ","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s, a):","    # s_min = min(s)","    # r = 10 if s[a] == s_min else 0","    # return min(100, 1/(0.001 + s[a] - min(s) ) )","    # return 100*math.exp(-(s[a] - min(s) ) )","    return 1/(0.1 + s[a] - min(s) )","  ","  def evaluate():","    num_shortest_found = 0","    for e in range(100):","      s = state()","      a = scher.get_max_action(s)","      if s[a] - min(s) < 0.01:","        num_shortest_found += 1","    print(\"freq shortest found= {}\".format(num_shortest_found/100) )","  ","  def train_w_mult_trajs():","    N, T = 10, 100","    def gen_N_traj():","      n_t_s_l, n_t_a_l, n_t_r_l = np.zeros((N, T, s_len)), np.zeros((N, T, 1)), np.zeros((N, T, 1))","      for n in range(N):","        for t in range(T):","          s = state()","          a = scher.get_random_action(s)","          n_t_s_l[n, t, :] = s","          n_t_a_l[n, t, :] = a","          n_t_r_l[n, t, :] = reward(s, a)","      return n_t_s_l, n_t_a_l, n_t_r_l","    ","    for i in range(100*20):","      n_t_s_l, n_t_a_l, n_t_r_l = gen_N_traj()","      scher.train_w_mult_trajs(n_t_s_l, n_t_a_l, n_t_r_l)","      if i % 10 == 0:","        evaluate()","  train_w_mult_trajs()","","def vsimple_regress():","  s_len = 3","  T = 100","  def state():","    s = np.random.randint(10, size=s_len)","    sum_s = sum(s)","    return s/sum_s if sum_s != 0 else s","  ","  def reward(s):","    return 10*max(s)","  ","  def sample_traj():","    t_s_l, t_r_l = np.zeros((T, s_len)), np.zeros((T, 1))","    for t in range(T):","      s = state()","      t_s_l[t, :] = s","      t_r_l[t, :] = reward(s)","    return t_s_l, t_r_l","  ","  value_ester = VEster(s_len, nn_len=10, straj_training=False)","  for i in range(100*40):","    t_s_l, t_r_l = sample_traj()","    value_ester.train_w_single_traj(t_s_l, t_r_l)","","class A(object):","  def __init__(self):","    self.a = 'A'","  ","  def __repr__(self):","    return self.a","  ","  def test(self):","    print(\"self.a= {}\".format(self.a) )","  ","class B(A):","  def __init__(self):","    super().__init__()","    ","    self.init()","  ","  def init(self):","    self.a = 'B'","","if __name__ == \"__main__\":","  # test()","  # vsimple_regress()","  ","  # b = B()","  # # print(\"b= {}\".format(b) )","  # b.test()","  ","  # learner = PolicyGradLearner(s_len=1, a_len=1)","  learner = QLearner(s_len=1, a_len=1)","  learner.save(0)","  restore_result = learner.restore(0)"]},{"action":"insertText","range":{"start":{"row":102,"column":0},"end":{"row":102,"column":53}},"text":"  print(\"restore_result= {}\".format(restore_result) )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":53},"end":{"row":103,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":103,"column":0},"end":{"row":103,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":8}},"text":"rle"},{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"y"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":0,"column":16}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":16},"end":{"row":0,"column":17}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":0,"column":18}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":0,"column":19}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":19},"end":{"row":0,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":20},"end":{"row":0,"column":21}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":0,"column":22}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":23},"end":{"row":0,"column":24}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":24},"end":{"row":0,"column":25}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":25},"end":{"row":0,"column":26}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":26},"end":{"row":0,"column":27}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":27},"end":{"row":0,"column":28}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":28},"end":{"row":0,"column":29}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":29},"end":{"row":0,"column":30}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":30},"end":{"row":0,"column":31}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":31},"end":{"row":0,"column":32}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":33},"end":{"row":1,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":33}},"text":"from policygrad_learning import *"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":5},"end":{"row":1,"column":15}},"text":"policygrad"},{"action":"insertText","range":{"start":{"row":1,"column":5},"end":{"row":1,"column":6}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":24},"end":{"row":2,"column":0}},"text":"\n"}]}]],"redo":[]},"/mapper.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":18,"column":20},"end":{"row":18,"column":20}},"lastUse":1541534205173,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":30},"end":{"row":13,"column":31}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":29},"end":{"row":13,"column":30}},"text":"\\"}]}]],"redo":[]},"/zedconfig.json":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":26,"column":31},"end":{"row":26,"column":31}},"lastUse":1541523330678,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":31}},"text":"\"Find:Find In Project\": {"},{"action":"insertText","range":{"start":{"row":28,"column":31},"end":{"row":29,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":29,"column":0},"end":{"row":35,"column":0}},"lines":["          \"mac\": \"Command-Shift-F\",","          \"win\": \"Ctrl-Shift-F\"","      },","      \"Find:All\": {","        \"mac\": \"Command-Shift-F\",","        \"win\": \"Ctrl-Shift-F\""]},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":7}},"text":"      }"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":7},"end":{"row":27,"column":8}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"F"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":32},"end":{"row":29,"column":33}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"F"},{"action":"insertText","range":{"start":{"row":30,"column":29},"end":{"row":30,"column":30}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":26}},"text":"Shift"},{"action":"insertText","range":{"start":{"row":34,"column":21},"end":{"row":34,"column":22}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":22},"end":{"row":34,"column":23}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":23},"end":{"row":34,"column":24}},"text":"t"}]}]],"redo":[]},"/sim_wqs_objs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":17,"column":4},"end":{"row":17,"column":4}},"lastUse":1541425789297,"undo":[],"redo":[]},"/srun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"lastUse":1541308205199,"undo":[],"redo":[]},"/plot_scher.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":19,"column":17},"end":{"row":19,"column":17}},"lastUse":1541264912146,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"nl":"\n","lines":["    # for totaldemand in np.logspace(0.01, math.log10(job_totaldemand_rv.mean() ), 10):"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":4},"end":{"row":13,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":36},"end":{"row":13,"column":37}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":35},"end":{"row":13,"column":36}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":41},"end":{"row":13,"column":42}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":38},"end":{"row":13,"column":39}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load1_l.append(load1)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":15,"column":0}},"nl":"\n","lines":["      load2_l.append(load2)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":56}},"text":", [load1, load2]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":40},"end":{"row":17,"column":41}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":13},"end":{"row":18,"column":35}},"text":"load1= {}, load2= {}, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":44},"end":{"row":18,"column":58}},"text":"load1, load2, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"5"},{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":20},"end":{"row":38,"column":21}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":5,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":2},"end":{"row":4,"column":42}},"text":"learner = QLearner(s_len, a_len, nn_len)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":42}},"text":"QLearner(s_len, a_len, nn_len)"},{"action":"insertText","range":{"start":{"row":4,"column":12},"end":{"row":4,"column":84}},"text":"PolicyGradLearner(self.s_len, self.a_len, nn_len=10, w_actorcritic=True)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":30},"end":{"row":4,"column":35}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":37},"end":{"row":4,"column":42}},"text":"self."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":31}},"text":"1"},{"action":"insertText","range":{"start":{"row":39,"column":30},"end":{"row":39,"column":39}},"text":"STATE_LEN"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":22}},"text":"load1_l, load2_l, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":29},"end":{"row":11,"column":30}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":28},"end":{"row":11,"column":29}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":27},"end":{"row":11,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":26},"end":{"row":11,"column":27}},"text":","}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":25},"end":{"row":11,"column":26}},"text":"]"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":24},"end":{"row":11,"column":25}},"text":"["}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":23},"end":{"row":11,"column":24}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":","}]}]],"redo":[]},"/w_queues/deneme.py":{"scrollTop":672,"scrollLeft":0,"selection":{"start":{"row":87,"column":4},"end":{"row":87,"column":49}},"lastUse":1540925087109,"undo":[],"redo":[]}},"window":{"width":1920,"height":992,"top":0,"left":0,"isMaximized":true}}