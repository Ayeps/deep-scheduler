{"split":"2-0","session.current":["/eval_wmpi.py","/mrun.sh"],"session.open":{"/mrun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":3,"column":0},"end":{"row":3,"column":3}},"lastUse":1545757492380,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":20}},"text":" # 11"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":18},"end":{"row":10,"column":19}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":16},"end":{"row":10,"column":17}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":11},"end":{"row":10,"column":12}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":10},"end":{"row":10,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":16},"end":{"row":18,"column":17}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":36},"end":{"row":18,"column":38}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":36},"end":{"row":18,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":17,"column":14},"end":{"row":17,"column":15}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":36},"end":{"row":17,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":22},"end":{"row":9,"column":33}},"text":"'eval_wmpi'"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":21},"end":{"row":9,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":20},"end":{"row":9,"column":21}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":19},"end":{"row":9,"column":20}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":7},"end":{"row":9,"column":18}},"text":"'eval_wmpi'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":18},"end":{"row":9,"column":19}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":19},"end":{"row":9,"column":20}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":20},"end":{"row":9,"column":21}},"text":" "}]}]],"redo":[]},"/experience_replay.py":{"scrollTop":3831,"scrollLeft":0,"selection":{"start":{"row":203,"column":20},"end":{"row":203,"column":20}},"lastUse":1545757406528,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":167,"column":9},"end":{"row":167,"column":10}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":167,"column":10},"end":{"row":167,"column":11}},"text":"["}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":167,"column":11},"end":{"row":167,"column":12}},"text":"]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":168,"column":0},"end":{"row":168,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":167,"column":12},"end":{"row":168,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":167,"column":12},"end":{"row":167,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":2},"end":{"row":169,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":169,"column":0},"end":{"row":169,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":167,"column":0},"end":{"row":167,"column":14}},"text":"    0.85: [] }"},{"action":"removeLines","range":{"start":{"row":163,"column":0},"end":{"row":167,"column":0}},"nl":"\n","lines":["    0.3: [],","    0.5: [],","    0.6: [],","    0.75: [],"]},{"action":"removeText","range":{"start":{"row":162,"column":2},"end":{"row":162,"column":17}},"text":"ro__Esl_l_m = {"},{"action":"removeText","range":{"start":{"row":162,"column":2},"end":{"row":163,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":162,"column":0},"end":{"row":163,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":162,"column":0},"end":{"row":163,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":164,"column":0},"end":{"row":164,"column":42}},"text":"  scher.restore(ro__learning_count_m[ro] )"},{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":164,"column":0}},"nl":"\n","lines":["def plot_Esl_vs_ro():","  ro_l = []","  scher = RLScher(sinfo_m, mapping_m, sching_m, save_dir='save_expreplay_persist')"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":161,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":20},"end":{"row":177,"column":21}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":21},"end":{"row":177,"column":22}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":22},"end":{"row":177,"column":23}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":23},"end":{"row":177,"column":24}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":24},"end":{"row":177,"column":25}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":25},"end":{"row":177,"column":26}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":26},"end":{"row":177,"column":27}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":27},"end":{"row":177,"column":28}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":28},"end":{"row":177,"column":29}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":29},"end":{"row":177,"column":30}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":30},"end":{"row":177,"column":31}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":31},"end":{"row":177,"column":32}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":32},"end":{"row":177,"column":33}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":33},"end":{"row":177,"column":34}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":34},"end":{"row":177,"column":35}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":35},"end":{"row":177,"column":36}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":35},"end":{"row":177,"column":36}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":35},"end":{"row":177,"column":36}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":35},"end":{"row":177,"column":36}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":35},"end":{"row":177,"column":36}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":36},"end":{"row":177,"column":37}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":230,"column":10},"end":{"row":230,"column":14}},"text":"None"},{"action":"insertText","range":{"start":{"row":230,"column":10},"end":{"row":230,"column":11}},"text":"8"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":230,"column":11},"end":{"row":230,"column":12}},"text":"4"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":230,"column":12},"end":{"row":230,"column":13}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":217,"column":2},"end":{"row":217,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":231,"column":2},"end":{"row":231,"column":4}},"text":"# "}]}]],"redo":[]},"/scheduler.py":{"scrollTop":2891,"scrollLeft":0,"selection":{"start":{"row":162,"column":20},"end":{"row":162,"column":20}},"lastUse":1545757396023,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":4},"end":{"row":39,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":5},"end":{"row":39,"column":6}},"text":"x"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":6},"end":{"row":39,"column":7}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":7},"end":{"row":39,"column":8}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":8},"end":{"row":39,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":9},"end":{"row":39,"column":10}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":10},"end":{"row":39,"column":11}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":11},"end":{"row":39,"column":25}},"text":"AttributeError"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":25},"end":{"row":39,"column":26}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":26},"end":{"row":40,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":40,"column":0},"end":{"row":40,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":21},"end":{"row":41,"column":34}},"text":"j.totaldemand"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":21},"end":{"row":41,"column":22}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":10},"end":{"row":38,"column":23}},"text":"j.totaldemand"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":40,"column":6},"end":{"row":40,"column":23}},"text":"D = j.totaldemand"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":40,"column":10},"end":{"row":40,"column":23}},"text":"j.totaldemand"},{"action":"insertText","range":{"start":{"row":40,"column":10},"end":{"row":40,"column":32}},"text":"j.k*j.reqed*j.lifetime"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":4},"end":{"row":42,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":42,"column":0},"end":{"row":42,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":26},"end":{"row":39,"column":27}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":27},"end":{"row":39,"column":28}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":28},"end":{"row":39,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":29},"end":{"row":39,"column":45}},"text":"use_lessreal_sim"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":45},"end":{"row":39,"column":46}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":46},"end":{"row":39,"column":47}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":47},"end":{"row":39,"column":48}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":48},"end":{"row":39,"column":49}},"text":"T"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":49},"end":{"row":39,"column":50}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":50},"end":{"row":39,"column":51}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":51},"end":{"row":39,"column":52}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":119,"column":36},"end":{"row":120,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":120,"column":0},"end":{"row":120,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":120,"column":10},"end":{"row":120,"column":12}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":120,"column":8},"end":{"row":120,"column":10}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":120,"column":6},"end":{"row":120,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"nl":"\n","lines":["      "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":120,"column":9},"end":{"row":120,"column":10}},"text":"<"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":120,"column":10},"end":{"row":120,"column":11}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":120,"column":11},"end":{"row":120,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":120,"column":9},"end":{"row":120,"column":10}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":120,"column":10},"end":{"row":120,"column":11}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":120,"column":24},"end":{"row":120,"column":43}},"text":"== 4 or STATE_LEN ="},{"action":"insertText","range":{"start":{"row":120,"column":24},"end":{"row":120,"column":25}},"text":"<"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":113,"column":0},"end":{"row":120,"column":0}},"nl":"\n","lines":["    elif STATE_LEN == 3 or STATE_LEN == 5:","      for load1 in np.linspace(0, 0.9, 5):","        for load2 in np.linspace(load1, 1, 2):","          for D in D_l:","            qa_l = self.learner.get_a_q_l(state_(D, [load1, load2] ) )","            print(\"load1= {}, load2= {}, D= {}, qa_l= {}\".format(load1, load2, D, qa_l) )","            blog(a=np.argmax(qa_l) )"]}]}]],"redo":[]},"/eval_wmpi.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":104,"column":2},"end":{"row":104,"column":6}},"lastUse":1545757395998,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":18},"end":{"row":38,"column":19}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":18},"end":{"row":38,"column":19}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":26}},"text":"scher_l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":105,"column":2},"end":{"row":105,"column":42}},"text":"scher.restore(ro__learning_count_m[ro] )"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":105,"column":0},"end":{"row":106,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":8}},"text":"        "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":8},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":8},"end":{"row":19,"column":9}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":9},"end":{"row":19,"column":10}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":10},"end":{"row":19,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":11},"end":{"row":19,"column":12}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":12},"end":{"row":19,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":13},"end":{"row":19,"column":14}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":14},"end":{"row":19,"column":15}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":15},"end":{"row":19,"column":16}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":16},"end":{"row":19,"column":17}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":17},"end":{"row":19,"column":18}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":18},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":10}},"text":"          "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":10},"end":{"row":20,"column":50}},"text":"scher.restore(ro__learning_count_m[ro] )"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":0},"end":{"row":44,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":46,"column":0},"end":{"row":46,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":49,"column":0},"end":{"row":49,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":50,"column":0},"end":{"row":50,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":51,"column":0},"end":{"row":51,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":52,"column":0},"end":{"row":52,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":53,"column":0},"end":{"row":53,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":55,"column":0},"end":{"row":55,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":6},"end":{"row":43,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":47,"column":6},"end":{"row":47,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":48,"column":6},"end":{"row":48,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":50}},"text":"          scher.restore(ro__learning_count_m[ro] )"},{"action":"removeText","range":{"start":{"row":19,"column":8},"end":{"row":19,"column":18}},"text":"if i == 0:"},{"action":"removeText","range":{"start":{"row":19,"column":8},"end":{"row":20,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"nl":"\n","lines":["        "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"nl":"\n","lines":["        "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":47,"column":30},"end":{"row":48,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":6},"end":{"row":48,"column":16}},"text":"if i == 0:"},{"action":"insertText","range":{"start":{"row":48,"column":16},"end":{"row":49,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":49,"column":0},"end":{"row":49,"column":46}},"text":"      scher.restore(ro__learning_count_m[ro] )"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":48,"column":9},"end":{"row":48,"column":10}},"text":"i"},{"action":"insertText","range":{"start":{"row":48,"column":9},"end":{"row":48,"column":16}},"text":"scher_i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":49,"column":6},"end":{"row":49,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":33,"column":6},"end":{"row":33,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":34,"column":6},"end":{"row":34,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":35,"column":6},"end":{"row":35,"column":8}},"text":"# "},{"action":"insertText","range":{"start":{"row":36,"column":6},"end":{"row":36,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":37,"column":0},"end":{"row":38,"column":0}},"nl":"\n","lines":["      "]}]}]],"redo":[]},"/paper_plotting.py":{"scrollTop":2731,"scrollLeft":0,"selection":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"lastUse":1545706968887,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":158,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":0},"end":{"row":159,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":150,"column":0},"end":{"row":151,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":0},"end":{"row":152,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":152,"column":0},"end":{"row":153,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":0},"end":{"row":151,"column":21}},"text":"def plot_Esl_vs_ro():"},{"action":"insertText","range":{"start":{"row":151,"column":21},"end":{"row":152,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":152,"column":0},"end":{"row":154,"column":0}},"lines":["ro_l = []","scher = RLScher(sinfo_m, mapping_m, sching_m, save_dir='save_expreplay_persist')"]},{"action":"insertText","range":{"start":{"row":154,"column":0},"end":{"row":154,"column":40}},"text":"scher.restore(ro__learning_count_m[ro] )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":152,"column":0},"end":{"row":152,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":153,"column":0},"end":{"row":153,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":154,"column":0},"end":{"row":154,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":150,"column":0},"end":{"row":151,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":0},"end":{"row":151,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":2},"end":{"row":151,"column":3}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":3},"end":{"row":151,"column":4}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":4},"end":{"row":151,"column":5}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":5},"end":{"row":151,"column":6}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":6},"end":{"row":151,"column":7}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":7},"end":{"row":151,"column":8}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":8},"end":{"row":151,"column":9}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":9},"end":{"row":151,"column":10}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":10},"end":{"row":151,"column":11}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":11},"end":{"row":151,"column":12}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":12},"end":{"row":151,"column":13}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":13},"end":{"row":151,"column":14}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":14},"end":{"row":151,"column":15}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":15},"end":{"row":151,"column":16}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":16},"end":{"row":151,"column":17}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":17},"end":{"row":151,"column":18}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":18},"end":{"row":151,"column":19}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":19},"end":{"row":151,"column":20}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":20},"end":{"row":151,"column":21}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":21},"end":{"row":151,"column":22}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":22},"end":{"row":151,"column":23}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":23},"end":{"row":151,"column":24}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":24},"end":{"row":151,"column":25}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":25},"end":{"row":151,"column":26}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":26},"end":{"row":151,"column":27}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":27},"end":{"row":151,"column":28}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":28},"end":{"row":151,"column":29}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":29},"end":{"row":151,"column":30}},"text":"#"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":30},"end":{"row":151,"column":31}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":31},"end":{"row":151,"column":32}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":32},"end":{"row":151,"column":33}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":33},"end":{"row":151,"column":34}},"text":"L"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":34},"end":{"row":151,"column":35}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":35},"end":{"row":151,"column":36}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":36},"end":{"row":151,"column":37}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":37},"end":{"row":151,"column":38}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":38},"end":{"row":151,"column":39}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":39},"end":{"row":151,"column":40}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":40},"end":{"row":151,"column":41}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":41},"end":{"row":151,"column":42}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":42},"end":{"row":151,"column":43}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":43},"end":{"row":151,"column":44}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":44},"end":{"row":151,"column":45}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":45},"end":{"row":151,"column":46}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":46},"end":{"row":151,"column":47}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":47},"end":{"row":151,"column":48}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":48},"end":{"row":151,"column":49}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":49},"end":{"row":151,"column":78}},"text":"#############################"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":78},"end":{"row":151,"column":79}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":151,"column":79},"end":{"row":151,"column":80}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":155,"column":0},"end":{"row":155,"column":42}},"text":"  scher.restore(ro__learning_count_m[ro] )"},{"action":"removeText","range":{"start":{"row":154,"column":2},"end":{"row":154,"column":82}},"text":"scher = RLScher(sinfo_m, mapping_m, sching_m, save_dir='save_expreplay_persist')"},{"action":"removeText","range":{"start":{"row":154,"column":2},"end":{"row":155,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":4},"end":{"row":157,"column":5}},"text":"R"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":5},"end":{"row":157,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":6},"end":{"row":157,"column":7}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":7},"end":{"row":157,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":8},"end":{"row":157,"column":9}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":9},"end":{"row":157,"column":10}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":10},"end":{"row":157,"column":11}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":11},"end":{"row":157,"column":12}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":12},"end":{"row":157,"column":13}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":13},"end":{"row":157,"column":14}},"text":"-"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":14},"end":{"row":157,"column":15}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":15},"end":{"row":157,"column":16}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":16},"end":{"row":157,"column":17}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":17},"end":{"row":157,"column":18}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":13},"end":{"row":157,"column":14}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":5},"end":{"row":157,"column":13}},"text":"edundant"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":5},"end":{"row":157,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":6},"end":{"row":157,"column":7}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":7},"end":{"row":157,"column":8}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":7},"end":{"row":157,"column":8}},"text":"A"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":4},"end":{"row":157,"column":10}},"text":"RedAll"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":157,"column":3},"end":{"row":157,"column":4}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":6}},"text":"RedAll"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":6},"end":{"row":157,"column":7}},"text":"_"}]}]],"redo":[]},"/model_checking_wmpi.py":{"scrollTop":2251,"scrollLeft":0,"selection":{"start":{"row":132,"column":38},"end":{"row":132,"column":38}},"lastUse":1545706847339,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":70},"end":{"row":74,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":74,"column":0},"end":{"row":74,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":4},"end":{"row":74,"column":5}},"text":"b"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":5},"end":{"row":74,"column":6}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":6},"end":{"row":74,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":7},"end":{"row":74,"column":8}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":8},"end":{"row":74,"column":9}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":9},"end":{"row":74,"column":10}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":9},"end":{"row":74,"column":79}},"text":"Prqing_wMGc_l=Prqing_wMGc_l, approx_Prqing_wMGc_l=approx_Prqing_wMGc_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":4},"end":{"row":74,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":9},"end":{"row":9,"column":15}},"text":"round("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":41},"end":{"row":9,"column":42}},"text":"\\"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":40},"end":{"row":9,"column":41}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":40},"end":{"row":9,"column":41}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":41},"end":{"row":9,"column":42}},"text":"\\"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":38},"end":{"row":9,"column":39}},"text":")"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":37},"end":{"row":9,"column":38}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":36},"end":{"row":9,"column":37}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":35},"end":{"row":9,"column":36}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":15}},"text":"round("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":35},"end":{"row":10,"column":36}},"text":","}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":34},"end":{"row":10,"column":35}},"text":")"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":33},"end":{"row":10,"column":34}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":32},"end":{"row":10,"column":33}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":31},"end":{"row":10,"column":32}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":31}},"text":"sim_m['waittime_mean']"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":37},"end":{"row":9,"column":38}},"text":"\\"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":36},"end":{"row":9,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":36},"end":{"row":9,"column":37}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":37},"end":{"row":9,"column":59}},"text":"sim_m['waittime_mean']"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["          \\"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":9},"end":{"row":10,"column":15}},"text":"round("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":9}},"text":"         "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":59},"end":{"row":10,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":59},"end":{"row":9,"column":60}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":60},"end":{"row":9,"column":61}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":93},"end":{"row":9,"column":94}},"text":")"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":92},"end":{"row":9,"column":93}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":91},"end":{"row":9,"column":92}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":90},"end":{"row":9,"column":91}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":146,"column":2},"end":{"row":146,"column":4}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":146,"column":0},"end":{"row":146,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":145,"column":14},"end":{"row":146,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":145,"column":14},"end":{"row":145,"column":15}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":146,"column":0},"end":{"row":146,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":145,"column":29},"end":{"row":146,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":145,"column":29},"end":{"row":145,"column":30}},"text":" "}]}]],"redo":[]},"/rlearning.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":22,"column":15},"end":{"row":22,"column":15}},"lastUse":1545682504075,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":15},"end":{"row":28,"column":16}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":16},"end":{"row":28,"column":17}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":17},"end":{"row":28,"column":27}},"text":"j.lifetime"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":27},"end":{"row":28,"column":28}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":27,"column":4},"end":{"row":27,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":4},"end":{"row":28,"column":73}},"text":"return [j.k, j.lifetime, len(cluster.store.items), np.mean(wload_l) ]"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":28,"column":0},"end":{"row":29,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":78},"end":{"row":24,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":4},"end":{"row":24,"column":73}},"text":"return [j.k, j.lifetime, len(cluster.store.items), np.mean(wload_l) ]"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":4},"end":{"row":24,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":22,"column":4},"end":{"row":22,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":23,"column":4},"end":{"row":23,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":22,"column":4},"end":{"row":22,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":15},"end":{"row":19,"column":39}},"text":"len(cluster.store.items)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":39},"end":{"row":19,"column":40}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":40},"end":{"row":19,"column":41}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":41},"end":{"row":19,"column":67}},"text":"min(wload_l), max(wload_l)"},{"action":"insertText","range":{"start":{"row":19,"column":41},"end":{"row":19,"column":57}},"text":"np.mean(wload_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":12},"end":{"row":9,"column":13}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":13},"end":{"row":9,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":14},"end":{"row":9,"column":15}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":15},"end":{"row":9,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":26},"end":{"row":34,"column":38}},"text":"min(wload_l)"},{"action":"insertText","range":{"start":{"row":34,"column":26},"end":{"row":34,"column":38}},"text":"cluster_qlen"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":40},"end":{"row":34,"column":52}},"text":"max(wload_l)"},{"action":"insertText","range":{"start":{"row":34,"column":40},"end":{"row":34,"column":56}},"text":"np.mean(wload_l)"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":4},"end":{"row":20,"column":44}},"text":"(jtotaldemand, cluster_qlen, mean_wload)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":59},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":4}},"text":"    "}]}]]},"/q_learning.py":{"scrollTop":1106.5,"scrollLeft":0,"selection":{"start":{"row":76,"column":45},"end":{"row":76,"column":45}},"lastUse":1545682442808,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":61},"end":{"row":329,"column":62}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":62},"end":{"row":329,"column":63}},"text":"S"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":63},"end":{"row":329,"column":64}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":64},"end":{"row":329,"column":65}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":329,"column":64},"end":{"row":329,"column":65}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":329,"column":63},"end":{"row":329,"column":64}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":63},"end":{"row":329,"column":64}},"text":"A"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":64},"end":{"row":329,"column":65}},"text":"R"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":65},"end":{"row":329,"column":66}},"text":"S"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":329,"column":66},"end":{"row":329,"column":67}},"text":"A"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":63},"end":{"row":101,"column":64}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":64},"end":{"row":101,"column":65}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":65},"end":{"row":101,"column":66}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":66},"end":{"row":101,"column":69}},"text":"10*"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":101,"column":19},"end":{"row":101,"column":20}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":101,"column":18},"end":{"row":101,"column":19}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":101,"column":18},"end":{"row":101,"column":19}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":4},"end":{"row":69,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":5},"end":{"row":69,"column":6}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":4},"end":{"row":70,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":70,"column":0},"end":{"row":70,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":4},"end":{"row":69,"column":22}},"text":"if STATE_LEN == 4:"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":20},"end":{"row":69,"column":21}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":20},"end":{"row":69,"column":21}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":22},"end":{"row":70,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":70,"column":0},"end":{"row":70,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":70,"column":6},"end":{"row":70,"column":25}},"text":"cluster_qlen = s[1]"},{"action":"insertText","range":{"start":{"row":70,"column":25},"end":{"row":71,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":71,"column":0},"end":{"row":73,"column":0}},"lines":["      mean_wload = round(math.floor(s[2]/self.wload_step)*self.wload_step, 1)","      std_wload = round(math.floor(s[3]/self.wload_step)*self.wload_step, 1)"]},{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":64}},"text":"      return (jtotaldemand, cluster_qlen, mean_wload, std_wload)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":72,"column":0},"end":{"row":73,"column":0}},"nl":"\n","lines":["      std_wload = round(math.floor(s[3]/self.wload_step)*self.wload_step, 1)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":72,"column":0},"end":{"row":73,"column":0}},"nl":"\n","lines":["      return (jtotaldemand, cluster_qlen, mean_wload, std_wload)"]},{"action":"insertLines","range":{"start":{"row":71,"column":0},"end":{"row":72,"column":0}},"lines":["      return (jtotaldemand, cluster_qlen, mean_wload, std_wload)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":72,"column":0}},"nl":"\n","lines":["      return (jtotaldemand, cluster_qlen, mean_wload, std_wload)"]},{"action":"insertLines","range":{"start":{"row":72,"column":0},"end":{"row":73,"column":0}},"lines":["      return (jtotaldemand, cluster_qlen, mean_wload, std_wload)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":72,"column":52},"end":{"row":72,"column":63}},"text":", std_wload"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":70,"column":6},"end":{"row":70,"column":25}},"text":"cluster_qlen = s[1]"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":68,"column":86},"end":{"row":69,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":69,"column":0},"end":{"row":69,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":4},"end":{"row":69,"column":23}},"text":"cluster_qlen = s[1]"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":72,"column":0}},"nl":"\n","lines":["      "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":74,"column":0},"end":{"row":75,"column":0}},"nl":"\n","lines":["      cluster_qlen = s[1]"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":78,"column":0},"end":{"row":79,"column":0}},"nl":"\n","lines":["      cluster_qlen = s[1]"]}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":20,"column":0},"end":{"row":20,"column":0}},"lastUse":1545674431060,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":12},"end":{"row":26,"column":13}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":13},"end":{"row":26,"column":14}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":14},"end":{"row":26,"column":15}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":9},"end":{"row":9,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":9},"end":{"row":9,"column":10}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":17},"end":{"row":10,"column":18}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":2},"end":{"row":10,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["  # MEM=$(($NTASKS*4*1024))"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":18}},"text":"$MEM"},{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"8"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":16},"end":{"row":16,"column":17}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":17},"end":{"row":16,"column":18}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"8"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":16,"column":15}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":9},"end":{"row":9,"column":10}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":9},"end":{"row":9,"column":10}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":17},"end":{"row":19,"column":24}},"text":"log_sim"},{"action":"insertText","range":{"start":{"row":19,"column":17},"end":{"row":19,"column":25}},"text":"logmodel"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":37,"column":2},"end":{"row":37,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":37,"column":21},"end":{"row":38,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":38,"column":0},"end":{"row":38,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":2},"end":{"row":38,"column":19}},"text":"$PY plot_scher.py"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":7},"end":{"row":38,"column":10}},"text":"lot"},{"action":"insertText","range":{"start":{"row":38,"column":7},"end":{"row":38,"column":8}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":8},"end":{"row":38,"column":9}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":9},"end":{"row":38,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":10},"end":{"row":38,"column":11}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":12},"end":{"row":38,"column":17}},"text":"scher"},{"action":"insertText","range":{"start":{"row":38,"column":12},"end":{"row":38,"column":13}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":13},"end":{"row":38,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":14},"end":{"row":38,"column":15}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":15},"end":{"row":38,"column":16}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":16},"end":{"row":38,"column":17}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":17},"end":{"row":38,"column":18}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":18},"end":{"row":38,"column":19}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":19},"end":{"row":38,"column":20}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":23},"end":{"row":31,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":0},"end":{"row":31,"column":13}},"text":"rm logmodel/*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":0},"end":{"row":31,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":31,"column":5},"end":{"row":31,"column":13}},"text":"logmodel"},{"action":"insertText","range":{"start":{"row":31,"column":5},"end":{"row":31,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":6},"end":{"row":31,"column":7}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":7},"end":{"row":31,"column":8}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":8},"end":{"row":31,"column":9}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":9},"end":{"row":31,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":10},"end":{"row":31,"column":11}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":11},"end":{"row":31,"column":12}},"text":"x"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":12},"end":{"row":31,"column":13}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":13},"end":{"row":31,"column":14}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":14},"end":{"row":31,"column":15}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":15},"end":{"row":31,"column":16}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":16},"end":{"row":31,"column":17}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":17},"end":{"row":31,"column":18}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":31,"column":18},"end":{"row":31,"column":19}},"text":"y"}]}]],"redo":[]},"/srun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"lastUse":1545674361050,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"3"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":82},"end":{"row":4,"column":83}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":82},"end":{"row":4,"column":83}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":82},"end":{"row":4,"column":83}},"text":"2"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":81},"end":{"row":4,"column":82}},"text":"2"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":82},"end":{"row":4,"column":83}},"text":"4"}]}]],"redo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":1}},"text":"o"}]}]]},"/model_checking.py":{"scrollTop":2940.5,"scrollLeft":0,"selection":{"start":{"row":192,"column":49},"end":{"row":192,"column":49}},"lastUse":1543423701477,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":185,"column":44},"end":{"row":185,"column":45}},"text":"S"},{"action":"insertText","range":{"start":{"row":185,"column":44},"end":{"row":185,"column":46}},"text":"Sl"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":201,"column":12},"end":{"row":201,"column":13}},"text":"S"},{"action":"insertText","range":{"start":{"row":201,"column":12},"end":{"row":201,"column":14}},"text":"Sl"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":202,"column":18},"end":{"row":202,"column":19}},"text":"S"},{"action":"insertText","range":{"start":{"row":202,"column":18},"end":{"row":202,"column":20}},"text":"Sl"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":239,"column":132},"end":{"row":239,"column":133}},"text":"S"},{"action":"insertText","range":{"start":{"row":239,"column":132},"end":{"row":239,"column":134}},"text":"Sl"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":239,"column":158},"end":{"row":239,"column":159}},"text":"S"},{"action":"insertText","range":{"start":{"row":239,"column":158},"end":{"row":239,"column":160}},"text":"Sl"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":204,"column":58},"end":{"row":204,"column":59}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":204,"column":58},"end":{"row":204,"column":59}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":246,"column":16},"end":{"row":246,"column":17}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":10},"end":{"row":174,"column":11}},"text":"5"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"8"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"8"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":13},"end":{"row":170,"column":17}},"text":"1, 4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":17},"end":{"row":170,"column":18}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":18},"end":{"row":170,"column":19}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":19},"end":{"row":170,"column":20}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":170,"column":24},"end":{"row":170,"column":31}},"text":" # 1, 4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":170,"column":16},"end":{"row":170,"column":17}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":16},"end":{"row":170,"column":17}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":17},"end":{"row":170,"column":18}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":174,"column":9},"end":{"row":174,"column":10}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":151,"column":0},"end":{"row":151,"column":54}},"text":"  return ro*N*Cap/k.mean()/R.mean()/L.mean()/Sl.mean()"},{"action":"removeLines","range":{"start":{"row":147,"column":0},"end":{"row":151,"column":0}},"nl":"\n","lines":["# def ar_for_ro(ro, N, Cap, k, D, Sl):","#   return ro*N*Cap/k.mean()/D.mean()/Sl.mean()","","def ar_for_ro(ro, N, Cap, k, R, L, Sl):"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":147,"column":0},"end":{"row":148,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":147,"column":0},"end":{"row":148,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":169,"column":21},"end":{"row":169,"column":22}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":169,"column":21},"end":{"row":169,"column":22}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":168,"column":9},"end":{"row":168,"column":10}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":168,"column":9},"end":{"row":168,"column":10}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":169,"column":21},"end":{"row":169,"column":22}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":169,"column":21},"end":{"row":169,"column":22}},"text":"2"}]}]]},"/mgn_model.py":{"scrollTop":4950,"scrollLeft":0,"selection":{"start":{"row":252,"column":4},"end":{"row":252,"column":17}},"lastUse":1543363899754,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":283,"column":26},"end":{"row":283,"column":27}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":283,"column":27},"end":{"row":283,"column":28}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":283,"column":28},"end":{"row":283,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":283,"column":25},"end":{"row":283,"column":26}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"1"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":17},"end":{"row":256,"column":18}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"5"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":17},"end":{"row":256,"column":18}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":17},"end":{"row":256,"column":18}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":18},"end":{"row":256,"column":19}},"text":"1"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":17},"end":{"row":256,"column":18}},"text":"."}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":256,"column":16},"end":{"row":256,"column":17}},"text":"4"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":19,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":0},"end":{"row":19,"column":21}},"text":"def EW_MGc(ar, X, c):"},{"action":"insertText","range":{"start":{"row":19,"column":21},"end":{"row":20,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":20,"column":0},"end":{"row":22,"column":0}},"lines":["EX2, EX = X.moment(2), X.moment(1)","CoeffVar = math.sqrt(EX2 - EX**2)/EX"]},{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":46}},"text":"return (1 + CoeffVar**2)/2 * EW_MMc(ar, EX, c)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":10},"end":{"row":19,"column":11}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":16},"end":{"row":19,"column":17}},"text":"E"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":19},"end":{"row":19,"column":20}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":18},"end":{"row":19,"column":19}},"text":","}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":17},"end":{"row":19,"column":18}},"text":"X"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":19,"column":16},"end":{"row":19,"column":17}},"text":"E"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":17},"end":{"row":19,"column":18}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":18},"end":{"row":19,"column":19}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":19},"end":{"row":19,"column":20}},"text":"E"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":20},"end":{"row":19,"column":21}},"text":"X"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":21},"end":{"row":19,"column":22}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":22},"end":{"row":19,"column":23}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":23},"end":{"row":19,"column":24}},"text":"E"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":24},"end":{"row":19,"column":25}},"text":"X"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":19,"column":25},"end":{"row":19,"column":26}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":20,"column":0},"end":{"row":21,"column":0}},"nl":"\n","lines":["  EX2, EX = X.moment(2), X.moment(1)"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":48}},"text":"  return (1 + CoeffVar**2)/2 * EW_MMc(ar, EX, c)"},{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":21,"column":0}},"nl":"\n","lines":["def EW_MGc_(ar, c, EX, EX2):","  CoeffVar = math.sqrt(EX2 - EX**2)/EX"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[]},"/plot_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":10,"column":15},"end":{"row":10,"column":15}},"lastUse":1543363884188,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":46},"end":{"row":18,"column":47}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":47},"end":{"row":18,"column":48}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":48},"end":{"row":18,"column":53}},"text":"'+', "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":82},"end":{"row":18,"column":83}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":83},"end":{"row":18,"column":84}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":84},"end":{"row":18,"column":85}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":84},"end":{"row":18,"column":85}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":84},"end":{"row":18,"column":89}},"text":"'+', "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":88},"end":{"row":18,"column":89}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":87},"end":{"row":18,"column":88}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":89},"end":{"row":15,"column":95}},"text":"'gray'"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":88},"end":{"row":15,"column":89}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":87},"end":{"row":15,"column":88}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":55},"end":{"row":15,"column":61}},"text":"'gray'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":61},"end":{"row":15,"column":62}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":62},"end":{"row":15,"column":63}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":76},"end":{"row":15,"column":85}},"text":"'magenta'"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":75},"end":{"row":15,"column":76}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":15,"column":74},"end":{"row":15,"column":75}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":63},"end":{"row":15,"column":72}},"text":"'magenta'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":72},"end":{"row":15,"column":73}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":73},"end":{"row":15,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":46},"end":{"row":18,"column":51}},"text":", 'v'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":41},"end":{"row":18,"column":46}},"text":", 'v'"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":48},"end":{"row":18,"column":53}},"text":"'x', "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":61},"end":{"row":18,"column":62}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":63},"end":{"row":18,"column":68}},"text":"'x', "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":63},"end":{"row":18,"column":68}},"text":"'x', "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":78},"end":{"row":18,"column":83}},"text":"'x', "}]}]],"redo":[]},"/learn_wmpi.py":{"scrollTop":161.5,"scrollLeft":0,"selection":{"start":{"row":38,"column":52},"end":{"row":38,"column":95}},"lastUse":1543248541942,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":190,"column":14},"end":{"row":190,"column":15}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":23},"end":{"row":6,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":1},"end":{"row":6,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":2},"end":{"row":6,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":3},"end":{"row":6,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":4},"end":{"row":6,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":5},"end":{"row":6,"column":6}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":6},"end":{"row":6,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":7},"end":{"row":6,"column":8}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":8},"end":{"row":6,"column":9}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":9},"end":{"row":6,"column":10}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":10},"end":{"row":6,"column":11}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":11},"end":{"row":6,"column":12}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":12},"end":{"row":6,"column":13}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":12},"end":{"row":6,"column":13}},"text":"g"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":11},"end":{"row":6,"column":12}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":11},"end":{"row":6,"column":12}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":12},"end":{"row":6,"column":13}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":13},"end":{"row":6,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":14},"end":{"row":6,"column":15}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":15},"end":{"row":6,"column":16}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":16},"end":{"row":6,"column":17}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":17},"end":{"row":6,"column":18}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":18},"end":{"row":6,"column":19}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":19},"end":{"row":6,"column":20}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":20},"end":{"row":6,"column":21}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":21},"end":{"row":6,"column":22}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":2},"end":{"row":177,"column":3}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":3},"end":{"row":177,"column":4}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":4},"end":{"row":177,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":5},"end":{"row":177,"column":6}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":6},"end":{"row":177,"column":7}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":7},"end":{"row":177,"column":8}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":8},"end":{"row":177,"column":9}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":9},"end":{"row":177,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":10},"end":{"row":177,"column":11}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":11},"end":{"row":177,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":12},"end":{"row":177,"column":13}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":13},"end":{"row":177,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":14},"end":{"row":177,"column":15}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":177,"column":15},"end":{"row":177,"column":16}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":16},"end":{"row":177,"column":17}},"text":"L"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":78,"column":19},"end":{"row":78,"column":20}},"text":"L"},{"action":"insertText","range":{"start":{"row":78,"column":19},"end":{"row":78,"column":33}},"text":"nlearningsteps"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":106,"column":15},"end":{"row":106,"column":16}},"text":"L"},{"action":"insertText","range":{"start":{"row":106,"column":15},"end":{"row":106,"column":29}},"text":"nlearningsteps"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":187,"column":11},"end":{"row":187,"column":12}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":187,"column":11},"end":{"row":187,"column":12}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":191,"column":23},"end":{"row":191,"column":30}},"text":"2000*N,"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":191,"column":22},"end":{"row":191,"column":23}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":191,"column":21},"end":{"row":191,"column":22}},"text":"#"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":191,"column":20},"end":{"row":191,"column":21}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":191,"column":14},"end":{"row":191,"column":21}},"text":"2000*N,"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":191,"column":21},"end":{"row":191,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":191,"column":22},"end":{"row":191,"column":23}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":191,"column":23},"end":{"row":191,"column":24}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"nl":"\n","lines":["    def alpha_gen(ro):"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"nl":"\n","lines":["      return alpha"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":170,"column":0},"end":{"row":171,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":184,"column":11},"end":{"row":184,"column":12}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":184,"column":11},"end":{"row":184,"column":12}},"text":"6"}]}]],"redo":[]},"/sim_objs_lessreal.py":{"scrollTop":3952.5,"scrollLeft":0,"selection":{"start":{"row":261,"column":11},"end":{"row":261,"column":11}},"lastUse":1543246462684,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":234,"column":0},"end":{"row":235,"column":0}},"nl":"\n","lines":["      "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":233,"column":0},"end":{"row":234,"column":0}},"nl":"\n","lines":["      # log(INFO, \"j.k= {}\".format(j.k) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":268,"column":0},"end":{"row":269,"column":0}},"nl":"\n","lines":["        # log(INFO, \"wrecvedfrom_id_l= {}\".format(wrecvedfrom_id_l) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":178,"column":0},"end":{"row":179,"column":0}},"nl":"\n","lines":["    # log(INFO, \"sl= {}\".format(sl) )"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":9},"end":{"row":177,"column":36}},"text":"self.sl(self.sched_load() )"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":177,"column":0},"end":{"row":178,"column":0}},"nl":"\n","lines":["    sl = "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":32},"end":{"row":177,"column":34}},"text":"sl"},{"action":"insertText","range":{"start":{"row":177,"column":32},"end":{"row":177,"column":59}},"text":"self.sl(self.sched_load() )"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":236,"column":34},"end":{"row":236,"column":35}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":236,"column":35},"end":{"row":236,"column":36}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":227,"column":36},"end":{"row":227,"column":37}},"text":"0"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":227,"column":37},"end":{"row":227,"column":38}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":227,"column":37},"end":{"row":227,"column":38}},"text":"0"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":227,"column":36},"end":{"row":227,"column":37}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":315,"column":27},"end":{"row":315,"column":38}},"text":"totaldemand"},{"action":"insertText","range":{"start":{"row":315,"column":27},"end":{"row":315,"column":28}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":28},"end":{"row":315,"column":29}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":29},"end":{"row":315,"column":30}},"text":"q"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":30},"end":{"row":315,"column":31}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":31},"end":{"row":315,"column":32}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":32},"end":{"row":315,"column":33}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":33},"end":{"row":315,"column":43}},"text":"self.reqed"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":315,"column":33},"end":{"row":315,"column":43}},"text":"self.reqed"},{"action":"insertText","range":{"start":{"row":315,"column":33},"end":{"row":315,"column":34}},"text":"j"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":34},"end":{"row":315,"column":35}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":35},"end":{"row":315,"column":36}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":36},"end":{"row":315,"column":37}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":37},"end":{"row":315,"column":38}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":38},"end":{"row":315,"column":39}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":39},"end":{"row":315,"column":40}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":40},"end":{"row":315,"column":41}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":41},"end":{"row":315,"column":42}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":315,"column":42},"end":{"row":315,"column":43}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":224,"column":11},"end":{"row":224,"column":12}},"text":"r"},{"action":"insertText","range":{"start":{"row":224,"column":11},"end":{"row":224,"column":12}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":225,"column":11},"end":{"row":225,"column":12}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":225,"column":11},"end":{"row":225,"column":12}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":226,"column":39},"end":{"row":226,"column":40}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":226,"column":39},"end":{"row":226,"column":40}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":243,"column":21},"end":{"row":243,"column":22}},"text":"r"},{"action":"insertText","range":{"start":{"row":243,"column":21},"end":{"row":243,"column":22}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":243,"column":17},"end":{"row":243,"column":18}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":243,"column":17},"end":{"row":243,"column":18}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":280,"column":8},"end":{"row":280,"column":10}},"text":"# "},{"action":"insertText","range":{"start":{"row":281,"column":8},"end":{"row":281,"column":10}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":281,"column":18},"end":{"row":282,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":282,"column":0},"end":{"row":282,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":283,"column":8},"end":{"row":283,"column":10}},"text":"# "},{"action":"removeText","range":{"start":{"row":284,"column":8},"end":{"row":284,"column":10}},"text":"# "},{"action":"removeText","range":{"start":{"row":285,"column":8},"end":{"row":285,"column":10}},"text":"# "},{"action":"removeText","range":{"start":{"row":286,"column":8},"end":{"row":286,"column":10}},"text":"# "},{"action":"removeText","range":{"start":{"row":287,"column":8},"end":{"row":287,"column":10}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":278,"column":8},"end":{"row":278,"column":10}},"text":"# "}]}]],"redo":[]},"/policygrad_learning.py":{"scrollTop":169.5,"scrollLeft":0,"selection":{"start":{"row":29,"column":14},"end":{"row":29,"column":14}},"lastUse":1543194789961,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":41},"end":{"row":28,"column":42}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":42},"end":{"row":28,"column":43}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":43},"end":{"row":28,"column":44}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":44},"end":{"row":28,"column":45}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":45},"end":{"row":28,"column":46}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":46},"end":{"row":28,"column":47}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":47},"end":{"row":28,"column":48}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":47},"end":{"row":28,"column":48}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":47},"end":{"row":28,"column":48}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":48},"end":{"row":28,"column":49}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":49},"end":{"row":28,"column":50}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":50},"end":{"row":28,"column":51}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":46},"end":{"row":27,"column":63}},"text":", save_dir='save'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":63},"end":{"row":27,"column":64}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":64},"end":{"row":27,"column":65}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":27,"column":47},"end":{"row":27,"column":48}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":27,"column":46},"end":{"row":27,"column":47}},"text":","}]}]],"redo":[]},"/sim_objs.py":{"scrollTop":2145.5,"scrollLeft":0,"selection":{"start":{"row":127,"column":32},"end":{"row":127,"column":32}},"lastUse":1543174715350,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":304,"column":10},"end":{"row":304,"column":12}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"nl":"\n","lines":["        # print(\"job completed, jid= {}\".format(t.jid) )"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":22},"end":{"row":3,"column":27}},"text":"Scher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":27},"end":{"row":3,"column":28}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":28},"end":{"row":3,"column":29}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":29},"end":{"row":3,"column":36}},"text":"RLScher"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["# from scheduler import Scher, RLScher"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    if len(self.store.items) >= 1000:","      # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","      return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":309,"column":0}},"nl":"\n","lines":["import math, random, simpy, pprint","from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":34}},"text":"import math, random, simpy, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":309,"column":0}},"lines":["from operator import itemgetter","","from rvs import *","from log_utils import *","","# #######################################  Task  ######################################## #","class Task(object):","  def __init__(self, _id, jid, reqed, demandperslot_rv, totaldemand, k, type_=None):","    self._id = _id","    self.jid = jid","    self.reqed = reqed","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    self.k = k","    self.type_ = type_ # 's': systematic, 'r': redundant","    ","    self.demandperslot_rv_mean = demandperslot_rv.mean()","    ","    self.prev_hop_id = None","    self.binding_time = None","    self.run_time = None","    ","    self.cum_supply = 0","    self.cum_demand = 0","  ","  def __repr__(self):","    return \"Task[id= {}, jid= {}, type= {}]\".format(self._id, self.jid, self.type_)","  ","  def gen_demand(self):","    # d = min(self.demandperslot_rv.sample(), self.totaldemand - self.cum_demand)","    d = min(self.demandperslot_rv_mean, self.totaldemand - self.cum_demand)","    self.cum_demand += d","    return d","  ","  def take_supply(self, s):","    s_ = min(self.cum_demand - self.cum_supply, s)","    self.cum_supply += s_","    return s_","","class Job(object):","  def __init__(self, _id, k, n, demandperslot_rv, totaldemand):","    self._id = _id","    self.k = k","    self.n = n","    self.demandperslot_rv = demandperslot_rv","    self.totaldemand = totaldemand","    ","    self.reqed = self.demandperslot_rv.mean()","  ","  def __repr__(self):","    # return \"Job[id= {}]\".format(self._id)","    return \"Job[id= {}, k= {}, totaldemand= {}, reqed= {}]\".format(self._id, self.k, self.totaldemand, self.reqed)","","class JobGen(object):","  def __init__(self, env, ar, demandperslot_mean_rv, totaldemand_rv, k_rv, njob, out, **kwargs):","    self.env = env","    self.ar = ar","    self.demandperslot_mean_rv = demandperslot_mean_rv","    self.totaldemand_rv = totaldemand_rv","    self.k_rv = k_rv","    self.njob = njob","    self.out = out","    ","    self.nsent = 0","    ","    self.action = self.env.process(self.run_poisson() )","  ","  def run_poisson(self):","    while 1:","      yield self.env.timeout(random.expovariate(self.ar) )","      self.nsent += 1","      k = self.k_rv.sample()","      demandmean = self.demandperslot_mean_rv.sample()","      coeff_var = 0.7","      self.out.put(Job(","        _id = self.nsent,","        k = k, n = k,","        demandperslot_rv = TNormal(demandmean, demandmean*coeff_var),","        totaldemand = self.totaldemand_rv.sample() ) )","      ","      # if self.nsent >= self.njob:","      #   return","","# #########################################  Worker  ############################################# #","class Worker(object):","  def __init__(self, env, _id, cap, out_c, straggle_m):","    self.env = env","    self._id = _id","    self.cap = cap","    self.out_c = out_c","    self.straggle_m = straggle_m","    ","    self.cap_ = self.cap","    ","    self.timeslot = 1","    self.t_l = []","    env.process(self.run() )","    env.process(self.straggle() )","    ","    self.ntimeslots = 0","    self.avg_load = 0","  ","  def straggle(self):","    sl = self.straggle_m['slowdown']","    straggle_dur_rv = self.straggle_m['straggle_dur_rv']","    normal_dur_v = self.straggle_m['normal_dur_rv']","    while True:","      self.cap_ = self.cap*sl(self.sched_load() )","      yield (self.env.timeout(straggle_dur_rv.sample() ) )","      self.cap_ = self.cap","      yield (self.env.timeout(normal_dur_v.sample() ) )","  ","  def __repr__(self):","    return \"Worker[id= {}]\".format(self._id)","  ","  def sched_cap(self):","    if len(self.t_l) == 0:","      return 0","    return sum([t.reqed for t in self.t_l] )","  ","  def nonsched_cap(self):","    return self.cap - self.sched_cap()","  ","  def sched_load(self):","    return self.sched_cap()/self.cap","  ","  def update_avg_load(self, load):","    self.avg_load = (self.avg_load*(self.ntimeslots-1) + load)/self.ntimeslots","  ","  def run(self):","    while True:","      yield (self.env.timeout(self.timeslot) )","      self.ntimeslots += 1","      if len(self.t_l) == 0:","        self.update_avg_load(0)","        continue","      ","      for p in self.t_l:","        p.gen_demand()","      ","      # CPU scheduling","      cap_ = self.cap_","      sched_cap = self.sched_cap()","      total_supplytaken = 0","      for t in self.t_l:","        total_supplytaken += t.take_supply(min(t.reqed, t.reqed/sched_cap*cap_) )","      ","      t_l_ = self.t_l","      while cap_ - total_supplytaken > 0.01:","        t_l_ = [t for t in t_l_ if t.cum_demand - t.cum_supply > 0.01]","        if len(t_l_) == 0:","          break","        ","        supply_foreach = (cap_ - total_supplytaken)/len(t_l_)","        for t in t_l_:","          total_supplytaken += t.take_supply(supply_foreach)","      self.update_avg_load(self.sched_load() )","      # Check if a task is finished","      t_l_ = []","      for t in self.t_l:","        if t.cum_supply - t.totaldemand > -0.01:","          t.run_time = self.env.now - t.binding_time","          t.prev_hop_id = self._id","          self.out_c.put_c(t)","          slog(DEBUG, self.env, self, \"finished\", t)","        else:","          t_l_.append(t)","      self.t_l = t_l_","  ","  def put(self, t):","    avail_cap = self.nonsched_cap()","    if t.type_ == 's' and t.reqed > avail_cap:","      tred_l = [t for t in self.t_l if t.type_ == 'r']","      i = 0","      while i < len(tred_l) and avail_cap < t.reqed:","        tred = tred_l[i]","        avail_cap += tred.reqed","        self.t_l.remove(tred)","        i += 1","      if avail_cap < t.reqed:","        slog(ERROR, self.env, self, \"could not bind\", t)","        return","    elif t.type_ == 'r' and t.reqed > avail_cap:","      return","    ","    t.binding_time = self.env.now","    self.t_l.append(t)","    slog(DEBUG, self.env, self, \"binded, njob= {}\".format(len(self.t_l) ), t)","  ","  def put_c(self, m):","    slog(DEBUG, self.env, self, \"received\", m)","    ","    if m['message'] == 'remove':","      jid = m['jid']","      ti = None","      for i, t in enumerate(self.t_l):","        if t.jid == jid:","          ti = i","      if ti is not None:","        slog(DEBUG, self.env, self, \"removing\", self.t_l[ti] )","        del self.t_l[ti]","    else:","      log(ERROR, \"Unrecognized message;\", m=m)","","# #########################################  Cluster  ############################################ #","class Cluster(object):","  def __init__(self, env, njob, nworker, wcap, straggle_m, scher, **kwargs):","    self.env = env","    self.njob = njob","    self.nworker = nworker","    self.wcap = wcap","    self.straggle_m = straggle_m","    self.scher = scher","    ","    self.w_l = [Worker(env, i, wcap, self, straggle_m) for i in range(nworker) ]","    ","    self.store = simpy.Store(env)","    env.process(self.run() )","    ","    self.njob_finished = 0","    self.store_c = simpy.Store(env)","    self.wait_for_alljobs = env.process(self.run_c() )","    ","    self.jid__t_l_m = {}","    self.jid_info_m = {}","    ","  def __repr__(self):","    # return 'Cluster[' + '\\n' + \\","    #       '\\t njob= {}'.format(self.njob) + '\\n' + \\","    #       '\\t nworker= {}'.format(self.nworker) + '\\n' + \\","    #       '\\t wcap= {}'.format(self.wcap) + '\\n' + \\","    #       '\\t straggle_m= {}'.format(self.straggle_m) + '\\n' + \\","    #       '\\t scher= {}'.format(self.scher)","    return 'Cluster'","  ","  def run(self):","    while True:","      j = yield self.store.get()","      ","      while True:","        s, a, w_l = self.scher.schedule(j, self.w_l, self)","        if a == -1:","          slog(DEBUG, self.env, self, \"a = -1\", j)","          yield self.env.timeout(0.1)","        else:","          break","      # self.store.put(j)","      # self.jid_info_m[j._id] = {'fate': 'dropped'}","      ","      self.jid_info_m[j._id] = {'wait_time': self.env.now - j.arrival_time}","      wid_l = []","      for i, w in enumerate(w_l):","        type_ = 's' if i+1 <= j.k else 'r'","        w.put(Task(i+1, j._id, j.reqed, j.demandperslot_rv, j.totaldemand, j.k, type_) )","        wid_l.append(w._id)","      ","      self.jid__t_l_m[j._id] = []","      self.jid_info_m[j._id].update({","        'expected_run_time': j.totaldemand/j.demandperslot_rv.mean(),","        'wid_l': wid_l,","        's': s, 'a': a} )","  ","  def put(self, j):","    slog(DEBUG, self.env, self, \"received\", j)","    # if len(self.store.items) >= 1000:","    #   # slog(WARNING, self.env, self, \">= 1000 tasks are in q! dropping.\", j)","    #   return","    j.arrival_time = self.env.now","    return self.store.put(j)","  ","  def run_c(self):","    while True:","      t = yield self.store_c.get()","      try:","        self.jid__t_l_m[t.jid].append(t)","      except KeyError: # may happen due to a task completion after the corresponding job finishes","        continue","      ","      t_l = self.jid__t_l_m[t.jid]","      if len(t_l) > t.k:","        log(ERROR, \"len(t_l)= {} > k= {}\".format(len(t_l), t.k) )","      elif len(t_l) < t.k:","        continue","      else:","        t_l = self.jid__t_l_m[t.jid]","        wrecvedfrom_id_l = [t.prev_hop_id for t in t_l]","        wsentto_id_l = self.jid_info_m[t.jid]['wid_l']","        for w in self.w_l:","          if w._id in wsentto_id_l and w._id not in wrecvedfrom_id_l:","            w.put_c({'message': 'remove', 'jid': t.jid} )","        ","        self.jid_info_m[t.jid].update({","          'fate': 'finished',","          'run_time': max([t.run_time for t in self.jid__t_l_m[t.jid] ] ) } )","        self.jid__t_l_m.pop(t.jid, None)","        slog(DEBUG, self.env, self, \"finished jid= {}\".format(t.jid), t)","        ","        ## This causes (s1, a1, r1), (s2, a2, r2) to be interleaved by more than one job","        # self.njob_finished += 1","        if t.jid <= self.njob:","          self.njob_finished += 1","          # log(WARNING, \"job completion;\", jid=t.jid, njob=self.njob, njob_finished=self.njob_finished)","          if self.njob_finished >= self.njob:","            return","  ","  def put_c(self, t):","    slog(DEBUG, self.env, self, \"received\", t)","    return self.store_c.put(t)"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":129,"column":2},"end":{"row":130,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":130,"column":0},"end":{"row":130,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":2},"end":{"row":131,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":131,"column":0},"end":{"row":131,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":2},"end":{"row":130,"column":3}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":3},"end":{"row":130,"column":4}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":4},"end":{"row":130,"column":5}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":5},"end":{"row":130,"column":6}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":6},"end":{"row":130,"column":7}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":7},"end":{"row":130,"column":8}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":8},"end":{"row":130,"column":9}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":9},"end":{"row":130,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":10},"end":{"row":130,"column":11}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":11},"end":{"row":130,"column":12}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":12},"end":{"row":130,"column":13}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":13},"end":{"row":130,"column":14}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":14},"end":{"row":130,"column":15}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":15},"end":{"row":130,"column":16}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":15},"end":{"row":130,"column":16}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":16},"end":{"row":130,"column":17}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":17},"end":{"row":130,"column":18}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":18},"end":{"row":130,"column":19}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":20},"end":{"row":130,"column":21}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":130,"column":21},"end":{"row":131,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":131,"column":0},"end":{"row":131,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":4},"end":{"row":131,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":5},"end":{"row":131,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":6},"end":{"row":131,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":7},"end":{"row":131,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":8},"end":{"row":131,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":9},"end":{"row":131,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":10},"end":{"row":131,"column":11}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":11},"end":{"row":131,"column":12}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":12},"end":{"row":131,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":13},"end":{"row":131,"column":14}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":14},"end":{"row":131,"column":15}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":15},"end":{"row":131,"column":16}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":16},"end":{"row":131,"column":24}},"text":"avg_load"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":25},"end":{"row":256,"column":26}},"text":"1"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":24},"end":{"row":256,"column":25}},"text":"+"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":256,"column":26},"end":{"row":256,"column":27}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":131,"column":16},"end":{"row":131,"column":17}},"text":"_"},{"action":"insertText","range":{"start":{"row":128,"column":26},"end":{"row":128,"column":27}},"text":"_"},{"action":"insertText","range":{"start":{"row":128,"column":9},"end":{"row":128,"column":10}},"text":"_"},{"action":"insertText","range":{"start":{"row":101,"column":9},"end":{"row":101,"column":10}},"text":"_"}]}]],"redo":[]},"/plot_data.txt":{"scrollTop":2149.5,"scrollLeft":0,"selection":{"start":{"row":120,"column":15},"end":{"row":120,"column":15}},"lastUse":1543174223569,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":108,"column":0},"end":{"row":108,"column":19}},"text":"0.9538063826254225]"},{"action":"removeLines","range":{"start":{"row":89,"column":0},"end":{"row":108,"column":0}},"nl":"\n","lines":["0.5999999999999999,","0.6157467308171394,","0.6236299301978064,","0.627576453015591,","0.6714632278922441,","0.7214078114002883,","0.7458257460758722,","0.8656477793705992,","0.9080580925756165,","0.9298573195059526,","0.9412653160639112,","0.9472736912882197,","0.9504318494488518,","0.9520816379048556,","0.9529371991828801,","0.9533778486642345,","0.9536034778351002,","0.953718460245436,","0.9537768349283025,"]},{"action":"removeText","range":{"start":{"row":88,"column":1},"end":{"row":88,"column":43}},"text":"approx_Prqing_wMGc_l: [0.5999999999999999,"},{"action":"removeText","range":{"start":{"row":88,"column":1},"end":{"row":89,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":88,"column":0},"end":{"row":88,"column":1}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":87,"column":20},"end":{"row":88,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":88,"column":0},"end":{"row":88,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":129,"column":0},"end":{"row":129,"column":20}},"text":"0.98927117547603249]"},{"action":"removeLines","range":{"start":{"row":110,"column":0},"end":{"row":129,"column":0}},"nl":"\n","lines":["5.6853071837931328e-05,","0.00055703020314273551,","0.0014031235325431975,","0.0021173314675507196,","0.038791036320182118,","0.27765538877276891,","0.48567356852078197,","0.9380009259724128,","0.97090751484445925,","0.98103456511593867,","0.98526089425843688,","0.98725657849401005,","0.98824947280727171,","0.98875382336218498,","0.98901167304434545,","0.98914419757202399,","0.98913247705784269,","0.9892450286410811,","0.98926239010748918,"]},{"action":"removeText","range":{"start":{"row":109,"column":1},"end":{"row":109,"column":40}},"text":"Prqing_wMGc_l: [5.6853071837931328e-05,"},{"action":"removeText","range":{"start":{"row":109,"column":1},"end":{"row":110,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":109,"column":0},"end":{"row":109,"column":1}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":108,"column":21},"end":{"row":109,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":45},"end":{"row":4,"column":46}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":45},"end":{"row":4,"column":46}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":38},"end":{"row":1,"column":45}},"text":"ro= 0.6"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":37},"end":{"row":1,"column":38}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":36},"end":{"row":1,"column":37}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":7},"end":{"row":25,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":27,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":7}},"text":"ro= 0.6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":1}},"text":">"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":1},"end":{"row":26,"column":2}},"text":">"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":2},"end":{"row":26,"column":3}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":0},"end":{"row":27,"column":10}},"text":">> ro= 0.6"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":27,"column":0},"end":{"row":28,"column":0}},"nl":"\n","lines":[">> ro= 0.6"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":136,"column":0},"end":{"row":136,"column":7}},"text":"800.01]"},{"action":"removeLines","range":{"start":{"row":126,"column":0},"end":{"row":136,"column":0}},"nl":"\n","lines":["d_l: [0,","10.0,","16.27,","26.48,","43.09,","70.12,","114.1,","185.66,","302.12,","491.63,"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":126,"column":0},"end":{"row":126,"column":10}},"text":">> ro= 0.6"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":126,"column":9},"end":{"row":126,"column":10}},"text":"6"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":126,"column":9},"end":{"row":126,"column":10}},"text":"5"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":124,"column":0},"end":{"row":124,"column":33}},"text":" mapping_m: {'type': 'spreading'}"},{"action":"removeLines","range":{"start":{"row":112,"column":0},"end":{"row":124,"column":0}},"nl":"\n","lines":["# #################################################################### #","INFO] <module>:: red= \"Coding\", r= 2, ro= 0.5","INFO] <module>:: rank= 3, num_mpiprocs= 20"," sinfo_m: {'ar': 2.2799999999999998,","'k_rv': BZipf([1, 5], tail index= 1),","'lifetime_rv': Pareto(loc= 10, a= 4),","'njob': 100000,","'nworker': 20,","'reqed_rv': Uniform[1, 1],","'straggle_m': {'slowdown': <function <lambda> at 0x7fa5c0cf8f28>},","'wcap': 10}"," sching_m: {'r': 2, 'threshold': None, 'type': 'expand_if_totaldemand_leq'}"]}]},{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":111,"column":0},"end":{"row":112,"column":0}},"nl":"\n","lines":[""]}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":110,"column":21},"end":{"row":111,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":7}},"text":"800.01]"},{"action":"removeLines","range":{"start":{"row":14,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["d_l: [0,","10.0,","16.27,","26.48,","43.09,","70.12,","114.1,","185.66,","302.12,","491.63,"]},{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":82}},"text":"d_l = [0, 10.0, 16.27, 26.48, 43.09, 70.12, 114.1, 185.66, 302.12, 491.63, 800.01]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":186,"column":0},"end":{"row":186,"column":22}},"text":"0.0068067238544177499]"},{"action":"removeLines","range":{"start":{"row":102,"column":0},"end":{"row":186,"column":0}},"nl":"\n","lines":[">> ro= 0.5","sim_StdT_l: [0.06927220206984129,","0.066383984163648727,","0.054677440467456026,","0.051195104426943347,","0.060353655766260651,","0.050198304331823228,","0.048874884443081454,","0.061028724349391827,","0.041710371443432655,","0.041133775827590306,","0.040837268114482309,","0.030315885038746861,","0.044545820068631441,","0.033391723365472109,","0.028332550550612932,","0.034004456750220229,","0.04248290397635264,","0.029084688703680254,","0.021380115583299084,","0.026215484290762297,","0.042044609281664251]","sim_ET_l: [23.944456881887493,","23.924892602441275,","23.198682864860814,","22.691584392480358,","22.43986715618567,","21.484092438055228,","20.865332478622609,","19.942906210502354,","18.742643017954588,","17.581513774102316,","17.006839221519282,","16.76659262987102,","16.639109966817124,","16.586265906547204,","16.545301742454676,","16.527165380235559,","16.532973144177312,","16.516654681711554,","16.512261306150446,","16.513146732067277,","16.519155806661054]","sim_EPrqing_l: [0.00048922271544252455,","0.00050071588601073721,","0.0005262255998936254,","0.0005866836888859967,","0.00057370297692700526,","0.00072815908732050329,","0.00082311900079861094,","0.0022004891421913407,","0.012340560083907565,","0.053274285959814607,","0.090715361524983051,","0.11618894271622997,","0.12978178335581536,","0.13819353419386116,","0.13814368293429988,","0.13975876160274256,","0.14352686105844975,","0.14252322669215753,","0.14134164858738163,","0.14359997152274126,","0.14078954410870681]","sim_StdPrqing_l: [6.9770235910902946e-05,","5.6970891243661871e-05,","5.7525795893053037e-05,","7.9100242371592927e-05,","7.2810934364331596e-05,","0.00012070511465055014,","0.00013736766513887275,","0.00045252938643274281,","0.0011054275858465262,","0.003762515141766903,","0.0049187842816309493,","0.0060696659102802948,","0.0080097513827522542,","0.0066169273261042875,","0.0062222510802043664,","0.0065323261603438777,","0.0089353516053847556,","0.0070247725324461717,","0.0060076361761951689,","0.0064490843261096184,"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":102,"column":0},"end":{"row":103,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":102,"column":0},"end":{"row":103,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":16,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":17,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":10}},"text":">> ro= 0.5"},{"action":"insertText","range":{"start":{"row":16,"column":10},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":17,"column":0},"end":{"row":100,"column":0}},"lines":["sim_StdT_l: [0.06927220206984129,","0.066383984163648727,","0.054677440467456026,","0.051195104426943347,","0.060353655766260651,","0.050198304331823228,","0.048874884443081454,","0.061028724349391827,","0.041710371443432655,","0.041133775827590306,","0.040837268114482309,","0.030315885038746861,","0.044545820068631441,","0.033391723365472109,","0.028332550550612932,","0.034004456750220229,","0.04248290397635264,","0.029084688703680254,","0.021380115583299084,","0.026215484290762297,","0.042044609281664251]","sim_ET_l: [23.944456881887493,","23.924892602441275,","23.198682864860814,","22.691584392480358,","22.43986715618567,","21.484092438055228,","20.865332478622609,","19.942906210502354,","18.742643017954588,","17.581513774102316,","17.006839221519282,","16.76659262987102,","16.639109966817124,","16.586265906547204,","16.545301742454676,","16.527165380235559,","16.532973144177312,","16.516654681711554,","16.512261306150446,","16.513146732067277,","16.519155806661054]","sim_EPrqing_l: [0.00048922271544252455,","0.00050071588601073721,","0.0005262255998936254,","0.0005866836888859967,","0.00057370297692700526,","0.00072815908732050329,","0.00082311900079861094,","0.0022004891421913407,","0.012340560083907565,","0.053274285959814607,","0.090715361524983051,","0.11618894271622997,","0.12978178335581536,","0.13819353419386116,","0.13814368293429988,","0.13975876160274256,","0.14352686105844975,","0.14252322669215753,","0.14134164858738163,","0.14359997152274126,","0.14078954410870681]","sim_StdPrqing_l: [6.9770235910902946e-05,","5.6970891243661871e-05,","5.7525795893053037e-05,","7.9100242371592927e-05,","7.2810934364331596e-05,","0.00012070511465055014,","0.00013736766513887275,","0.00045252938643274281,","0.0011054275858465262,","0.003762515141766903,","0.0049187842816309493,","0.0060696659102802948,","0.0080097513827522542,","0.0066169273261042875,","0.0062222510802043664,","0.0065323261603438777,","0.0089353516053847556,","0.0070247725324461717,","0.0060076361761951689,","0.0064490843261096184,"]},{"action":"insertText","range":{"start":{"row":100,"column":0},"end":{"row":100,"column":22}},"text":"0.0068067238544177499]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":82}},"text":"d_l = [0, 10.0, 16.27, 26.48, 43.09, 70.12, 114.1, 185.66, 302.12, 491.63, 800.01]"},{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":6}},"text":"d_l= ["},{"action":"insertText","range":{"start":{"row":14,"column":6},"end":{"row":15,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":15,"column":0},"end":{"row":35,"column":0}},"lines":["0,","10.0,","12.593969317272713,","15.860806316440653,","19.975050809645882,","25.156517700764358,","31.682041205285422,","39.900265484793444,","50.250271926652381,","63.285038282887051,","79.700983037710856,","100.37517349334034,","126.41218551910536,","159.2031185756999,","200.4999190556494,","252.50898287025086,","318.00903826036807,","400.49960704664795,","504.38797627252632,","635.22466971774736,"]},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":19}},"text":"800.00000000000034]"}]}]],"redo":[]},"/modeling.py":{"scrollTop":5659,"scrollLeft":0,"selection":{"start":{"row":302,"column":0},"end":{"row":302,"column":0}},"lastUse":1543161640306,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":340,"column":46},"end":{"row":340,"column":47}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":340,"column":47},"end":{"row":340,"column":51}},"text":"for "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":358,"column":6},"end":{"row":358,"column":8}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":369,"column":2},"end":{"row":369,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":372,"column":2},"end":{"row":372,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":387,"column":2},"end":{"row":387,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":287,"column":2},"end":{"row":287,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":372,"column":81},"end":{"row":373,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":373,"column":0},"end":{"row":373,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":373,"column":2},"end":{"row":373,"column":79}},"text":"log(INFO, \"d= {}, ro= {}, ES= {}, EW= {}, ET= {}\".format(d, ro, ES, EW, ET) )"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":373,"column":26},"end":{"row":373,"column":50}},"text":", ES= {}, EW= {}, ET= {}"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":373,"column":40},"end":{"row":373,"column":52}},"text":", ES, EW, ET"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":388,"column":81},"end":{"row":389,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":389,"column":0},"end":{"row":389,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":389,"column":2},"end":{"row":389,"column":79}},"text":"log(INFO, \"d= {}, ro= {}, ES= {}, EW= {}, ET= {}\".format(d, ro, ES, EW, ET) )"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":26},"end":{"row":389,"column":50}},"text":", ES= {}, EW= {}, ET= {}"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":50},"end":{"row":389,"column":52}},"text":"ET"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":49},"end":{"row":389,"column":50}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":48},"end":{"row":389,"column":49}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":46},"end":{"row":389,"column":48}},"text":"EW"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":45},"end":{"row":389,"column":46}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":44},"end":{"row":389,"column":45}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":42},"end":{"row":389,"column":44}},"text":"ES"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":41},"end":{"row":389,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":389,"column":40},"end":{"row":389,"column":41}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":296,"column":0},"end":{"row":297,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":297,"column":0},"end":{"row":298,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":297,"column":0},"end":{"row":297,"column":38}},"text":"# def ar_for_ro(ro, N, Cap, k, D, Sl):"},{"action":"insertText","range":{"start":{"row":297,"column":38},"end":{"row":298,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":298,"column":0},"end":{"row":301,"column":0}},"lines":["#   return ro*N*Cap/k.mean()/D.mean()/Sl.mean()","","def ar_for_ro(ro, N, Cap, k, R, L, Sl):"]},{"action":"insertText","range":{"start":{"row":301,"column":0},"end":{"row":301,"column":54}},"text":"  return ro*N*Cap/k.mean()/R.mean()/L.mean()/Sl.mean()"}]}]],"redo":[]},"/rvs.py":{"scrollTop":8385.5,"scrollLeft":0,"selection":{"start":{"row":440,"column":34},"end":{"row":440,"column":34}},"lastUse":1543084031509,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":160,"column":8},"end":{"row":160,"column":9}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":161,"column":4},"end":{"row":161,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":161,"column":77},"end":{"row":162,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":162,"column":0},"end":{"row":162,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":4},"end":{"row":162,"column":75}},"text":"return r'Pareto($\\min= {}$, tail index= ${}$)'.format(self.loc, self.a)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":21},"end":{"row":162,"column":27}},"text":"\\min= "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":26},"end":{"row":162,"column":38}},"text":"tail index= "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":57},"end":{"row":163,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":163,"column":0},"end":{"row":163,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":163,"column":0},"end":{"row":164,"column":0}},"nl":"\n","lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":441,"column":2},"end":{"row":442,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":442,"column":0},"end":{"row":442,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":2},"end":{"row":443,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":443,"column":0},"end":{"row":443,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":2},"end":{"row":442,"column":21}},"text":"def __repr__(self):"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":442,"column":6},"end":{"row":442,"column":14}},"text":"__repr__"},{"action":"insertText","range":{"start":{"row":442,"column":6},"end":{"row":442,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":7},"end":{"row":442,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":8},"end":{"row":442,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":9},"end":{"row":442,"column":10}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":10},"end":{"row":442,"column":11}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":11},"end":{"row":442,"column":12}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":12},"end":{"row":442,"column":13}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":13},"end":{"row":442,"column":14}},"text":"x"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":442,"column":21},"end":{"row":443,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":443,"column":0},"end":{"row":443,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":4},"end":{"row":443,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":5},"end":{"row":443,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":6},"end":{"row":443,"column":7}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":7},"end":{"row":443,"column":8}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":8},"end":{"row":443,"column":9}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":9},"end":{"row":443,"column":10}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":10},"end":{"row":443,"column":11}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":11},"end":{"row":443,"column":34}},"text":"BZipf($[{}, {}]$, ${}$)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":11},"end":{"row":443,"column":12}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":35},"end":{"row":443,"column":36}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":11},"end":{"row":443,"column":12}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":443,"column":13},"end":{"row":443,"column":14}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":36},"end":{"row":443,"column":37}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":37},"end":{"row":443,"column":38}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":38},"end":{"row":443,"column":39}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":39},"end":{"row":443,"column":40}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":40},"end":{"row":443,"column":41}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":41},"end":{"row":443,"column":42}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":42},"end":{"row":443,"column":43}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":43},"end":{"row":443,"column":44}},"text":"("},{"action":"insertText","range":{"start":{"row":443,"column":44},"end":{"row":443,"column":45}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":44},"end":{"row":443,"column":61}},"text":"k.l_l, k.u_l, k.a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":443,"column":58},"end":{"row":443,"column":59}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":58},"end":{"row":443,"column":59}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":59},"end":{"row":443,"column":60}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":60},"end":{"row":443,"column":61}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":443,"column":61},"end":{"row":443,"column":62}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":443,"column":51},"end":{"row":443,"column":52}},"text":"k"},{"action":"insertText","range":{"start":{"row":443,"column":51},"end":{"row":443,"column":55}},"text":"self"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":443,"column":44},"end":{"row":443,"column":45}},"text":"k"},{"action":"insertText","range":{"start":{"row":443,"column":44},"end":{"row":443,"column":48}},"text":"self"}]}]],"redo":[]},"/math_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":19,"column":31},"end":{"row":19,"column":31}},"lastUse":1542991078174,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":13},"end":{"row":9,"column":14}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":14},"end":{"row":9,"column":15}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":15},"end":{"row":9,"column":16}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":16},"end":{"row":9,"column":17}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":17},"end":{"row":9,"column":18}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":17},"end":{"row":9,"column":18}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":18},"end":{"row":9,"column":19}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":19},"end":{"row":9,"column":20}},"text":"w"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":20},"end":{"row":9,"column":21}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":21},"end":{"row":9,"column":22}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":23},"end":{"row":9,"column":24}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":24},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":4},"end":{"row":13,"column":44}},"text":"return scipy.special.gammainc(z, u)*G(z)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":46}},"text":"return scipy.special.gammainc(z, u)*G(z)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":39},"end":{"row":10,"column":40}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":39},"end":{"row":10,"column":40}},"text":"x"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":46},"end":{"row":11,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":24}},"text":"if type_ == 'lower':"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":4},"end":{"row":11,"column":5}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":5},"end":{"row":11,"column":6}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":19},"end":{"row":11,"column":24}},"text":"lower"},{"action":"insertText","range":{"start":{"row":11,"column":19},"end":{"row":11,"column":20}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":20},"end":{"row":11,"column":21}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":21},"end":{"row":11,"column":22}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":22},"end":{"row":11,"column":23}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":23},"end":{"row":11,"column":24}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":26},"end":{"row":12,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":44}},"text":"    return scipy.special.gammainc(z, l)*G(z)"},{"action":"removeText","range":{"start":{"row":17,"column":4},"end":{"row":17,"column":53}},"text":"# return (1 - scipy.special.gammainc(z, l) )*G(z)"},{"action":"removeText","range":{"start":{"row":17,"column":4},"end":{"row":18,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":6},"end":{"row":12,"column":55}},"text":"# return (1 - scipy.special.gammainc(z, l) )*G(z)"},{"action":"insertText","range":{"start":{"row":12,"column":55},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":13,"column":46}},"text":"      return scipy.special.gammainc(z, l)*G(z)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":15,"column":0},"end":{"row":19,"column":0}},"nl":"\n","lines":["  elif u is not None:","    ","  elif l is not None:","    "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":15,"column":0},"end":{"row":16,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":2},"end":{"row":14,"column":4}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":35},"end":{"row":13,"column":36}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":40},"end":{"row":13,"column":41}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":40},"end":{"row":13,"column":41}},"text":"x"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":46},"end":{"row":12,"column":47}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":46},"end":{"row":12,"column":47}},"text":"x"}]}]],"redo":[]},"/modeling_deprecated.py":{"scrollTop":9980.5,"scrollLeft":0,"selection":{"start":{"row":510,"column":15},"end":{"row":510,"column":15}},"lastUse":1542942814288,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":3}},"text":"'''"},{"action":"insertText","range":{"start":{"row":2,"column":3},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":3,"column":0},"end":{"row":175,"column":0}},"lines":["Kubernetes architecture; master assigning jobs to distributed workers.","Average cluster load = E[ro] = ar/N/Cap * E[D x S]","where","ar: Arrival rate of jobs","N: Number of workers","Cap: Capacity of each worker","k: Number of tasks in a job.","D: Total demand of a task; lifetime x resource demand","S: Slowdown experienced by each task","","S is assumed to depend only on ro.","Redundancy is introduced for jobs with D < d.","'''","def E_slowdown(ar, N, Cap, k, D, S_gen, d=None, r=None):","  ## E[kD | kD <= d] = E[k x E[D | D <= d/k]]","  E_D_given_D_leq_doverk = lambda k: mean(D, given_X_leq_x=True, x=d/k)","  E_D_given_D_g_doverk = lambda k: mean(D, given_X_leq_x=False, x=d/k)","  # E_kD_given_kD_leq_d = float(","  #   mpmath.quad(lambda i: i*E_D_given_D_leq_doverk(i)*k.pdf(i), [0, mpmath.inf] ) )","  ","  if d is not None:","    Pr_kD_leq_d = sum([D.cdf(d/i)*k.pdf(i) for i in k.v_l] )","    blog(Pr_kD_leq_d=Pr_kD_leq_d)","  def ro_(ro):","    S = S_gen(ro)","    if d is not None:","      ES = S.mean()","      ","      ## kD <= d","      def E_cumS(k_):","        E = 0","        for i in range(1, k_+1):","          S_kplusr_i = X_n_k(S, k_+r, i)","          E += (r+1)*S_kplusr_i.mean() if i == k_ else S_kplusr_i.mean()","        return E","      EC_given_kD_leq_d = sum([E_cumS(i)*E_D_given_D_leq_doverk(i)*k.pdf(i) for i in k.v_l] )","      ","      ## kD > d","      EC_given_kD_g_d = ES*sum([i*E_D_given_D_g_doverk(i)*k.pdf(i) for i in k.v_l] )","      ","      # log(INFO, \"d= {}, ro= {}\".format(d, ro), EC_given_kD_leq_d=EC_given_kD_leq_d, EC_given_kD_g_d=EC_given_kD_g_d, Pr_kD_leq_d=Pr_kD_leq_d)","      EA = EC_given_kD_leq_d*Pr_kD_leq_d + \\","           EC_given_kD_g_d*(1 - Pr_kD_leq_d)","    else:","      EA = k.mean()*D.mean()*S.mean()","    return ar/N/Cap * EA","  ","  eq = lambda ro: ro - ro_(ro)","  l, u = 0.0001, 1","  # for x in np.linspace(l, u, 10):","  #   print(\"eq({})= {}\".format(x, eq(x) ) )","  ","  max_eq, u_w_max_eq = float('-inf'), 0","  u_w_max_eq","  eq_u = -1","  while u > l and eq_u < -0.01:","    eq_u = eq(u)","    if eq_u > max_eq:","      max_eq = eq_u","      u_w_max_eq = u","    u -= 0.05","  if u < l:","    print(\"u < l; u_w_max_eq= {}, max_eq= {}\".format(u_w_max_eq, max_eq) )","    found_it = False","    for u in np.linspace(u_w_max_eq-0.05, u_w_max_eq+0.05, 10):","      if eq(u) > -0.01:","        found_it = True","        break","    if not found_it:","      return None","  print(\"l= {}, u= {}\".format(l, u) )","  ","  # eq_l, eq_u = eq(l), eq(u)","  # print(\"eq({})= {}, eq({})= {}\".format(l, eq_l, u, eq_u) )","  # if eq_l*eq_u > 0:","  #   return None","  ","  ro = scipy.optimize.brentq(eq, l, u)","  # ro = scipy.optimize.newton(eq, 1)","  # ro = scipy.optimize.fixed_point(ro_, 0.5)","  # ro = scipy.optimize.fixed_point(ro_, [0.01, 0.99] )","  log(INFO, \"ro= {}\".format(ro), d=d)","  # for x in np.linspace(l, u, 40):","  #   print(\"eq({})= {}\".format(x, eq(x) ) )","  ","  S = S_gen(ro)","  E_S_given_kD_g_d = sum([X_n_k(S, i, i).mean()*k.pdf(i) for i in k.v_l] )","  if d is not None:","    E_S_given_kD_leq_d = sum([X_n_k(S, i+r, i).mean()*k.pdf(i) for i in k.v_l] )","    return E_S_given_kD_leq_d*Pr_kD_leq_d + \\","           E_S_given_kD_g_d*(1 - Pr_kD_leq_d)","  else:","    return E_S_given_kD_g_d","  ","def arrival_rate_ub(N, Cap, k, D, S_gen):","  return N*Cap/k.mean()/D.mean()/S_gen(1).mean()  ","","def arrival_rate_for_load_ro(ro, N, Cap, k, D, S_gen):","  return ro*N*Cap/k.mean()/D.mean()/S_gen(ro).mean()","","def plot_slowdown():","  N, Cap = 10, 100","  D = TPareto(1, 1000, 1) # Pareto(10, 2)","  k = BZipf(1, 10)","  r = 1","  ","  # S_gen = lambda ro: TPareto(1, 40, 2/ro)","  def S_gen(ro):","    # a = 2 - ro # 1.5 - math.sqrt(ro)","    a = 1.1/ro","    if a < 0:","      log(ERROR, \"a= {} < 0!\".format(a), ro=ro)","      a = float(\"inf\")","    return TPareto(1, 100, a)","  ar_ub = arrival_rate_ub(N, Cap, k, D, S_gen)","  print(\"ar_ub= {}\".format(ar_ub) )","  ","  # d = 2*D.mean()","  # for ar in np.linspace(ar_ub/20, ar_ub, 10):","  #   E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)","  #   E_sl_wred = E_slowdown(ar, N, Cap, k, D, S_gen, d, r)","  #   print(\"ar= {}, E_sl= {}, E_sl_wred= {}\".format(ar, E_sl, E_sl_wred) )","  ","  # ar = 1/4*ar_ub # 1/2, 2/3","  ar = arrival_rate_for_load_ro(1/2, N, Cap, k, D, S_gen)","  ","  l, u = 1.1*D.l_l, 0.95*D.u_l","  # for d in np.linspace(l, u, 10):","  E_sl = E_slowdown(ar, N, Cap, k, D, S_gen)","  print(\"E_sl= {}\".format(E_sl) )","  ","  d_l, E_sl_wred_l = [], []","  for d in np.logspace(math.log10(l), math.log10(u), 10):","  # for d in [11, 20]:","  # for d in [l, u]:","    print(\"\\n>> d= {}\".format(d) )","    d_l.append(d)","    ","    E_sl_wred = E_slowdown(ar, N, Cap, k, D, S_gen, d, r)","    blog(E_sl=E_sl, E_sl_wred=E_sl_wred)","    E_sl_wred_l.append(E_sl_wred)","    # if E_sl_wred is None:","    #   break","  ","  plot.axhline(y=E_sl, label=r'w/o red', c=next(darkcolor_c) )","  plot.plot(d_l, E_sl_wred_l, label=r'w/ red', c=next(darkcolor_c), marker=next(marker_c), ls=':', mew=2)","  plot.legend()","  plot.xlabel('d', fontsize=fontsize)","  plot.ylabel('Average slowdown', fontsize=fontsize)","  plot.title('N= {}, Cap= {}, D$\\sim {}$\\n'.format(N, Cap, D.tolatex() ) + 'k$\\sim${}, r= {}'.format(k, r) )","  plot.savefig('plot_slowdown.png')","  plot.gcf().clear()","  log(INFO, \"done.\")","","def test():","  N, Cap = 10, 100","  D = TPareto(1, 1000, 1) # Pareto(10, 2)","  k = BZipf(1, 10)","  ","  def do_for(d):","    E_D_given_D_leq_doverk = lambda k_: mean(D, given_X_leq_x=True, x=d/k_)","    E_D_given_D_g_doverk = lambda k_: mean(D, given_X_leq_x=False, x=d/k_)","    ","    E_kD_given_kD_leq_d = sum([i*E_D_given_D_leq_doverk(i)*k.pdf(i) for i in k.v_l] )","    Pr_kD_leq_d = sum([D.cdf(d/i)*k.pdf(i) for i in k.v_l] )","    E_kD_given_kD_g_d = sum([i*E_D_given_D_g_doverk(i)*k.pdf(i) for i in k.v_l] )","    ","    E_kD = k.mean()*D.mean()","    E_kD_totalsum = Pr_kD_leq_d*E_kD_given_kD_leq_d + (1 - Pr_kD_leq_d)*E_kD_given_kD_g_d","    log(INFO, \"d= {}\".format(d), E_kD=E_kD, E_kD_totalsum=E_kD_totalsum)","  ","  for d in np.linspace(10, 1000, 10):"]},{"action":"insertText","range":{"start":{"row":175,"column":0},"end":{"row":175,"column":13}},"text":"    do_for(d)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":175,"column":13},"end":{"row":176,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":176,"column":0},"end":{"row":176,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":176,"column":2},"end":{"row":176,"column":4}},"text":"  "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":176,"column":0},"end":{"row":176,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":18}},"text":"import numpy as np"},{"action":"insertText","range":{"start":{"row":0,"column":18},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":76,"column":0}},"lines":["import mpmath","","from rvs import *","","'''","Kubernetes architecture; master assigning jobs to distributed workers.","Average cluster load = E[ro] = ar/N/Cap * E[D x S]","where","ar: Arrival rate of jobs","N: Number of workers","Cap: Capacity of each worker","D: Total demand of a job; lifetime x resource demand","S: Slowdown experienced by each task","","S is assumed to depend only on ro.","Redundancy is introduced for jobs with D < D0.","'''","def E_slowdown(ar, N, Cap, D, S_gen, D0=None):","  def ro_(ro):","    if D0 is not None:","      ED_given_D_leq_D0 = mean(D, given_X_leq_x=True, x=D0)","      S = S_gen(ro)","      S_2_1 = X_n_k(S, 2, 1)","      ES_given_D_leq_D0 = S_2_1.moment(1)","      ","      ED_given_D_g_D0 = mean(D, given_X_leq_x=False, x=D0)","      ES_given_D_g_D0 = S.moment(1)","      # blog(E_S_2_1=ES_given_D_leq_D0, ES=ES_given_D_g_D0)","      ","      Pr_D_leq_D0 = D.cdf(D0)","      ","      EA = 2*ED_given_D_leq_D0*ES_given_D_leq_D0*Pr_D_leq_D0 + \\","           ED_given_D_g_D0*ES_given_D_g_D0*(1 - Pr_D_leq_D0)","    else:","      EA = D.mean()*S_gen(ro).mean()","    return ar/N/Cap * EA","  ","  eq = lambda ro: ro - ro_(ro)","  l, u = 0.0001, 1","  roots = scipy.optimize.brentq(eq, l, u)","  print(\"roots= {}\".format(roots) )","  # for x in np.linspace(l, u, 40):","  #   print(\"eq({})= {}\".format(x, eq(x) ) )","  ","  S = S_gen(roots)","  return S.mean()","","def arrival_rate_ub(N, Cap, D, S_gen):","  return N*Cap/D.mean()/S_gen(1).mean()  ","","def plot_slowdown():","  N, Cap = 10, 100","  D = TPareto(1, 10000, 2) # Pareto(10, 2)","  ","  # S_gen = lambda ro: TPareto(1, 40, 2/ro)","  def S_gen(ro):","    a = 1.5 - math.sqrt(ro) # 2 - ro","    return TPareto(1, 1000, a)","  ar_ub = arrival_rate_ub(N, Cap, D, S_gen)","  print(\"ar_ub= {}\".format(ar_ub) )","  ","  # D0 = 2*D.mean()","  # for ar in np.linspace(ar_ub/20, ar_ub, 10):","  #   E_sl = E_slowdown(ar, N, Cap, D, S_gen)","  #   E_sl_wred = E_slowdown(ar, N, Cap, D, S_gen, D0)","  #   print(\"ar= {}, E_sl= {}, E_sl_wred= {}\".format(ar, E_sl, E_sl_wred) )","  ","  ar = 1/2*ar_ub # 2/3","  l, u = 1.1*D.l_l, 0.95*D.u_l","  # for D0 in np.linspace(l, u, 10):","  for D0 in np.logspace(math.log10(l), math.log10(u), 10):","    print(\"D0= {}\".format(D0) )","    E_sl = E_slowdown(ar, N, Cap, D, S_gen)","    E_sl_wred = E_slowdown(ar, N, Cap, D, S_gen, D0)","    blog(E_sl=E_sl, E_sl_wred=E_sl_wred)"]},{"action":"insertText","range":{"start":{"row":76,"column":0},"end":{"row":76,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":252,"column":0},"end":{"row":253,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":253,"column":0},"end":{"row":253,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":253,"column":2},"end":{"row":253,"column":29}},"text":"def check_MGc_assumption():"},{"action":"insertText","range":{"start":{"row":253,"column":29},"end":{"row":254,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":254,"column":0},"end":{"row":484,"column":0}},"lines":["  # N, Cap = 10, 1","  N_times_Cap = 100","  r = 1","  L = Exp(1, 1)","  S = DUniform(1, 1)","  sinfo_m['njob'] = 2000*10","  sching_m = {'type': 'plain', 'r': r}","  blog(N_times_Cap=N_times_Cap, sinfo_m=sinfo_m, mapping_m=mapping_m, sching_m=sching_m)","  ","  def run(ro, N, k, R, L, S, r=1):","    Cap = int(N_times_Cap/N)","    print(\"\\n\")","    log(INFO, \"ro= {}, N= {}, Cap= {}, k= {}, R= {}, L= {}, S= {}, r= {}\".format(ro, N, Cap, k, R, L, S, r) )","    ","    ar = round(ar_for_ro(ro, N, Cap, k, R, L, S), 2)","    sinfo_m.update({","      'nworker': N, 'wcap': Cap, 'ar': ar,","      'k_rv': k,","      'reqed_rv': R,","      'lifetime_rv': L,","      'straggle_m': {'slowdown': lambda load: S.sample() } } )","    sching_m['r'] = r","    sim_m = sim(sinfo_m, mapping_m, sching_m, \"N{}_C{}\".format(N, Cap) )","    blog(sim_m=sim_m)","    ","    # c = int(N*Cap/R.mean() ) # N*Cap","    # print(\"c= {}\".format(c) )","    # EW = EW_MGc(ar, L, c)","    # print(\"M/G/c_EW= {}\".format(EW) )","    return {","      'ar': ar,","      'EW': sim_m['waittime_mean'],","      'pblocking': sim_m['frac_jobs_waited_inq'],","      'EW_givenqed': sim_m['waittime_givenqed_mean'] }","  ","  def test(ro, R=DUniform(1, 1) ):","    print(\"---------------\")","    run(ro, 1, k, R, L, S)","    # run(ro, 2, k, R, L, S)","    # run(ro, 5, k, R, L, S)","    # run(ro, 10, k, R, L, S)","  ","  def check_EW_scaling_wrt_ro(N, R):","    log(INFO, \"\", N=N, R=R)","    ","    # '''","    ro_l, EW_l = [], []","    for ro in np.linspace(0.1, 0.9, 9):","      ro = round(ro, 2)","      ar, EW, pblocking = run(ro, N, k, R, L, S)","      print(\"ro= {}, EW= {}\".format(ro, EW) )","      ","      ro_l.append(ro)","      EW_l.append(EW)","    blog(ro_l=ro_l, EW_l=EW_l)","    # '''","    ","    # ro_l= [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]","    # EW_l= [0.00025548087470978202, 0.00056689800613990546, 0.00089200542402208672, 0.0012637166320921696, 0.0017178514022176334, 0.0021802843452227629, 0.002912705863562876, 0.0061096923858674568, 0.043253547318583753]","    print(\"ratio = EW/(ro/(1-ro))\")","    for i, EW in enumerate(EW_l):","      ro = ro_l[i]","      ratio = EW/(ro/(1-ro) )","      print(\"ro= {}, ratio= {}\".format(ro, ratio) )","    log(INFO, \"done.\")","  ","  def check_EW_scaling_wrt_EL2_over_EL(N, R, ro):","    log(INFO, \"\", N=N, R=R, ro=ro)","    ","    EL2_over_EL_l, EW_l = [], []","    for mu in np.linspace(0.1, 1, 10):","      L = Exp(mu, 1)","      EL2_over_EL = round(L.moment(2)/L.moment(1), 2)","      ar, EW, pblocking = run(ro, N, k, R, L, S)","      print(\"EL2_over_EL= {}, EW= {}\".format(EL2_over_EL, EW) )","      ","      EL2_over_EL_l.append(EL2_over_EL)","      EW_l.append(EW)","    blog(EL2_over_EL_l=EL2_over_EL_l, EW_l=EW_l)","    # '''","    ","    print(\"ratio = EW/(EL2/EL)\")","    for i, EW in enumerate(EW_l):","      EL2_over_EL = EL2_over_EL_l[i]","      ratio = EW/EL2_over_EL","      print(\"EL2_over_EL= {}, ratio= {}\".format(EL2_over_EL, ratio) )","    log(INFO, \"done.\")","  ","  def check_EW_scaling_wrt_ER2_over_ER(N, L, ro):","    log(INFO, \"\", N=N, L=L, ro=ro)","    ","    ER2_over_ER_l, EW_l = [], []","    for u in np.linspace(0.1, 1, 10):","      R = Uniform(0.1, u)","      ER2_over_ER = round(R.moment(2)/R.moment(1), 2)","      ar, EW, pblocking = run(ro, N, k, R, L, S)","      print(\"ER2_over_ER= {}, EW= {}\".format(ER2_over_ER, EW) )","      ","      ER2_over_ER_l.append(ER2_over_ER)","      EW_l.append(EW)","    blog(ER2_over_ER_l=ER2_over_ER_l, EW_l=EW_l)","    ","    print(\"ratio = EW/(ER2/ER)\")","    for i, EW in enumerate(EW_l):","      ER2_over_ER = ER2_over_ER_l[i]","      ratio = EW/ER2_over_ER","      print(\"ER2_over_ER= {}, ratio= {}\".format(ER2_over_ER, ratio) )","    log(INFO, \"done.\")","  ","  def check_EW_scaling_wrt_Ek2_over_Ek(N, R, L, ro):","    log(INFO, \"\", N=N, R=R, L=L, ro=ro)","    ","    Ek2_over_Ek_l, EW_l = [], []","    for u in range(1, 10):","      k = DUniform(1, u)","      Ek2_over_Ek = round(k.moment(2)/k.moment(1), 2)","      ar, EW, pblocking = run(ro, N, k, R, L, S)","      print(\"Ek2_over_Ek= {}, EW= {}\".format(Ek2_over_Ek, EW) )","      ","      Ek2_over_Ek_l.append(Ek2_over_Ek)","      EW_l.append(EW)","    blog(Ek2_over_Ek_l=Ek2_over_Ek_l, EW_l=EW_l)","    ","    print(\"ratio = EW/(ER2/ER)\")","    for i, EW in enumerate(EW_l):","      Ek2_over_Ek = Ek2_over_Ek_l[i]","      ratio = EW/Ek2_over_Ek","      print(\"Ek2_over_Ek= {}, ratio= {}\".format(Ek2_over_Ek, ratio) )","    log(INFO, \"done.\")","  ","  def check_EW_scaling_wrt_model(N, k, R, L, S):","    log(INFO, \"\", N=N, k=k, R=R, L=L, S=S)","    sinfo_m['njob'] = 2000*10","    ","    ET = L.mean()*sum([X_n_k(S, i, i).mean()*k.pdf(i) for i in k.v_l] )","    ET2 = L.moment(2)*sum([X_n_k(S, i, i).moment(2)*k.pdf(i) for i in k.v_l] )","    EL, EL2 = L.mean(), L.moment(2)","    blog(ET=ET, ET2=ET2, EL=EL, EL2=EL2)","    ","    C_moment = lambda i: k.moment(i)*R.moment(i)*L.moment(i)*S.moment(i)","    print(\">> C_moment(1)= {}, C_moment(2)= {}\".format(C_moment(1), C_moment(2) ) )","    ","    def Pr_blocking(ar, ro):","      # narr_atleast_forblocking = (1-ro)*N_times_Cap/(k.moment(1)*R.moment(1) ) - 1","      # blog(narr_atleast_forblocking=narr_atleast_forblocking)","      # ar_ = ar*L.tail(ET)*ET # *L.u_l/10","      # return max(0, \\","      #   1 - math.exp(-ar_)*sum([ar_**i/math.factorial(i) for i in range(int(narr_atleast_forblocking) ) ] ) )","      ","      alpha = 0.9 # 1/2 # L.cdf(L.u_l/10) # L.cdf(10*EL) # 1/2 # L.cdf(EL)","      # print(\"alpha= {}\".format(alpha) )","      long_jlifetime = EL + math.sqrt((EL2 - EL**2)*alpha/(1-alpha) ) # ET + math.sqrt((ET2 - ET**2)*alpha/(1-alpha) )","      ro_short = ar*L.cdf(long_jlifetime)*C_moment(1)/N_times_Cap","      narr_atleast_forblocking = (1-ro_short)*N_times_Cap / (k.moment(1)*R.moment(1) ) - 1","      blog(narr_atleast_forblocking=narr_atleast_forblocking)","      ar_long = ar*L.tail(long_jlifetime)*long_jlifetime","      return max(0, \\","        1 - math.exp(-ar_long)*sum([ar_long**i/math.factorial(i) for i in range(int(narr_atleast_forblocking) ) ] ) )","    ","    def EW_givenqed_model(ro):","      return ro/(1-ro) * C_moment(2)/C_moment(1)","    ","    def EW_model(ar, ro, pblocking=None):","      if pblocking is None:","        pblocking = Pr_blocking(ar, ro)","      print(\"pblocking= {}\".format(pblocking) )","      return ro/(1-ro) * C_moment(2)/C_moment(1) / 2 * pblocking","    ","    EW_l, sim_EW_l = [], []","    # for ro in np.linspace(0.1, 0.9, 9):","    for ro in np.linspace(0.7, 0.9, 3):","      ro = round(ro, 2)","      m = run(ro, N, k, R, L, S)","      ar, sim_EW, sim_pblocking = m['ar'], m['EW'], m['pblocking']","      print(\"ar= {}, ro= {}\".format(ar, ro) )","      ","      pblocking = Pr_blocking(ar, ro)","      print(\"sim_pblocking= {}, pblocking= {}\".format(sim_pblocking, pblocking) )","      EW = EW_model(ar, ro, pblocking)","      print(\"sim_EW= {}, EW= {}\".format(sim_EW, EW) )","      sim_EW_l.append(sim_EW)","      EW_l.append(EW)","      ","      sim_EW_givenqed = m['EW_givenqed']","      EW_givenqed = EW_givenqed_model(ro)","      print(\"sim_EW_givenqed= {}, EW_givenqed= {}\".format(sim_EW_givenqed, EW_givenqed) )","    blog(EW_l=EW_l, sim_EW_l=sim_EW_l)","    ","    # print(\"ratio = sim_EW/model\")","    # for i, sim_EW in enumerate(sim_EW_l):","    #   EW = EW_l[i]","    #   ratio = sim_EW/EW","    #   print(\"EW= {}, ratio= {}\".format(EW, ratio) )","    log(INFO, \"done.\")","  ","  def check_EW_scaling_w_increasing_r(N, k, R, L, S, ro):","    log(INFO, \"\", N=N, k=k, R=R, L=L, S=S, ro=ro)","    ","    # for r in np.linspace(1, 2, 3):","    for r in range(1, 4):","      m = run(ro, N, k, R, L, S, r)","      ar, sim_EW, sim_pblocking = m['ar'], m['EW'], m['pblocking']","      print(\"ar= {}, ro= {}\".format(ar, ro) )","  ","  # test(ro=0.4)","  # test(ro=0.65)","  # test(ro=0.9)","  ","  # R = Uniform(0.25, 0.75) # Uniform(0.5, 1.5)","  # test(0.9, R)","  ","  # R = Uniform(0.25, 0.75) # Uniform(1, 1) # Uniform(0.05, 0.15) # Uniform(0.5, 1.5)","  # check_EW_scaling_wrt_ro(5, R)","  ","  # R = Uniform(1.5, 2.5) # Uniform(2, 2)","  # check_EW_scaling_wrt_EL2_over_EL(N, R, ro=0.85)","  ","  # L = Exp(0.1, 1)","  # check_EW_scaling_wrt_ER2_over_ER(N, L, ro=0.85)","  ","  # R = Uniform(1, 1) # Uniform(1, 1)","  # L = Exp(0.1, 1) # Uniform(1, 1)","  # check_EW_scaling_wrt_Ek2_over_Ek(N, R, L, ro=0.85)","  ","  k = BZipf(1, 10) # DUniform(1, 1) # DUniform(1, 4)","  R = Uniform(1, 1)","  L = TPareto(10, 10**6, 4) # Exp(0.1, 1) # Uniform(1, 1)","  S = TPareto(1, 10, 2) # Uniform(1, 1)","  check_EW_scaling_wrt_model(N, k, R, L, S)","  "]},{"action":"insertText","range":{"start":{"row":484,"column":0},"end":{"row":484,"column":20}},"text":"  log(INFO, \"done.\")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":253,"column":0},"end":{"row":253,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":484,"column":20},"end":{"row":485,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":485,"column":0},"end":{"row":485,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":485,"column":0},"end":{"row":485,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":485,"column":0},"end":{"row":486,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":486,"column":0},"end":{"row":486,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":486,"column":2},"end":{"row":486,"column":13}},"text":"def test():"},{"action":"insertText","range":{"start":{"row":486,"column":13},"end":{"row":487,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":487,"column":0},"end":{"row":552,"column":0}},"lines":["  N, Cap = 4, 2","  b, beta = 10, 1.1","  a, alpha = 1, 2","  k = BZipf(1, 2)","  r = 2","  log(INFO, \"\", k=k, r=r, b=b, beta=beta, a=a, alpha=alpha)","  ","  D = Exp(beta, b) # Pareto(b, beta)","  S = Exp(alpha, a) # Pareto(a, alpha)","  Ek = k.mean()","  ES = S.mean()","  ED = D.mean()","  ","  def gen_sim_E_kD_given_kD_leq_d(d, nsamples=100*1000):","    sum_sample = 0","    for _ in range(nsamples):","      k_sample = k.sample()","      D_sample = D.sample()","      kD_sample = k_sample*D_sample","      if kD_sample <= d:","        sum_sample += kD_sample","    return sum_sample/nsamples","  ","  def Pr_kD(x):","    return sum([D.pdf(x/i)*k.pdf(i) for i in k.v_l] )","  def Pr_kD_leq_x(x):","    return sum([D.cdf(x/i)*k.pdf(i) for i in k.v_l] )","  ","  E_kD = Ek*ED","  # E_kD_ = mpmath.quad(lambda x: x*Pr_kD(x), [0, mpmath.inf] )","  # E_kD__ = mpmath.quad(lambda x: 1 - Pr_kD_leq_x(x), [0, mpmath.inf] )","  E_kD_ = scipy.integrate.quad(lambda x: x*Pr_kD(x), 0, np.inf)[0]","  E_kD__ = scipy.integrate.quad(lambda x: 1 - Pr_kD_leq_x(x), 0, np.inf)[0]","  print(\"E_kD= {}, E_kD_= {}, E_kD__= {}\".format(E_kD, E_kD_, E_kD__) )","  # ","  def compute(d):","    Pr_kD_leq_d = Pr_kD_leq_d_pareto(k, b, beta, d)","    ","    # mpmath.quad(lambda x: x*Pr_kD(x), [0, d] ) \\","    E_kD_given_kD_leq_d = scipy.integrate.quad(lambda x: x*Pr_kD(x), 0, d)[0] \\","                        / Pr_kD_leq_d if Pr_kD_leq_d != 0 else 0","    ","    # ED_given_D_g_doverk = lambda k: mean(D, given_X_leq_x=False, x=d/k)","    # EkD_given_kD_g_d = sum([i*ED_given_D_g_doverk(i)*k.pdf(i) for i in k.v_l] )","    EkD_given_kD_g_d = (Ek*ED - scipy.integrate.quad(lambda x: x*Pr_kD(x), 0, d)[0] ) \\","                      / (1 - Pr_kD_leq_d) if Pr_kD_leq_d != 0 else Ek*ED","    ","    log(INFO, \"\", diff=(Ek*ED - (E_kD_given_kD_leq_d*Pr_kD_leq_d + EkD_given_kD_g_d*(1 - Pr_kD_leq_d) ) ) )","    blog(E_kD_given_kD_leq_d=E_kD_given_kD_leq_d, EkD_given_kD_g_d=EkD_given_kD_g_d, Pr_kD_leq_d=Pr_kD_leq_d)","    ","    # Using law of total expectation","    ED_given_D_leq_doverk = lambda k: mean(D, given_X_leq_x=True, x=d/k)","    EkD_given_kD_leq_d_ = sum([i*ED_given_D_leq_doverk(i)*k.pdf(i) for i in k.v_l] )","    ED_given_D_g_doverk = lambda k: mean(D, given_X_leq_x=False, x=d/k)","    EkD_given_kD_g_d_ = sum([i*ED_given_D_g_doverk(i)*k.pdf(i) for i in k.v_l] )","    blog(EkD_given_kD_leq_d_=EkD_given_kD_leq_d_, EkD_given_kD_g_d_=EkD_given_kD_g_d_)","  ","    sim_E_kD_given_kD_leq_d = gen_sim_E_kD_given_kD_leq_d(d)","    blog(sim_E_kD_given_kD_leq_d=sim_E_kD_given_kD_leq_d)","  ","  l, u = a*b, 1000","  for d in np.logspace(math.log10(l), math.log10(u), 10):","    print(\"\\n>> d= {}\".format(d) )","    compute(d)","  "]},{"action":"insertText","range":{"start":{"row":552,"column":0},"end":{"row":552,"column":20}},"text":"  log(INFO, \"done.\")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":486,"column":0},"end":{"row":486,"column":2}},"text":"  "}]}]],"redo":[]},"/w_queues/scher.py":{"scrollTop":3225.5,"scrollLeft":0,"selection":{"start":{"row":182,"column":0},"end":{"row":182,"column":0}},"lastUse":1542858025270,"undo":[],"redo":[]},"/sim_exp.py":{"scrollTop":440,"scrollLeft":0,"selection":{"start":{"row":22,"column":28},"end":{"row":22,"column":28}},"lastUse":1542857640191,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":76,"column":23},"end":{"row":76,"column":24}},"text":"2"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":43,"column":5},"end":{"row":43,"column":9}},"text":"util"},{"action":"insertText","range":{"start":{"row":43,"column":5},"end":{"row":43,"column":6}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":6},"end":{"row":43,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":7},"end":{"row":43,"column":8}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":8},"end":{"row":43,"column":9}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":12},"end":{"row":27,"column":13}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":13},"end":{"row":27,"column":14}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":14},"end":{"row":27,"column":15}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":15},"end":{"row":27,"column":16}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":16},"end":{"row":27,"column":17}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":17},"end":{"row":27,"column":18}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":18},"end":{"row":27,"column":19}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":19},"end":{"row":27,"column":20}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":20},"end":{"row":27,"column":21}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":21},"end":{"row":27,"column":22}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":22},"end":{"row":27,"column":23}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":28},"end":{"row":42,"column":29}},"text":"n"},{"action":"removeText","range":{"start":{"row":41,"column":30},"end":{"row":41,"column":31}},"text":"n"},{"action":"removeText","range":{"start":{"row":35,"column":15},"end":{"row":35,"column":16}},"text":"n"},{"action":"removeText","range":{"start":{"row":27,"column":9},"end":{"row":27,"column":10}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":27},"end":{"row":42,"column":28}},"text":"w"},{"action":"removeText","range":{"start":{"row":41,"column":29},"end":{"row":41,"column":30}},"text":"w"},{"action":"removeText","range":{"start":{"row":35,"column":14},"end":{"row":35,"column":15}},"text":"w"},{"action":"removeText","range":{"start":{"row":27,"column":8},"end":{"row":27,"column":9}},"text":"w"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":26},"end":{"row":42,"column":27}},"text":"o"},{"action":"removeText","range":{"start":{"row":41,"column":28},"end":{"row":41,"column":29}},"text":"o"},{"action":"removeText","range":{"start":{"row":35,"column":13},"end":{"row":35,"column":14}},"text":"o"},{"action":"removeText","range":{"start":{"row":27,"column":7},"end":{"row":27,"column":8}},"text":"o"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":25},"end":{"row":42,"column":26}},"text":"d"},{"action":"removeText","range":{"start":{"row":41,"column":27},"end":{"row":41,"column":28}},"text":"d"},{"action":"removeText","range":{"start":{"row":35,"column":12},"end":{"row":35,"column":13}},"text":"d"},{"action":"removeText","range":{"start":{"row":27,"column":6},"end":{"row":27,"column":7}},"text":"d"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":24},"end":{"row":42,"column":25}},"text":"w"},{"action":"removeText","range":{"start":{"row":41,"column":26},"end":{"row":41,"column":27}},"text":"w"},{"action":"removeText","range":{"start":{"row":35,"column":11},"end":{"row":35,"column":12}},"text":"w"},{"action":"removeText","range":{"start":{"row":27,"column":5},"end":{"row":27,"column":6}},"text":"w"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":42,"column":23},"end":{"row":42,"column":24}},"text":"o"},{"action":"removeText","range":{"start":{"row":41,"column":25},"end":{"row":41,"column":26}},"text":"o"},{"action":"removeText","range":{"start":{"row":35,"column":10},"end":{"row":35,"column":11}},"text":"o"},{"action":"removeText","range":{"start":{"row":27,"column":4},"end":{"row":27,"column":5}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":22},"end":{"row":27,"column":23}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":23},"end":{"row":27,"column":24}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":24},"end":{"row":27,"column":25}},"text":"["}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":25},"end":{"row":27,"column":26}},"text":"]"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":34,"column":30},"end":{"row":35,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":8},"end":{"row":35,"column":17}},"text":"serv_sl_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":17},"end":{"row":35,"column":18}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":18},"end":{"row":35,"column":19}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":19},"end":{"row":35,"column":20}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":20},"end":{"row":35,"column":21}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":21},"end":{"row":35,"column":22}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":22},"end":{"row":35,"column":23}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":23},"end":{"row":35,"column":24}},"text":"d"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":24},"end":{"row":35,"column":25}},"text":"("}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":25},"end":{"row":35,"column":26}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":25},"end":{"row":35,"column":90}},"text":"(info['wait_time'] + info['run_time'] )/info['expected_run_time']"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":35,"column":90},"end":{"row":35,"column":91}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":35,"column":25},"end":{"row":35,"column":46}},"text":"(info['wait_time'] + "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":35,"column":42},"end":{"row":35,"column":43}},"text":")"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":35,"column":41},"end":{"row":35,"column":42}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":27},"end":{"row":44,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":44,"column":0},"end":{"row":44,"column":4}},"text":"    "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":4},"end":{"row":44,"column":5}},"text":"'"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":5},"end":{"row":44,"column":6}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":5},"end":{"row":44,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":6},"end":{"row":44,"column":7}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":7},"end":{"row":44,"column":8}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":8},"end":{"row":44,"column":9}},"text":"v"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":9},"end":{"row":44,"column":10}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":10},"end":{"row":44,"column":11}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":11},"end":{"row":44,"column":12}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":12},"end":{"row":44,"column":13}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":13},"end":{"row":44,"column":14}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":14},"end":{"row":44,"column":15}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":15},"end":{"row":44,"column":16}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":16},"end":{"row":44,"column":17}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":18},"end":{"row":44,"column":19}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":19},"end":{"row":44,"column":20}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":20},"end":{"row":44,"column":29}},"text":"serv_sl_l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":20},"end":{"row":44,"column":21}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":21},"end":{"row":44,"column":22}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":22},"end":{"row":44,"column":23}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":23},"end":{"row":44,"column":24}},"text":"m"},{"action":"insertText","range":{"start":{"row":44,"column":24},"end":{"row":44,"column":25}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":25},"end":{"row":44,"column":26}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":26},"end":{"row":44,"column":27}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":26},"end":{"row":44,"column":27}},"text":"a"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":25},"end":{"row":44,"column":26}},"text":"e"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":24},"end":{"row":44,"column":25}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":24},"end":{"row":44,"column":25}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":25},"end":{"row":44,"column":26}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":26},"end":{"row":44,"column":27}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":27},"end":{"row":44,"column":28}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":37},"end":{"row":44,"column":38}},"text":")"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":38},"end":{"row":44,"column":39}},"text":","}]}]],"redo":[]},"/mapper.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":15,"column":39},"end":{"row":15,"column":39}},"lastUse":1542485402030,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":30},"end":{"row":13,"column":31}},"text":"n"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":29},"end":{"row":13,"column":30}},"text":"\\"}]}]],"redo":[]}},"window":{"width":1440,"height":877,"top":23,"left":0,"isMaximized":true}}